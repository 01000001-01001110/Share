
<#
    .NOTES
   --------------------------------------------------------------------------------
	 Form generated by:  PowerShell Studio 2019
 	 Generated on:       9/12/2019 2:18 AM
 	 Logic by:	         Alan Newingham
 	 Email: 			 alan.newingham@gmail.com
 	 GitHub: 			 https://github.com/01000001-01001110
   --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-Inventory-Share_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formTechTool = New-Object 'System.Windows.Forms.Form'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$linklabelBuyingMeATea = New-Object 'System.Windows.Forms.LinkLabel'
	$labelIfYouLikeMyWorkPleas = New-Object 'System.Windows.Forms.Label'
	$labelDomainTrustResolver = New-Object 'System.Windows.Forms.Label'
	$labelTicketSearchTools = New-Object 'System.Windows.Forms.Label'
	$labelTDX = New-Object 'System.Windows.Forms.Label'
	$labelVersion9192019 = New-Object 'System.Windows.Forms.Label'
	$labelOtherVendorInformati = New-Object 'System.Windows.Forms.Label'
	$labelDellHPQuickLinks = New-Object 'System.Windows.Forms.Label'
	$labelVendorTools = New-Object 'System.Windows.Forms.Label'
	$labelQuickLinksToToolsIUs = New-Object 'System.Windows.Forms.Label'
	$labelTools = New-Object 'System.Windows.Forms.Label'
	$labelBackupTheUsersProfil = New-Object 'System.Windows.Forms.Label'
	$labelProfileBackup = New-Object 'System.Windows.Forms.Label'
	$labelMultipleWMITools = New-Object 'System.Windows.Forms.Label'
	$labelMultipleSCCMTools = New-Object 'System.Windows.Forms.Label'
	$labelSCCM = New-Object 'System.Windows.Forms.Label'
	$labelTextBase64 = New-Object 'System.Windows.Forms.Label'
	$labelSecureString = New-Object 'System.Windows.Forms.Label'
	$labelImageToBase10 = New-Object 'System.Windows.Forms.Label'
	$labelConverters = New-Object 'System.Windows.Forms.Label'
	$labelPleaseLetMeKnowIfSom = New-Object 'System.Windows.Forms.Label'
	$labelWelcomeToMynewOctobe = New-Object 'System.Windows.Forms.Label'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonConvert = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonEncodeImage = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$buttonDecodeImage = New-Object 'System.Windows.Forms.Button'
	$labelImageLocation = New-Object 'System.Windows.Forms.Label'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonEncode64 = New-Object 'System.Windows.Forms.Button'
	$buttonDecode64 = New-Object 'System.Windows.Forms.Button'
	$buttonCopyToClipboard = New-Object 'System.Windows.Forms.Button'
	$labelWelcomeToFr33Bas3The = New-Object 'System.Windows.Forms.Label'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox9 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonHPWarranty = New-Object 'System.Windows.Forms.Button'
	$buttonHPDrivers = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$labelExpressServiceCodeSe = New-Object 'System.Windows.Forms.Label'
	$labelExpressServiceCode = New-Object 'System.Windows.Forms.Label'
	$buttonFindESC = New-Object 'System.Windows.Forms.Button'
	$buttonDellDrivers = New-Object 'System.Windows.Forms.Button'
	$buttonFindST = New-Object 'System.Windows.Forms.Button'
	$buttonTechDirect = New-Object 'System.Windows.Forms.Button'
	$textbox11 = New-Object 'System.Windows.Forms.TextBox'
	$labelServiceTag = New-Object 'System.Windows.Forms.Label'
	$buttonDellWarranty = New-Object 'System.Windows.Forms.Button'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$richtextbox3 = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonUninstallReinstall = New-Object 'System.Windows.Forms.Button'
	$buttonCheckWMI = New-Object 'System.Windows.Forms.Button'
	$buttonResetRepo = New-Object 'System.Windows.Forms.Button'
	$buttonSalvageRepo = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonCheckSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonRepairSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonCCMRepairLog = New-Object 'System.Windows.Forms.Button'
	$buttonCCMSetupLog = New-Object 'System.Windows.Forms.Button'
	$buttonCMTrace = New-Object 'System.Windows.Forms.Button'
	$buttonUninstallSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonDelSCCMCache = New-Object 'System.Windows.Forms.Button'
	$buttonInstallSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonSCCMLogs = New-Object 'System.Windows.Forms.Button'
	$buttonClientHealthEval = New-Object 'System.Windows.Forms.Button'
	$buttonRunMachinePolicy = New-Object 'System.Windows.Forms.Button'
	$buttonRestartConfigMan = New-Object 'System.Windows.Forms.Button'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$groupbox12 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxOpenOutlook = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxOpenFirefox = New-Object 'System.Windows.Forms.CheckBox'
	$labelCheckDirectoryYouWan = New-Object 'System.Windows.Forms.Label'
	$checkboxOpenChrome = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxOpenOneDrive = New-Object 'System.Windows.Forms.CheckBox'
	$Info = New-Object 'System.Windows.Forms.GroupBox'
	$labelenvUserName = New-Object 'System.Windows.Forms.Label'
	$labelOSInstallDate = New-Object 'System.Windows.Forms.Label'
	$labelenvCOMPUTERNAME = New-Object 'System.Windows.Forms.Label'
	$labelAuthenticatedUser = New-Object 'System.Windows.Forms.Label'
	$labelInstDate = New-Object 'System.Windows.Forms.Label'
	$labelWindowsUser = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$labelDeviceName = New-Object 'System.Windows.Forms.Label'
	$labelProfileBackup005 = New-Object 'System.Windows.Forms.Label'
	$buttonPrograms = New-Object 'System.Windows.Forms.Button'
	$buttonInventory = New-Object 'System.Windows.Forms.Button'
	$buttonPrinters = New-Object 'System.Windows.Forms.Button'
	$buttonBackup = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxOneDrive = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxCustomDirectory = New-Object 'System.Windows.Forms.CheckBox'
	$textbox7 = New-Object 'System.Windows.Forms.TextBox'
	$checkboxQuickparts = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxBrowsers = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxVideos = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxPictures = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDocuments = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDownloads = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDesktop = New-Object 'System.Windows.Forms.CheckBox'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$labelFromLocation = New-Object 'System.Windows.Forms.Label'
	$labelToLocation = New-Object 'System.Windows.Forms.Label'
	$richtextbox4 = New-Object 'System.Windows.Forms.RichTextBox'
	$tabpage7 = New-Object 'System.Windows.Forms.TabPage'
	$buttonRunInventory = New-Object 'System.Windows.Forms.Button'
	$buttonDevMode = New-Object 'System.Windows.Forms.Button'
	$buttonScrapeAD = New-Object 'System.Windows.Forms.Button'
	$buttonADUC = New-Object 'System.Windows.Forms.Button'
	$buttonComputerManagement = New-Object 'System.Windows.Forms.Button'
	$buttonDeviceManager = New-Object 'System.Windows.Forms.Button'
	$buttonSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonRegedit = New-Object 'System.Windows.Forms.Button'
	$buttonControlPanel = New-Object 'System.Windows.Forms.Button'
	$buttonPrintManagement = New-Object 'System.Windows.Forms.Button'
	$buttonDeleteSCCMCache = New-Object 'System.Windows.Forms.Button'
	$buttonWinSysInfo = New-Object 'System.Windows.Forms.Button'
	$buttonProgramList = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox14 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonNewIncident = New-Object 'System.Windows.Forms.Button'
	$buttonNewRequest = New-Object 'System.Windows.Forms.Button'
	$buttonPasswordResetForm = New-Object 'System.Windows.Forms.Button'
	$groupbox13 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox12 = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$tabpage9 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox15 = New-Object 'System.Windows.Forms.GroupBox'
	$labelRemoteComputerName = New-Object 'System.Windows.Forms.Label'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$textbox13 = New-Object 'System.Windows.Forms.TextBox'
	$textbox14 = New-Object 'System.Windows.Forms.TextBox'
	$buttonAssociateWithDomain = New-Object 'System.Windows.Forms.Button'
	$buttonDissociateFromDomain = New-Object 'System.Windows.Forms.Button'
	$groupbox16 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonCheckPassword = New-Object 'System.Windows.Forms.Button'
	$buttonResetPassword = New-Object 'System.Windows.Forms.Button'
	$buttonTestTrustRelationshi = New-Object 'System.Windows.Forms.Button'
	$button39 = New-Object 'System.Windows.Forms.Button'
	$button38 = New-Object 'System.Windows.Forms.Button'
	$richtextbox5 = New-Object 'System.Windows.Forms.RichTextBox'
	$label988 = New-Object 'System.Windows.Forms.Label'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$labelTrustRelationshipRes = New-Object 'System.Windows.Forms.Label'
	$utilityBeltToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$computerInfoToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$systemInformationToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpPageToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$moreHelpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$evenMoreHelpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutTheToolToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutTheAuthorToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutLifeToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$sCCMToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$cMActionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$cMDToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$powershellToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$controlPanelToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDUCToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$eventViewerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formTechTool_Load={
		#TODO: Initialize Form Controls here
		
	}
	# Setting up Speech
	# Need to load the System.Speech assembly
	Add-Type -AssemblyName System.speech
	
	# Now we create the SpeechSynthesizer object.
	$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
	
	# Setting voice
	$speak.SelectVoice('Microsoft Zira Desktop')
	function aboutLife
	{
		#requires -Version 3
		#------------------------------------------------------------------------
		# Source File Information (DO NOT MODIFY)
		# Source ID: 21ebfdda-1c39-4420-b4a6-fbd5f66d6029
		# Source File: C:\Users\Newingha\Documents\SAPIEN\PowerShell Studio\Files\Life.psf
		#------------------------------------------------------------------------
		
	<#
	    .NOTES
	    --------------------------------------------------------------------------------
	     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.167
	     Generated on:       9/19/2019 2:46 PM
	     Generated by:       Support.newingha
	    --------------------------------------------------------------------------------
	    .DESCRIPTION
	        GUI script generated by PowerShell Studio 2019
	#>
		
		
		#----------------------------------------------
		#region Application Functions
		#----------------------------------------------
		
		#endregion Application Functions
		
		#----------------------------------------------
		# Generated Form Function
		#----------------------------------------------
		function Show-Life_psf
		{
			
			#----------------------------------------------
			#region Import the Assemblies
			#----------------------------------------------
			[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
			[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
			#endregion Import Assemblies
			
			#----------------------------------------------
			#region Generated Form Objects
			#----------------------------------------------
			[System.Windows.Forms.Application]::EnableVisualStyles()
			$formLife = New-Object 'System.Windows.Forms.Form'
			$label42 = New-Object 'System.Windows.Forms.Label'
			$pictureboxSplashScreenHidden = New-Object 'System.Windows.Forms.PictureBox'
			$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
			#endregion Generated Form Objects
			
			#----------------------------------------------
			# User Generated Script
			#----------------------------------------------
			
			$formSplashScreen_Load = {
			<#
			Use the -PassTru parameter to update the splash screen text:
			.EXAMPLE
			$splashForm = Show-SplashScreen ... -PassThru
			#Update the splash screen text
			$splashForm.Text = 'Loading Modules...'
			#>
				
				$paramShowSplashScreen = @{
					Image = $pictureboxSplashScreenHidden.Image
					Title = 'Loading...'
					PassThru = $false
				}
				
				Show-SplashScreen @paramShowSplashScreen
				
				#TODO: Place initialization script here:
				
			}
			
			#region Splash Screen Helper Function
			function Show-SplashScreen
			{
			<#
			.SYNOPSIS
				Displays a splash screen using the specified image.
			
			.PARAMETER Image
				Mandatory Image object that is displayed in the splash screen.
			
			.PARAMETER Title
				(Optional) Sets a title for the splash screen window. 
			
			.PARAMETER Timeout
				The amount of seconds before the splash screen is closed.
				Set to 0 to leave the splash screen open indefinitely.
				Default: 2
			
			.PARAMETER ImageLocation
				The file path or url to the image.
		
			.PARAMETER PassThru
				Returns the splash screen form control. Use to manually close the form.
			
			.PARAMETER Modal
				The splash screen will hold up the pipeline until it closes.
		
			.EXAMPLE
				PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3
		
			.EXAMPLE
				PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3
		
			.EXAMPLE
				PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
						#close the splash screen
						$splashScreen.Close()
			.OUTPUTS
				System.Windows.Forms.Form
			
			.NOTES
				Created by SAPIEN Technologies, Inc.
		
				The size of the splash screen is dependent on the image.
				The required assemblies to use this function outside of a WinForms script:
				Add-Type -AssemblyName System.Windows.Forms
				Add-Type -AssemblyName System.Drawing
		#>
				[OutputType([System.Windows.Forms.Form])]
				param
				(
					[Parameter(ParameterSetName = 'Image',
							   Mandatory = $true,
							   Position = 1)]
					[ValidateNotNull()]
					[System.Drawing.Image]$Image,
					[Parameter(Mandatory = $false)]
					[string]$Title,
					[int]$Timeout = 2,
					[Parameter(ParameterSetName = 'ImageLocation',
							   Mandatory = $true,
							   Position = 1)]
					[ValidateNotNullOrEmpty()]
					[string]$ImageLocation,
					[switch]$PassThru,
					[switch]$Modal
				)
				
				#Create a splash screen form to display the image.
				$splashForm = New-Object System.Windows.Forms.Form
				
				#Create a picture box for the image
				$pict = New-Object System.Windows.Forms.PictureBox
				
				if ($Image)
				{
					$pict.Image = $Image;
				}
				else
				{
					$pict.Load($ImageLocation)
				}
				
				$pict.AutoSize = $true
				$pict.Dock = 'Fill'
				$splashForm.Controls.Add($pict)
				
				#Display a title if defined.
				if ($Title)
				{
					$splashForm.Text = $Title
					$splashForm.FormBorderStyle = 'FixedDialog'
				}
				else
				{
					$splashForm.FormBorderStyle = 'None'
				}
				
				#Set a timer
				if ($Timeout -gt 0)
				{
					$timer = New-Object System.Windows.Forms.Timer
					$timer.Interval = $Timeout * 1000
					$timer.Tag = $splashForm
					$timer.add_Tick({
							$this.Tag.Close();
							$this.Stop()
						})
					$timer.Start()
				}
				
				#Show the form
				$splashForm.AutoSize = $true
				$splashForm.AutoSizeMode = 'GrowAndShrink'
				$splashForm.ControlBox = $false
				$splashForm.StartPosition = 'CenterScreen'
				$splashForm.TopMost = $true
				
				if ($Modal) { $splashForm.ShowDialog() }
				else { $splashForm.Show() }
				
				if ($PassThru)
				{
					return $splashForm
				}
			}
			#endregion
			# --End User Generated Script--
			#----------------------------------------------
			#region Generated Events
			#----------------------------------------------
			
			$Form_StateCorrection_Load =
			{
				#Correct the initial state of the form to prevent the .Net maximized form issue
				$formLife.WindowState = $InitialFormWindowState
			}
			
			$Form_Cleanup_FormClosed =
			{
				#Remove all event handlers from the controls
				try
				{
					$formLife.remove_Load($formSplashScreen_Load)
					$formLife.remove_Load($Form_StateCorrection_Load)
					$formLife.remove_FormClosed($Form_Cleanup_FormClosed)
				}
				catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
			}
			#endregion Generated Events
			
			#----------------------------------------------
			#region Generated Form Code
			#----------------------------------------------
			$formLife.SuspendLayout()
			$pictureboxSplashScreenHidden.BeginInit()
			#
			# formLife
			#
			$formLife.Controls.Add($label42)
			$formLife.Controls.Add($pictureboxSplashScreenHidden)
			$formLife.AutoScaleDimensions = '6, 13'
			$formLife.AutoScaleMode = 'Font'
			$formLife.ClientSize = '161, 145'
			$formLife.Margin = '2, 2, 2, 2'
			$formLife.Name = 'formLife'
			$formLife.StartPosition = 'CenterScreen'
			$formLife.Text = 'Life'
			$formLife.add_Load($formSplashScreen_Load)
			#
			# label42
			#
			$label42.AutoSize = $True
			$label42.Font = 'Microsoft Sans Serif, 72pt'
			$label42.Location = '12, 9'
			$label42.Name = 'label42'
			$label42.Size = '142, 124'
			$label42.TabIndex = 1
			$label42.Text = '42'
			$label42.UseCompatibleTextRendering = $True
			#
			# pictureboxSplashScreenHidden
			#
			#region Binary Data
			$pictureboxSplashScreenHidden.Image = [System.Convert]::FromBase64String('')
			#endregion
			$pictureboxSplashScreenHidden.Location = '-2, -25'
			$pictureboxSplashScreenHidden.Name = 'pictureboxSplashScreenHidden'
			$pictureboxSplashScreenHidden.Size = '24, 25'
			$pictureboxSplashScreenHidden.TabIndex = 0
			$pictureboxSplashScreenHidden.TabStop = $False
			$pictureboxSplashScreenHidden.Visible = $False
			$pictureboxSplashScreenHidden.EndInit()
			$formLife.ResumeLayout()
			#endregion Generated Form Code
			
			#----------------------------------------------
			
			#Save the initial state of the form
			$InitialFormWindowState = $formLife.WindowState
			#Init the OnLoad event to correct the initial state of the form
			$formLife.add_Load($Form_StateCorrection_Load)
			#Clean up the control events
			$formLife.add_FormClosed($Form_Cleanup_FormClosed)
			#Show the Form
			return $formLife.ShowDialog()
			
		} #End Function
		
		#Call the form
		Show-Life_psf | Out-Null
		
	}
	function encodeAll
	{
		$Text = $RichTextBox1.text
		$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
		$EncodedText = [Convert]::ToBase64String($Bytes)
		$RichTextBox1.text = $EncodedText
	}
	
	function decodeAll
	{
		$EncodedText = $RichTextBox1.text
		$DecodedText = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($EncodedText))
		$RichTextBox1.text = $DecodedText
	}
	
	function ConvertImage
	{
		$Texta = $TextBox10.text
		$EncodedText = [convert]::ToBase64String((Get-Content $texta -Encoding byte))
		$RichTextBox1.text = $EncodedText
	}
	
	function decodeImage
	{
		$b64 = $RichTextBox1.text
		$filename = $TextBox10.text
		
		$bytes = [Convert]::FromBase64String($b64)
		$DecodedText = [IO.File]::WriteAllBytes($filename, $bytes)
		$RichTextBox1.text = $DecodedText
	}
	
	
	function rebuildWMI
	{
		function DisableService([System.ServiceProcess.ServiceController]$svc)
		{
			Set-Service -Name $svc.Name -StartupType Disabled
		}
		
		function EnableServiceAuto([System.ServiceProcess.ServiceController]$svc)
		{
			Set-Service -Name $svc.Name -StartupType Automatic
		}
		
		function StopService([System.ServiceProcess.ServiceController]$svc)
		{
			[string]$dep = ([string]::Empty)
			
			foreach ($depsvc in $svc.DependentServices)
			{ $dep += $depsvc.DisplayName + ", " }
			
			$richtextbox1.Text += "`nStopping $($svc.DisplayName) and its dependent services ($dep)"
			
			$svc.Stop()
			
			$svc.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Stopped)
			
			$richtextbox1.Text += "`nStopped $($svc.DisplayName)"
		}
		
		function StartService([System.ServiceProcess.ServiceController]$svc, [bool]$handleDependentServices)
		{
			if ($handleDependentServices)
			{
				$richtextbox1.Text += "`nStarting $($svc.DisplayName) and its dependent services"
			}
			
			else
			{
				$richtextbox1.Text += "`nStarting $($svc.DisplayName)"
			}
			
			if (!$svc.Status -ne [System.ServiceProcess.ServiceControllerStatus]::Running)
			{
				try
				{
					$svc.Start()
					
					$svc.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Running)
				}
				
				catch { }
			}
			
			$richtextbox1.Text += "`nStarted $($svc.DisplayName)"
			
			if ($handleDependentServices)
			{
				[System.ServiceProcess.ServiceController]$depsvc = $null;
				
				foreach ($depsvc in $svc.DependentServices)
				{
					if ($depsvc.StartType -eq [System.ServiceProcess.ServiceStartMode]::Automatic)
					{ StartService $depsvc $handleDependentServices }
				}
			}
		}
		
		function RegSvr32([string]$path)
		{
			$richtextbox1.Text += "`nRegistering $path"
			
			regsvr32.exe $path /s
		}
		
		function RegisterMof([System.IO.FileSystemInfo]$item)
		{
			[bool]$register = $true
			
			$richtextbox1.Text += "`nInspecting: $($item.FullName)"
			
			if ($item.Name.ToLowerInvariant().Contains('uninstall'))
			{
				$register = $false
				$richtextbox1.Text += "`nSkipping - uninstall file: $($item.FullName)"
			}
			
			elseif ($item.Name.ToLowerInvariant().Contains('remove'))
			{
				$register = $false
				$richtextbox1.Text += "`nSkipping - remove file: $($item.FullName)"
			}
			
			else
			{
				$txt = Get-Content $item.FullName
				
				if ($txt.Contains('#pragma autorecover'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - autorecover: $($item.FullName)"
				}
				
				elseif ($txt.Contains('#pragma deleteinstance'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - deleteinstance: $($item.FullName)"
				}
				
				elseif ($txt.Contains('#pragma deleteclass'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - deleteclass: $($item.FullName)"
				}
			}
			
			if ($register)
			{
				$richtextbox1.Text += "`nRegistering $($item.FullName)"
				mofcomp $item.FullName
			}
		}
		
		function HandleFSO([System.IO.FileSystemInfo]$item, [string]$targetExt)
		{
			if ($item.Extension -ne [string]::Empty)
			{
				if ($targetExt -eq 'dll')
				{
					if ($item.Extension.ToLowerInvariant() -eq '.dll')
					{ RegSvr32 $item.FullName }
				}
				
				elseif ($targetExt -eq 'mof')
				{
					if (($item.Extension.ToLowerInvariant() -eq '.mof') -or ($item.Extension.ToLowerInvariant() -eq '.mfl'))
					{ RegisterMof $item }
				}
			}
		}
		
		# get Winmgmt service
		[System.ServiceProcess.ServiceController]$wmisvc = Get-Service 'winmgmt'
		
		# disable winmgmt service
		DisableService $wmisvc
		
		# stop winmgmt service
		StopService $wmisvc
		
		# get wbem folder
		[string]$wbempath = [Environment]::ExpandEnvironmentVariables("%windir%\system32\wbem")
		
		[System.IO.FileSystemInfo[]]$itemlist = Get-ChildItem $wbempath -Recurse | Where-Object { $_.FullName.Contains('AutoRecover') -ne $true }
		
		[System.IO.FileSystemInfo]$item = $null
		
		# walk dlls
		foreach ($item in $itemlist)
		{ HandleFSO $item 'dll' }
		
		# call /regserver method on WMI private server executable
		wmiprvse /regserver
		
		# call /resetrepository method on WinMgmt service executable
		winmgmt /resetrepository
		
		# enable winmgmt service
		EnableServiceAuto $wmisvc
		
		# start winmgmt service
		StartService $wmisvc $true
		
		# walk MOF / MFLs
		foreach ($item in $itemlist)
		{ HandleFSO $item 'mof' }
	}
	
	function InstallSCCM
	{
		taskmgr
		cmd /c 'MD C:\Windows\CCM'
		Invoke-Item c:\windows\ccmsetup\
		cmd /c 'copy "\\SERVER\DIR\Software\SCCM\Client\ccmsetup\ccmsetup.exe" "C:\Windows\CCM\ccmsetup.exe" /Z /Y'
		$ps.StartInfo.Filename = "C:\windows\CCM\ccmsetup.exe"
		$ps.StartInfo.Arguments = " /forceinstall"
		$ps.start()
		$ps.WaitForExit()
		$richtextbox1.Text += "`nStarted CCM Setup."
	}
	
	function decodeImage
	{
		$b64 = $RichTextBox1.text
		$filename = $TextBox10.text
		
		$bytes = [Convert]::FromBase64String($b64)
		$DecodedText = [IO.File]::WriteAllBytes($filename, $bytes)
		$RichTextBox1.text = $DecodedText
	}
	
	$buttonCopyToClipboard_Click = {
		#TODO: Place custom script here
		#[System.Windows.Forms.Clipboard]::SetText($RichTextBox1.text.Trim())
		$copyText = $RichTextBox1.Text.Trim()
		[System.Windows.Forms.Clipboard]::SetText($copyText)
		
		if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
			[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
		{
			$statusbar1.Text = "Copied to clipboard."
			$statusbar1.Visible = $true
			Start-Sleep -Seconds 2
			$statusbar1.Visible = $false
		}
	}
	
	function convertsecurestring
	{
		$textbox1.Text | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString
		
	}
	
	function testPassword
	{
		$passwordSyncStatus = Test-ComputerSecureChannel
	}
	
	function repairPassword
	{
		$repairPasswordSync = Test-ComputerSecureChannel -Repair -Credential (Get-Credential)
	}
	
	function unJoinComputerRemote
	{
		
		
		$instance = Get-CimInstance -ComputerName $textbox3.Text -ClassName 'Win32_ComputerSystem'
		
		$invCimParams = @{
			MethodName = 'UnjoinDomainOrWorkGroup'
			Arguments  = @{ FUnjoinOptions = 0; Username = $textbox1.Text; Password = $textbox2.Text }
		}
		$instance | Invoke-CimMethod @invCimParams
	}
	
	function CCMSQLCELog
	{
		$richtextbox1.Text += "`nChecks the CM client to see if it is in debug mode. Also checks the CcmSQLCE.log file. If so warns and starts the SDF file cleanup and reinstall of the CM client."
		$richtextbox1.Text += "`nThen stops the service and deletes the sdf files. I do not delete the client automatically in case you are remotely connected to the PC."
		$logdir = Get-CCMLogDirectory
		$ccmdir = Get-CCMDirectory
		$logFile = "$logdir\CcmSQLCE.log"
		$logLevel = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\CCM\Logging\@Global').logLevel
		
		if ((Test-Path -Path $logFile) -and ($logLevel -ne 0))
		{
			# Not in debug mode, and CcmSQLCE.log exists. This could be bad.
			$LastWriteTime = (Get-ChildItem $logFile).LastWriteTime
			$CreationTime = (Get-ChildItem $logFile).CreationTime
			$FileDate = Get-Date($LastWriteTime)
			$FileCreated = Get-Date($CreationTime)
			
			$now = Get-Date
			if ((($now - $FileDate).Days -lt 7) -and ((($now - $FileCreated).Days) -gt 7))
			{
				$text = "CM client not in debug mode, and CcmSQLCE.log exists. This is very bad. Cleaning up local SDF files and reinstalling CM client"
				$richtextbox1.Text += $text
				# Delete *.SDF Files
				$Service = Get-Service -Name ccmexec
				$Service.Stop()
				
				$seconds = 0
				Do
				{
					Start-Sleep -Seconds 1
					$seconds++
				}
				while (($Service.Status -ne "Stopped") -and ($seconds -le 60))
				
				# Do another test to make sure CcmExec service really is stopped
				if ($Service.Status -ne "Stopped") { Stop-Service -Name ccmexec -Force }
				
				$richtextbox1.Text += "`nWaiting 10 seconds to allow file locking issues to clear up"
				Start-Sleep -seconds 10
				
				try
				{
					$files = Get-ChildItem "$ccmdir\*.sdf"
					$files | Remove-Item -Force | Out-Null
					Remove-Item -Path $logFile -Force | Out-Null
				}
				catch
				{
					$richtextbox1.Text += "`nObviously that wasn't enough time"
					Start-Sleep -Seconds 30
					# We try again
					$files = Get-ChildItem "$ccmdir\*.sdf"
					$files | Remove-Item -Force | Out-Null
					Remove-Item -Path $logFile -Force | Out-Null
				}
				
				$obj = $true
			}
			
			# CcmSQLCE.log has not been updated for two days. We are good for now.
			else { $obj = $false }
		}
		
		# we are good
		else { $obj = $false }
		$richtextbox1.Text += $obj
	}
	
	function reJoinComputerRemote
	{
		
		$instance = Get-CimInstance -ComputerName $textbox3.Text -ClassName 'Win32_ComputerSystem'
		
		$invCimParams = @{
			MethodName = 'JoinDomainOrWorkGroup'
			Arguments  = @{ FJoinOptions = 3; Name = DOMAIN ; Username = $textbox1.Text; Password = $textbox2.Text }
		}
		$instance | Invoke-CimMethod @invCimParams
	}
	
	function restartComputer
	{
		
	}
	
	function unJoinComputer
	{
		$richtextbox1.Text = "Removing Computer from Domain and joining WorkgroupS. It's a new elite workgroup. Not your grandfathers workgroup that's for sure."
		Remove-Computer -ComputerName $Computer -LocalCredential $LocalCredential -UnjoinDomainCredential $DomainCredential -Workgroup WorkgroupS -Restart -Force
	}
	
	function reJoinComputer
	{
		$richtextbox1.Text = "Adding the Computer to the domain. It's what all the cool kids are doing!"
		Add-Computer -ComputerName $Computer -DomainName $DomainName -Credential $DomainCredential -LocalCredential $LocalCredential -Restart -Force
	}
	
	function Test-DomainTrust ($Computername)
	{
		$Result = netdom verify /domain: $env:COMPUTERNAME
		if ($Result -match 'command completed successfully')
		{
			$richtextbox1.Text = "Domain Trust Established. Nothing Needed."
		}
		else
		{
			$richtextbox1.Text = "Domain Trust Lost. Please Locate Domain Trust."
		}
	}
	
	$CurrentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	[string]$ComputerName = $env:computername
	$Computer = $ComputerName
	$LoggedOnUser = (Get-WmiObject win32_computersystem -ComputerName $Computer).Username
	$InstDate = (Get-CimInstance Win32_OperatingSystem).InstallDate
	#End Region - Automatic System Information Gathering
	
	
	
	
	function DeleteSCCM
	{
		$richtextbox1.Text += "`nUninstalling SCCM"
		cmd /c "%windir%\ccmsetup\ccmsetup.exe /uninstall"
		
		# Stop Services
		Stop-Service -Name ccmsetup -Force -ErrorAction SilentlyContinue
		Stop-Service -Name CcmExec -Force
		Stop-Service -Name smstsmgr -Force
		Stop-Service -Name CmRcService -Force
		
		# Remove WMI Namespaces
		Get-WmiObject -Query "SELECT * FROM __Namespace WHERE Name='ccm'" -Namespace root | Remove-WmiObject
		Get-WmiObject -Query "SELECT * FROM __Namespace WHERE Name='ms'" -Namespace root\cimv2 | Remove-WmiObject
		
		# Remove Services from Registry
		$MyReg = "HKLM:\SYSTEM\CurrentControlSet\Services"
		Remove-Item -Path $MyReg\CCMSetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\CcmExec -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\smstsmgr -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\CmRcService -Force -Recurse -ErrorAction SilentlyContinue
		
		# Remove SCCM Client from Registry
		$MyPath = "HKLM:\SOFTWARE\Microsoft"
		Remove-Item -Path $MyPath\CCM -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyPath\CCMSetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyPath\SMS -Force -Recurse -ErrorAction SilentlyContinue
		
		# Remove Folders and Files
		$MyDir = $env:WinDir
		Remove-Item -Path $MyDir\CCM -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\ccmsetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\ccmcache -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\SMSCFG.ini -Force -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\SMS*.mif -Force -ErrorAction SilentlyContinue
		$richtextbox1.Text += "`nCompleted Uninstalling SCCM."
	}
	function cmTrace
	{
		cmd /c "C:\WINDOWS\CCM\CMTrace.exe"
		$richtextbox1.Text += "`nStarted CMTrace."
	}
	function CcmRepair1
	{
		cmd /c "C:\Windows\CCM\ccmrepair.exe"
		$richtextbox1.Text += "`nStarted CCMRepair."
	}
	
	function Get-Inventory
	{
		$InventoryScript = cmd /c "net use"
		$InventoryScript += cmd /c "WMIC OS LIST BRIEF"
		$InventoryScript += cmd /c "WMIC BIOS get serialnumber"
		$InventoryScript += cmd /c "ipconfig /all"
		$InventoryScript += cmd /c 'net localgroup "Administrators"'
		$InventoryScript += cmd /c "WMIC OS GET csname"
		$InventoryScript += cmd /c 'netsh advfirewall export "$textbox2.Text\firwallpolicy.wfw"'
		$InventoryScript += cmd /c "WEVTUtil query-events System /count:500 /rd:true /format:text"
		$InventoryScript | Out-GridView
	}
	function listUsers
	{
		$userFolders = Get-ChildItem -path c:\users | Select-Object Name
		[array]$userFolders = Get-ChildItem -path C:\Users | Select-Object Name
		ForEach ($Item in $userFolders) { $richtextbox1.Items.Add($Item.Name) }
	}
	
	Function Get-Folder($initialDirectory)
	{
		[void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
		$FolderBrowserDialog = New-Object System.Windows.Forms.FolderBrowserDialog
		$FolderBrowserDialog.RootFolder = 'MyComputer'
		if ($initialDirectory) { $FolderBrowserDialog.SelectedPath = $initialDirectory }
		[void]$FolderBrowserDialog.ShowDialog()
		return $FolderBrowserDialog.SelectedPath
	}
	#($FolderPermissions = Get-Folder C:\Users | get-acl | select -exp access | ft)
	
	function backupDirectory
	{
		$source = $TextBox8.Text
		$dest = $TextBox9.Text
		If (Test-Path $source)
		{
			If ($checkboxOpenOutlook.Checked)
			{
				$speak.Speak("Initializing Outlook to create your profile.")
				$richtextbox4.Text += "`nInitializing Outlook to create the profile. Once you sign in and see your email loading please close the email client."
				cmd /c 'start "" "%ProgramFiles(x86)%\Microsoft Office\Office16\Outlook.exe"'
				$richtextbox4.Text += "`nOutlook profile created."
			}
			If ($checkboxOpenFirefox.Checked)
			{
				$speak.Speak("Initializing Firefox to create your profile.")
				$richtextbox4.Text += "`nInitializing Firefox Browser to build your profile, once open, please close the browser to continue."
				cmd /c 'start "" "%ProgramFiles%\Mozilla Firefox\firefox.exe"'
				$richtextbox4.Text += "`nFirefox profile created."
			}
			If ($checkboxOpenChrome.Checked)
			{
				$speak.Speak("Initializing Chrome to create your profile.")
				$richtextbox4.Text += "`nInitializing Browser to build your profile, once open, please close the browser to continue."
				cmd /c 'start "" "%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"'
				$richtextbox4.Text += "`nChrome profile created."
			}
			If ($checkboxOneDrive.Checked)
			{
				$speak.Speak("Initializing OneDrive to create your profile.")
				$richtextbox4.Text += "`nInitializing OneDrive data backup, once open, please close the window."
				cmd /c 'start "" "%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"'
				$richtextbox4.Text += "`nOneDrive profile created."
			}
			If ($checkboxDesktop.Checked)
			{
				$ProgressBar1.Value = "15"
				Robocopy $source\Desktop $dest\Desktop *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nDesktop directory backed up successfully."
				$speak.Speak("The Desktop directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar4.Value = "30"
			}
			If ($checkboxDocuments.Checked)
			{
				Robocopy $source\Documents $dest\Documents *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nDocuments directory backed up successfully."
				$speak.Speak("The Documents directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar4.Value = "45"
			}
			If ($checkboxDownloads.Checked)
			{
				Robocopy $source\Downloads $dest\Downloads *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nDownloads directory backed up successfully."
				$speak.Speak("The Downloads directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "57"
			}
			If ($checkboxBrowsers.Checked)
			{
				$richtextbox4.Text += "Initializing Browser data backup, please close the customer's browsers now."
				Robocopy $source\Favorites $dest\Favorites *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$ProgressBar1.Value = "60"
				Robocopy $source\AppData\Local\Google $dest\AppData\Local\Google *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$ProgressBar1.Value = "63"
				Robocopy $source\AppData\Roaming\Mozilla\Firefox\Profiles $dest\AppData\Roaming\Mozilla\Firefox\Profiles *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$ProgressBar1.Value = "64"
				
				$richtextbox4.Text += "`nIE, FireFox, and Chrome Bookmark directories backed up successfully."
				$speak.Speak("The Eye E, Fire Fox and Chrome Bookmarks directories completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "65"
			}
			If ($checkboxPictures.Checked)
			{
				Robocopy $source\Pictures $dest\Pictures *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nPictures directory backed up successfully."
				$speak.Speak("The Pictures directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "75"
			}
			If ($checkboxVideos.Checked)
			{
				Robocopy $source\Videos $dest\Videos *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nVideos directory backed up successfully."
				$speak.Speak("The Videos directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "80"
			}
			If ($checkboxQuickparts.Checked)
			{
				Robocopy "$source\application data\microsoft\templates" "$dest\application data\microsoft\templates" *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nQuickParts directory backed up successfully."
				$speak.Speak("The Microsoft QuickParts completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "90"
			}
			If ($checkboxCustomDirectory.Checked)
			{
				$source = $textbox7.Text
				Robocopy $source $dest\Custom_Directory_Backup *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`nCustom directory backed up successfully."
				$speak.Speak("The custom backup directory completed backing up. Continuing backup.")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "93"
			}
			If ($checkboxOneDrive.Checked)
			{
				Robocopy $source\OneDrive - Embry-Riddle Aeronautical University $dest\OneDrive - Embry-Riddle Aeronautical University.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox4.Text += "`OneDrive directory backed up successfully."
				$speak.Speak("The OneDrive, directory completed backing up. 96 percent complete")
				$richtextbox4.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "96"
			}
			Robocopy $source\AppData\Roaming\Adobe\Acrobat\DC\Security $dest\AppData\Roaming\Adobe\Acrobat\DC\Security *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
			$richtextbox4.Text += "`nAdobe signature file backed up successfully."
			$speak.Speak("The Adobe signature file completed backing up.")
			
			$richtextbox4.Text += "`nOneDrive-Not-Yet-Syncd-Files directory backed up successfully."
			$speak.Speak("OneDrive Not Yet Sinked Files directory backed up successfully.")
			Robocopy $source\application data\microsoft\signatures $dest\application data\microsoft\signatures *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
			$richtextbox4.Text += "`nOutlook signature backed up successfully."
			$speak.Speak("The Outlook signaturecompleted backing up. 98 percent complete")
			$ProgressBar1.Value = "98"
			$ProgressBar1.Value = "100"
			$speak.Speak("All selected directories completed backing up. Please continue with your day in whatever manner that might mean.")
			$result = [System.Windows.Forms.MessageBox]::Show('This Operation Completed Successfully!', 'Warning', 'OK', 'Warning')
			$result
		}
		Else
		{
			$speak.Speak("No joy. I was unable to locate the directory you specified. Please check your path and try again.")
			$result = [System.Windows.Forms.MessageBox]::Show('Unable to reach souce location!', 'Warning', 'YesNo', 'Warning')
			$result
		}
	}
	
	$buttonPrograms_Click = {
		Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Out-GridView
	}
	
	$buttonPrinters_Click = {
		control printers
	}
	
	$buttonTDX_Click = {
		#($FolderPermissions = Get-Folder C:\Users | get-acl | select -exp access | ft)
		Start-Process "https://"
	}
	
	function CcmRestart
	{
		$salvageRepo = (winmgmt /salvagerepository) | Out-String
		$richtextbox1.Text += $salvageRepo
	}
	function CcmRepair
	{
		$verifyRepo = (winmgmt /verifyrepository) | Out-String
		$richtextbox1.Text += $verifyRepo
	}
	
	function ResetRepo
	{
		cmd /c "net stop winmgmt /y"
		$ResetRepo1 = (winmgmt /resetRepository) | Out-String
		$richtextbox1.Text += $ResetRepo1
	}
	
	function Find-ESC
	{
		Begin { }
		
		Process
		{
			$ValB36 = $textbox11.Text
			$Range = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			$ca = $ValB36.ToUpper().ToCharArray()
			[System.Array]::Reverse($ca)
			[System.Int64]$ValB10 = 0
			
			$i = 0
			foreach ($c in $ca)
			{
				$ValB10 += $Range.IndexOf($c) * [System.Int64][System.Math]::Pow(36, $i)
				$i += 1
			}
			
			$Textbox2.Text = $ValB10
			$Textbox11.Text = $ValB36
			
		}
		
		End { }
		
	}
	
	function Find-ST
	{
		Begin { }
		
		Process
		{
			$Alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			$Base36 = ''
			$OriginalVal = $Textbox2.Text
			$Base10 = $Textbox2.Text
			do
			{
				$r = $Base10 % 36
				$c = $Alphabet.Substring($r, 1)
				$Base36 = "$c$Base36"
				$Base10 = ($Base10 - $r)/36
			}
			while ($Base10 -gt 0)
			
			$Textbox2.Text = $OriginalVal
			$Textbox11.Text = $Base36
		}
		
		End { }
		
	}
	
	function remoteComputerManagement
	{
		$computerName = [Microsoft.VisualBasic.Interaction]::InputBox('Enter Host Name or IP Address of the computer you would like to connect to:', "Remote Computer Management")
		If (Test-Connection -ComputerName $computerName -quiet)
		{
			Start-Process compmgmt.msc /computer=\\$computerName
		}
		Else { $wshell.Popup("Unable to connect to host.", 0, "Error") }
	}
	function Launch-UNC
	{
		$computerName = $computerTextBox1.Text
		logAction "UNC path to $computerName accessed."
		$ShellExp = New-Object -ComObject Shell.Application
		$ShellExp.open("\\$computerName\c$")
	}
	
	function Launch-RDC
	{
		$computerName = $computerTextBox1.Text
		logAction "RDC Connection initiated to $computerName"
		Start-Process "$env:windir\system32\mstsc.exe" -ArgumentList "/v:$computerName"
	}
	
	Function Launch-RDP
	{
		$computerName = $computerTextBox1.Text
		logAction "RDP Session initiated to $computerName"
		Start-Process "C:\Program Files (x86)\SCCM2012Console\bin\i386\CmRcViewer.exe" $computerName
	}
	
	function sendMessage
	{
		$computerName = $computerTextBox1.Text
		logAction "Message sent to $computerName"
		
		
		$title = 'Send Message'
		$msg = 'Enter the message you would like to send to ' + "$computerName"
		
		$messageText = [Microsoft.VisualBasic.Interaction]::InputBox($msg, $title)
		Invoke-WmiMethod -Path Win32_Process -Name Create -ArgumentList "msg * $messageText" -ComputerName $computerName
	}
	
	
	
	function checkUser
	{
		$computerName = $computerTextBox1.Text
		$userName = (Get-WmiObject -Class win32_process -ComputerName $computerName | Where-Object name -Match explorer).getowner().user
		
		$wshell.Popup("Last known user: $userName", 0, "$computerName User")
		
	}
	function getProcesses
	{
		$computerName = $computerTextBox1.Text
		logAction "Queried processes of $computerName"
		Get-Process -computername $computerName | Out-GridView -title "$computerName Processes"
	}
	
	function gimMeInfoNow
	{
		
		[string]$ComputerName = $env:computername
		$Computer = $ComputerName
		#Manufacturer information
		$Manufacturer = Get-WmiObject win32_computersystem | Select Manufacturer
		$Model = Get-WmiObject win32_computersystem | Select Model
		#Gets the OS info
		$GetOS = Get-WmiObject -class Win32_OperatingSystem -computername $Computer
		$OS = $GetOS.Caption
		$OSArchitecture = $GetOS.OSArchitecture
		$OSBuildNumber = $GetOS.BuildNumber
		#Monitor information
		$MonitorCount = Get-ciminstance -namespace root/wmi -classname WmiMonitorConnectionParams | Select VideoOutputTechnology
		#Gets memory information
		$Getmemoryslot = Get-WmiObject Win32_PhysicalMemoryArray -ComputerName $computer
		$Getmemory = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer
		$Getmemorymeasure = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer | Measure-Object -Property Capacity -Sum
		$MemorySlot = $Getmemoryslot.MemoryDevices
		$MaxMemory = $($Getmemoryslot.MaxCapacity/1024/1024)
		$TotalMemSticks = $Getmemorymeasure.count
		$TotalMemSize = $($Getmemorymeasure.sum/1024/1024/1024)
		#Get the disk info
		$GetDiskInfo = Get-WmiObject Win32_logicaldisk -ComputerName $computer -Filter "DeviceID='C:'"
		$DiskSize = $([math]::Round($GetDiskInfo.Size/1GB))
		$FreeSpace = $([math]::Round($GetDiskInfo.FreeSpace/1GB))
		$UsedSapce = $([math]::Round($DiskSize - $FreeSpace))
		#Gets CPU info
		$GetCPU = Get-wmiobject win32_processor -ComputerName $Computer
		$CPUName = $GetCPU.Name
		$CPUManufacturer = $GetCPU.Manufacturer
		$CPUMaxClockSpeed = $GetCPU.MaxClockSpeed
		#account status
		$LoggedOnUser = (Get-WmiObject win32_computersystem -ComputerName $Computer).Username
		$getLockedStart = If (Get-Process logonui -ComputerName $Computer -ErrorAction SilentlyContinue) { $Locked = "Yes" }
		Else { $Locked = "No" }
		#Serial Number
		$SerialNumber = (Get-WmiObject win32_bios -ComputerName $Computer).SerialNumber
		#get IP address
		$IPAddress = (Get-WmiObject win32_NetworkadapterConfiguration -ComputerName $Computer | Where-Object IPAddress -ne $null).IPAddress
		#Gets BIOS info
		$BIOSName = (Get-WmiObject win32_bios -ComputerName $Computer).Name
		$BIOSManufacturer = (Get-WmiObject win32_bios -ComputerName $Computer).Manufacturer
		$BIOSVersionN = (Get-WmiObject win32_bios -ComputerName $Computer).Version
		#Gets Motherboard info
		$MotherBoardName = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Name
		$MotherBoardManufacturet = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Manufacturer
		$MotherBoardProduct = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Product
		$MotherBoardSerial = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).SerialNumber
		$InstDate = (Get-CimInstance Win32_OperatingSystem).InstallDate
		$DesktopPath = [Environment]::GetFolderPath("Desktop")
		$MonitorC0unt = $MonitorCount -replace '@{VideoOutputTechnology=', ''
		$MonitorCount = $MonitorC0unt -replace '}', ''
		$M4nufacturer = $Manufacturer -replace '@{Manufacturer=', ''
		$Manufacturer = $M4nufacturer -replace '}', ''
		$M0del = $Model -replace '@{Model='
		$Model = $M0del -replace '}'
		$directories = Get-ChildItem -Path "C:\Users\" | Select -Property Name
		$D1rectories = $directories -replace '{@{Name=', ''
		$directories = $D1rectories -replace '}', ''
		$M0therBoardSerial = $MotherBoardSerial -replace '/$SerialNumber/', ''
		$MotherBoardSerial = $M0therBoardSerial -replace '/'
		$TmpFile = [System.IO.Path]::GetTempFileName
		$nl = [Environment]::NewLine
		
		$ComputerInfo = New-Object -TypeName psobject
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name InstallDate -Value $InstDate$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name UserNames -Value $directories$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name Manufacturer -Value $Manufacturer$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name Model -Value $Model$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $os$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name OSArchitecture -Value $OSArchitecture$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name OSBuild -Value $OSBuildNumber$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name ComputerName -Value $ComputerName$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name SerialNumber -Value $SerialNumber$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name IPAddress -Value $IPAddress$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name LoggedInUsers -Value $LoggedOnUser$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name ComputerIsLocked -Value $Locked$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MonitorCount -Value $MonitorCount$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MemorySlots -Value $MemorySlot$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MaxMemory -Value "$MaxMemory GB"$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MemorySlotsUsed -Value $TotalMemSticks$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MemoryInstalled -Value "$TotalMemSize GB"$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name SystemDrive -Value $ENV:SystemDrive$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name DiskSize -Value "$DiskSize GB"$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name FreeSpace -Value "$FreeSpace GB"$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name UsedSpace -Value "$UsedSapce GB"$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name CPU -Value $CPUName$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name CPUManufacturer -Value $CPUManufacturer$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name CPUMaxClockSpeed -Value $CPUMaxClockSpeed$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MotherBoard -Value $MotherBoardName$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MotherBoardManufacturer -Value $MotherBoardManufacturet$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MotherBoardSerialNumber -Value $MotherBoardSerial$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name MotherBoardProduct -Value $MotherBoardProduct$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name BIOSName -Value $BIOSName$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name BIOSManufacturer -Value $BIOSManufacturer$nl
		$ComputerInfo | Add-Member -MemberType NoteProperty -Name BIOSVersion -Value $BIOSVersionN$nl
		$ComputerInfo | Set-Content -Path $TmpFile
		Notepad $TmpFile
	}
	function CcmRepair1
	{
		cmd /c "C:\Windows\CCM\ccmrepair.exe"
		$richtextbox1.Text += "`nStarted CCMRepair."
	}
	function stopProcesses
	{
		$computerName = $computerTextBox1.Text
		$process = Get-Process -computername $computerName | Out-GridView -title "$computerName Processes" -PassThru
		$processID = $process.id
		$processName = $process.ProcessName
		taskkill.exe /s $computerName /pid $processID /f
		$wshell.Popup("Request sent to $computerName to terminate $processName.", 0, "Success")
		logAction "Request sent to $computerName to terminate $processName."
	}
	
	#requires -Version 3
	#------------------------------------------------------------------------
	# Source File Information (DO NOT MODIFY)
	# Source ID: 93360277-dc32-4270-85e6-276e928cd539
	# Source File: C:\Users\Newingha\Documents\SAPIEN\PowerShell Studio\Files\ConfigurationManagerActions-popupwindow.psf
	#------------------------------------------------------------------------
	
	<#
	    .NOTES
	    --------------------------------------------------------------------------------
	     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.167
	     Generated on:       9/19/2019 3:12 PM
	     Generated by:       Support.newingha
	    --------------------------------------------------------------------------------
	    .DESCRIPTION
	        GUI script generated by PowerShell Studio 2019
	#>
	
	
	#----------------------------------------------
	#region Application Functions
	#----------------------------------------------
	
	#endregion Application Functions
	
	#----------------------------------------------
	# Generated Form Function
	#----------------------------------------------
	function Show-ConfigurationManagerActions-popupwindow_psf
	{
		
		#----------------------------------------------
		#region Import the Assemblies
		#----------------------------------------------
		[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
		[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
		#endregion Import Assemblies
		
		#----------------------------------------------
		#region Generated Form Objects
		#----------------------------------------------
		[System.Windows.Forms.Application]::EnableVisualStyles()
		$formConfigurationManager = New-Object 'System.Windows.Forms.Form'
		$buttonExternalEventDetecti = New-Object 'System.Windows.Forms.Button'
		$labelClickOnTheActionYouW = New-Object 'System.Windows.Forms.Label'
		$buttonEndpointAMPolicyReev = New-Object 'System.Windows.Forms.Button'
		$buttonEndpointDeploymentRe = New-Object 'System.Windows.Forms.Button'
		$buttonSendUnsentStateMessa = New-Object 'System.Windows.Forms.Button'
		$buttonDCMPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonSUMUpdatesInstallSch = New-Object 'System.Windows.Forms.Button'
		$buttonPendingPackageCheckS = New-Object 'System.Windows.Forms.Button'
		$buttonPolicyAgentRequestAs = New-Object 'System.Windows.Forms.Button'
		$buttonLSTimeoutRefresh = New-Object 'System.Windows.Forms.Button'
		$buttonPowerManagementStart = New-Object 'System.Windows.Forms.Button'
		$buttonAppManagerGlobalEval = New-Object 'System.Windows.Forms.Button'
		$buttonAppManagerUserPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonApplicationManagerPo = New-Object 'System.Windows.Forms.Button'
		$buttonAMTStatusCheckPolicy = New-Object 'System.Windows.Forms.Button'
		$button26 = New-Object 'System.Windows.Forms.Button'
		$buttonStateSystemPolicyBul = New-Object 'System.Windows.Forms.Button'
		$buttonUpdateStorePolicy = New-Object 'System.Windows.Forms.Button'
		$buttonScanByUpdateSource = New-Object 'System.Windows.Forms.Button'
		$buttonStateSystemPolicyCle = New-Object 'System.Windows.Forms.Button'
		$buttonBranchDistributionPo = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareUpdatesAssig = New-Object 'System.Windows.Forms.Button'
		$buttonWindowsInstallerSour = New-Object 'System.Windows.Forms.Button'
		$button14 = New-Object 'System.Windows.Forms.Button'
		$buttonIDMIFCollectionCycle = New-Object 'System.Windows.Forms.Button'
		$buttonFileCollectionCycle = New-Object 'System.Windows.Forms.Button'
		$buttonDiscoveryDataCollect = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareInventoryCol = New-Object 'System.Windows.Forms.Button'
		$buttonHardwareInventoryCol = New-Object 'System.Windows.Forms.Button'
		$buttonNAPAction = New-Object 'System.Windows.Forms.Button'
		$buttonPeerDPStatusReportin = New-Object 'System.Windows.Forms.Button'
		$buttonRetryRefreshingCerti = New-Object 'System.Windows.Forms.Button'
		$buttonValidateUserPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonValidateMachinePolic = New-Object 'System.Windows.Forms.Button'
		$buttonUserPolicyAgentClean = New-Object 'System.Windows.Forms.Button'
		$buttonMachinePolicyAgentCl = New-Object 'System.Windows.Forms.Button'
		$buttonClearProxySettingsCa = New-Object 'System.Windows.Forms.Button'
		$buttonSourceUpdateMessage = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareMeteringUsag = New-Object 'System.Windows.Forms.Button'
		$buttonPolicyAgentEvaluateA = New-Object 'System.Windows.Forms.Button'
		$buttonLSRefreshLocations = New-Object 'System.Windows.Forms.Button'
		$buttonRefreshDefaultMPTask = New-Object 'System.Windows.Forms.Button'
		$buttonEvaluateMachinePolic = New-Object 'System.Windows.Forms.Button'
		$buttonMachineAssignments = New-Object 'System.Windows.Forms.Button'
		$buttonClientMachineAuthent = New-Object 'System.Windows.Forms.Button'
		$buttonIDMIFCollection = New-Object 'System.Windows.Forms.Button'
		$buttonFileCollection = New-Object 'System.Windows.Forms.Button'
		$buttonDiscoveryInventory = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareInventory = New-Object 'System.Windows.Forms.Button'
		$buttonHardwareInventory = New-Object 'System.Windows.Forms.Button'
		$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
		#endregion Generated Form Objects
		
		#----------------------------------------------
		# User Generated Script
		#----------------------------------------------
		
		#The function Parade
		function HardwareInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000001}" /NOINTERACTIVE
		}
		function SoftwareInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000002}" /NOINTERACTIVE
		}
		function DiscoveryInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000003}" /NOINTERACTIVE
		}
		function FileCollection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000010}" /NOINTERACTIVE
		}
		function IDMIFCollection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000011}" /NOINTERACTIVE
		}
		function ClientMachineAuthentication
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000012}" /NOINTERACTIVE
		}
		function RequestMachineAssignments
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000021}" /NOINTERACTIVE
		}
		function EvaluateMachinePolicies
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000022}" /NOINTERACTIVE
		}
		function RefreshDefaultMPTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000023}" /NOINTERACTIVE
		}
		function LSRefreshLocationsTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000024}" /NOINTERACTIVE
		}
		function LSTimeoutRefreshTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000025}" /NOINTERACTIVE
		}
		function PolicyAgentRequestAssignment-U
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000026}" /NOINTERACTIVE
		}
		function PolicyAgentEvaluateAssignment-U
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000027}" /NOINTERACTIVE
		}
		function SoftwareMeteringGeneratingUsageReport
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000031}" /NOINTERACTIVE
		}
		function SourceUpdateMessage
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000032}" /NOINTERACTIVE
		}
		function ClearProxySettingsCache
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000037}" /NOINTERACTIVE
		}
		function MachinePolicyAgentCleanup
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000040}" /NOINTERACTIVE
		}
		function UserPolicyAgentCleanup
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000041}" /NOINTERACTIVE
		}
		function PolicyAgentValidateMachinePolicy-Assignment
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000042}" /NOINTERACTIVE
		}
		function PolicyAgentValidateUserPolicy-Assignment
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000043}" /NOINTERACTIVE
		}
		function Retrying-RefreshingcertificatesADMP
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000051}" /NOINTERACTIVE
		}
		function PeerDPStatusReporting
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000061}" /NOINTERACTIVE
		}
		function PeerDPPendingPackageCheckSchedule
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000062}" /NOINTERACTIVE
		}
		function SUMUpdatesInstallSchedule
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000063}" /NOINTERACTIVE
		}
		function NAPAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000071}" /NOINTERACTIVE
		}
		function HardwareInventoryCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000101}" /NOINTERACTIVE
		}
		function SoftwareInventoryCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000102}" /NOINTERACTIVE
		}
		function DiscoveryDataCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000103}" /NOINTERACTIVE
		}
		function FileCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000104}" /NOINTERACTIVE
		}
		function IDMIFCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000105}" /NOINTERACTIVE
		}
		function SoftwareMeteringUsageReportCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000106}" /NOINTERACTIVE
		}
		function WindowsInstallerSourceListUpdateCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000107}" /NOINTERACTIVE
		}
		function SoftwareUpdatesAssignmentsEvaluationCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000108}" /NOINTERACTIVE
		}
		function BranchDistributionPointMaintenanceTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000109}" /NOINTERACTIVE
		}
		function DCMPolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000110}" /NOINTERACTIVE
		}
		function SendUnsentStateMessage
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000111}" /NOINTERACTIVE
		}
		function StateSystemPolicyCacheCleanout
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000112}" /NOINTERACTIVE
		}
		function ScanByUpdateSource
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000113}" /NOINTERACTIVE
		}
		function UpdateStorePolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000114}" /NOINTERACTIVE
		}
		function StateSystemPolicyBulkSendHigh
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000115}" /NOINTERACTIVE
		}
		function StateSystemPolicyBulkSendLow
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000116}" /NOINTERACTIVE
		}
		function AMTStatusCheckPolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000120}" /NOINTERACTIVE
		}
		function ApplicationManagerPolicyAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000121}" /NOINTERACTIVE
		}
		function ApplicationManagerUserPolicyAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000122}" /NOINTERACTIVE
		}
		function ApplicationManagerGlobalEvaluationAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000123}" /NOINTERACTIVE
		}
		function PowerManagementStartSummarizer
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000131}" /NOINTERACTIVE
		}
		function EndpointDeploymentReevaluate
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000221}" /NOINTERACTIVE
		}
		function EndpointAMPolicyReevaluate
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000222}" /NOINTERACTIVE
		}
		function ExternalEventDetection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000223}" /NOINTERACTIVE
		}
		
		
		
		
		$formConfigurationManager_Load = {
			#TODO: Initialize Form Controls here
			
		}
		
		$buttonSoftwareMeteringUsag_Click = {
			SoftwareMeteringUsageReportCycle
		}
		
		$buttonValidateMachinePolic_Click = {
			PolicyAgentValidateMachinePolicy-Assignment
		}
		
		$buttonHardwareInventory_Click = {
			HardwareInventory
		}
		
		$buttonSoftwareInventory_Click = {
			SoftwareInventory
		}
		
		$buttonDiscoveryInventory_Click = {
			DiscoveryInventory
		}
		
		$buttonFileCollection_Click = {
			FileCollection
		}
		
		$buttonIDMIFCollection_Click = {
			IDMIFCollection
		}
		
		$buttonClientMachineAuthent_Click = {
			ClientMachineAuthentication
		}
		
		$buttonMachineAssignments_Click = {
			RequestMachineAssignments
		}
		
		$buttonEvaluateMachinePolic_Click = {
			EvaluateMachinePolicies
		}
		
		$buttonRefreshDefaultMPTask_Click = {
			RefreshDefaultMPTask
		}
		
		$buttonLSRefreshLocations_Click = {
			LSRefreshLocationsTask
		}
		
		$buttonLSTimeoutRefresh_Click = {
			LSTimeoutRefreshTask
		}
		
		$buttonPolicyAgentRequestAs_Click = {
			PolicyAgentRequestAssignment-U
		}
		
		$buttonPolicyAgentEvaluateA_Click = {
			PolicyAgentEvaluateAssignment-U
		}
		
		$buttonSourceUpdateMessage_Click = {
			SourceUpdateMessage
		}
		
		$buttonClearProxySettingsCa_Click = {
			ClearProxySettingsCache
		}
		
		$buttonUserPolicyAgentClean_Click = {
			MachinePolicyAgentCleanup
		}
		
		$buttonValidateUserPolicy_Click = {
			PolicyAgentValidateUserPolicy-Assignment
		}
		
		$buttonRetryRefreshingCerti_Click = {
			Retrying-RefreshingcertificatesADMP
		}
		
		$buttonPeerDPStatusReportin_Click = {
			PeerDPStatusReporting
		}
		
		$buttonPendingPackageCheckS_Click = {
			PeerDPPendingPackageCheckSchedule
		}
		
		$buttonSUMUpdatesInstallSch_Click = {
			SUMUpdatesInstallSchedule
		}
		
		$buttonNAPAction_Click = {
			NAPAction
		}
		
		$buttonHardwareInventoryCol_Click = {
			HardwareInventoryCollectionCycle
		}
		
		$buttonSoftwareInventoryCol_Click = {
			SoftwareInventoryCollectionCycle
		}
		
		$buttonDiscoveryDataCollect_Click = {
			DiscoveryDataCollectionCycle
		}
		
		$buttonFileCollectionCycle_Click = {
			FileCollectionCycle
		}
		
		$buttonIDMIFCollectionCycle_Click = {
			IDMIFCollectionCycle
		}
		
		$button14_Click = {
			SoftwareMeteringUsageReportCycle
		}
		
		$buttonWindowsInstallerSour_Click = {
			WindowsInstallerSourceListUpdateCycle
		}
		
		$buttonSoftwareUpdatesAssig_Click = {
			SoftwareUpdatesAssignmentsEvaluationCycle
		}
		
		$buttonMachinePolicyAgentCl_Click = {
			MachinePolicyAgentCleanup
		}
		
		$buttonBranchDistributionPo_Click = {
			BranchDistributionPointMaintenanceTask
		}
		
		$buttonDCMPolicy_Click = {
			DCMPolicy
		}
		
		$buttonSendUnsentStateMessa_Click = {
			SendUnsentStateMessage
		}
		
		$buttonStateSystemPolicyCle_Click = {
			StateSystemPolicyCacheCleanout
		}
		
		$buttonScanByUpdateSource_Click = {
			ScanByUpdateSource
		}
		
		$buttonUpdateStorePolicy_Click = {
			UpdateStorePolicy
		}
		
		$buttonStateSystemPolicyBul_Click = {
			StateSystemPolicyBulkSendHigh
		}
		
		$button26_Click = {
			StateSystemPolicyBulkSendLow
		}
		
		$buttonAMTStatusCheckPolicy_Click = {
			AMTStatusCheckPolicy
		}
		
		$buttonApplicationManagerPo_Click = {
			ApplicationManagerPolicyAction
		}
		
		$buttonAppManagerUserPolicy_Click = {
			ApplicationManagerUserPolicyAction
		}
		
		$buttonAppManagerGlobalEval_Click = {
			ApplicationManagerGlobalEvaluationAction
		}
		
		$buttonPowerManagementStart_Click = {
			PowerManagementStartSummarizer
		}
		
		$buttonEndpointDeploymentRe_Click = {
			EndpointDeploymentReevaluate
		}
		
		$buttonEndpointAMPolicyReev_Click = {
			EndpointAMPolicyReevaluate
		}
		
		$buttonExternalEventDetecti_Click = {
			ExternalEventDetection
		}
		
		# --End User Generated Script--
		#----------------------------------------------
		#region Generated Events
		#----------------------------------------------
		
		$Form_StateCorrection_Load =
		{
			#Correct the initial state of the form to prevent the .Net maximized form issue
			$formConfigurationManager.WindowState = $InitialFormWindowState
		}
		
		$Form_Cleanup_FormClosed =
		{
			#Remove all event handlers from the controls
			try
			{
				$buttonExternalEventDetecti.remove_Click($buttonExternalEventDetecti_Click)
				$buttonEndpointAMPolicyReev.remove_Click($buttonEndpointAMPolicyReev_Click)
				$buttonEndpointDeploymentRe.remove_Click($buttonEndpointDeploymentRe_Click)
				$buttonSendUnsentStateMessa.remove_Click($buttonSendUnsentStateMessa_Click)
				$buttonDCMPolicy.remove_Click($buttonDCMPolicy_Click)
				$buttonSUMUpdatesInstallSch.remove_Click($buttonSUMUpdatesInstallSch_Click)
				$buttonPendingPackageCheckS.remove_Click($buttonPendingPackageCheckS_Click)
				$buttonPolicyAgentRequestAs.remove_Click($buttonPolicyAgentRequestAs_Click)
				$buttonLSTimeoutRefresh.remove_Click($buttonLSTimeoutRefresh_Click)
				$buttonPowerManagementStart.remove_Click($buttonPowerManagementStart_Click)
				$buttonAppManagerGlobalEval.remove_Click($buttonAppManagerGlobalEval_Click)
				$buttonAppManagerUserPolicy.remove_Click($buttonAppManagerUserPolicy_Click)
				$buttonApplicationManagerPo.remove_Click($buttonApplicationManagerPo_Click)
				$buttonAMTStatusCheckPolicy.remove_Click($buttonAMTStatusCheckPolicy_Click)
				$button26.remove_Click($button26_Click)
				$buttonStateSystemPolicyBul.remove_Click($buttonStateSystemPolicyBul_Click)
				$buttonUpdateStorePolicy.remove_Click($buttonUpdateStorePolicy_Click)
				$buttonScanByUpdateSource.remove_Click($buttonScanByUpdateSource_Click)
				$buttonStateSystemPolicyCle.remove_Click($buttonStateSystemPolicyCle_Click)
				$buttonBranchDistributionPo.remove_Click($buttonBranchDistributionPo_Click)
				$buttonSoftwareUpdatesAssig.remove_Click($buttonSoftwareUpdatesAssig_Click)
				$buttonWindowsInstallerSour.remove_Click($buttonWindowsInstallerSour_Click)
				$button14.remove_Click($button14_Click)
				$buttonIDMIFCollectionCycle.remove_Click($buttonIDMIFCollectionCycle_Click)
				$buttonFileCollectionCycle.remove_Click($buttonFileCollectionCycle_Click)
				$buttonDiscoveryDataCollect.remove_Click($buttonDiscoveryDataCollect_Click)
				$buttonSoftwareInventoryCol.remove_Click($buttonSoftwareInventoryCol_Click)
				$buttonHardwareInventoryCol.remove_Click($buttonHardwareInventoryCol_Click)
				$buttonNAPAction.remove_Click($buttonNAPAction_Click)
				$buttonPeerDPStatusReportin.remove_Click($buttonPeerDPStatusReportin_Click)
				$buttonRetryRefreshingCerti.remove_Click($buttonRetryRefreshingCerti_Click)
				$buttonValidateUserPolicy.remove_Click($buttonValidateUserPolicy_Click)
				$buttonValidateMachinePolic.remove_Click($buttonValidateMachinePolic_Click)
				$buttonUserPolicyAgentClean.remove_Click($buttonUserPolicyAgentClean_Click)
				$buttonMachinePolicyAgentCl.remove_Click($buttonMachinePolicyAgentCl_Click)
				$buttonClearProxySettingsCa.remove_Click($buttonClearProxySettingsCa_Click)
				$buttonSourceUpdateMessage.remove_Click($buttonSourceUpdateMessage_Click)
				$buttonSoftwareMeteringUsag.remove_Click($buttonSoftwareMeteringUsag_Click)
				$buttonPolicyAgentEvaluateA.remove_Click($buttonPolicyAgentEvaluateA_Click)
				$buttonLSRefreshLocations.remove_Click($buttonLSRefreshLocations_Click)
				$buttonRefreshDefaultMPTask.remove_Click($buttonRefreshDefaultMPTask_Click)
				$buttonEvaluateMachinePolic.remove_Click($buttonEvaluateMachinePolic_Click)
				$buttonMachineAssignments.remove_Click($buttonMachineAssignments_Click)
				$buttonClientMachineAuthent.remove_Click($buttonClientMachineAuthent_Click)
				$buttonIDMIFCollection.remove_Click($buttonIDMIFCollection_Click)
				$buttonFileCollection.remove_Click($buttonFileCollection_Click)
				$buttonDiscoveryInventory.remove_Click($buttonDiscoveryInventory_Click)
				$buttonSoftwareInventory.remove_Click($buttonSoftwareInventory_Click)
				$buttonHardwareInventory.remove_Click($buttonHardwareInventory_Click)
				$formConfigurationManager.remove_Load($formConfigurationManager_Load)
				$formConfigurationManager.remove_Load($Form_StateCorrection_Load)
				$formConfigurationManager.remove_FormClosed($Form_Cleanup_FormClosed)
			}
			catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		}
		#endregion Generated Events
		
		#----------------------------------------------
		#region Generated Form Code
		#----------------------------------------------
		$formConfigurationManager.SuspendLayout()
		#
		# formConfigurationManager
		#
		$formConfigurationManager.Controls.Add($buttonExternalEventDetecti)
		$formConfigurationManager.Controls.Add($labelClickOnTheActionYouW)
		$formConfigurationManager.Controls.Add($buttonEndpointAMPolicyReev)
		$formConfigurationManager.Controls.Add($buttonEndpointDeploymentRe)
		$formConfigurationManager.Controls.Add($buttonSendUnsentStateMessa)
		$formConfigurationManager.Controls.Add($buttonDCMPolicy)
		$formConfigurationManager.Controls.Add($buttonSUMUpdatesInstallSch)
		$formConfigurationManager.Controls.Add($buttonPendingPackageCheckS)
		$formConfigurationManager.Controls.Add($buttonPolicyAgentRequestAs)
		$formConfigurationManager.Controls.Add($buttonLSTimeoutRefresh)
		$formConfigurationManager.Controls.Add($buttonPowerManagementStart)
		$formConfigurationManager.Controls.Add($buttonAppManagerGlobalEval)
		$formConfigurationManager.Controls.Add($buttonAppManagerUserPolicy)
		$formConfigurationManager.Controls.Add($buttonApplicationManagerPo)
		$formConfigurationManager.Controls.Add($buttonAMTStatusCheckPolicy)
		$formConfigurationManager.Controls.Add($button26)
		$formConfigurationManager.Controls.Add($buttonStateSystemPolicyBul)
		$formConfigurationManager.Controls.Add($buttonUpdateStorePolicy)
		$formConfigurationManager.Controls.Add($buttonScanByUpdateSource)
		$formConfigurationManager.Controls.Add($buttonStateSystemPolicyCle)
		$formConfigurationManager.Controls.Add($buttonBranchDistributionPo)
		$formConfigurationManager.Controls.Add($buttonSoftwareUpdatesAssig)
		$formConfigurationManager.Controls.Add($buttonWindowsInstallerSour)
		$formConfigurationManager.Controls.Add($button14)
		$formConfigurationManager.Controls.Add($buttonIDMIFCollectionCycle)
		$formConfigurationManager.Controls.Add($buttonFileCollectionCycle)
		$formConfigurationManager.Controls.Add($buttonDiscoveryDataCollect)
		$formConfigurationManager.Controls.Add($buttonSoftwareInventoryCol)
		$formConfigurationManager.Controls.Add($buttonHardwareInventoryCol)
		$formConfigurationManager.Controls.Add($buttonNAPAction)
		$formConfigurationManager.Controls.Add($buttonPeerDPStatusReportin)
		$formConfigurationManager.Controls.Add($buttonRetryRefreshingCerti)
		$formConfigurationManager.Controls.Add($buttonValidateUserPolicy)
		$formConfigurationManager.Controls.Add($buttonValidateMachinePolic)
		$formConfigurationManager.Controls.Add($buttonUserPolicyAgentClean)
		$formConfigurationManager.Controls.Add($buttonMachinePolicyAgentCl)
		$formConfigurationManager.Controls.Add($buttonClearProxySettingsCa)
		$formConfigurationManager.Controls.Add($buttonSourceUpdateMessage)
		$formConfigurationManager.Controls.Add($buttonSoftwareMeteringUsag)
		$formConfigurationManager.Controls.Add($buttonPolicyAgentEvaluateA)
		$formConfigurationManager.Controls.Add($buttonLSRefreshLocations)
		$formConfigurationManager.Controls.Add($buttonRefreshDefaultMPTask)
		$formConfigurationManager.Controls.Add($buttonEvaluateMachinePolic)
		$formConfigurationManager.Controls.Add($buttonMachineAssignments)
		$formConfigurationManager.Controls.Add($buttonClientMachineAuthent)
		$formConfigurationManager.Controls.Add($buttonIDMIFCollection)
		$formConfigurationManager.Controls.Add($buttonFileCollection)
		$formConfigurationManager.Controls.Add($buttonDiscoveryInventory)
		$formConfigurationManager.Controls.Add($buttonSoftwareInventory)
		$formConfigurationManager.Controls.Add($buttonHardwareInventory)
		$formConfigurationManager.AutoScaleDimensions = '6, 13'
		$formConfigurationManager.AutoScaleMode = 'Font'
		$formConfigurationManager.ClientSize = '630, 501'
		$formConfigurationManager.Name = 'formConfigurationManager'
		$formConfigurationManager.Text = 'Configuration Manager Actions'
		$formConfigurationManager.add_Load($formConfigurationManager_Load)
		#
		# buttonExternalEventDetecti
		#
		$buttonExternalEventDetecti.Location = '403, 410'
		$buttonExternalEventDetecti.Name = 'buttonExternalEventDetecti'
		$buttonExternalEventDetecti.Size = '214, 23'
		$buttonExternalEventDetecti.TabIndex = 51
		$buttonExternalEventDetecti.Text = 'External Event Detection'
		$buttonExternalEventDetecti.UseCompatibleTextRendering = $True
		$buttonExternalEventDetecti.UseVisualStyleBackColor = $True
		$buttonExternalEventDetecti.add_Click($buttonExternalEventDetecti_Click)
		#
		# labelClickOnTheActionYouW
		#
		$labelClickOnTheActionYouW.AutoSize = $True
		$labelClickOnTheActionYouW.Location = '106, 480'
		$labelClickOnTheActionYouW.Name = 'labelClickOnTheActionYouW'
		$labelClickOnTheActionYouW.Size = '418, 17'
		$labelClickOnTheActionYouW.TabIndex = 50
		$labelClickOnTheActionYouW.Text = 'Click on the action you would like to preform. All actions are done silently for now.  '
		$labelClickOnTheActionYouW.UseCompatibleTextRendering = $True
		#
		# buttonEndpointAMPolicyReev
		#
		$buttonEndpointAMPolicyReev.Location = '404, 385'
		$buttonEndpointAMPolicyReev.Name = 'buttonEndpointAMPolicyReev'
		$buttonEndpointAMPolicyReev.Size = '214, 23'
		$buttonEndpointAMPolicyReev.TabIndex = 47
		$buttonEndpointAMPolicyReev.Text = 'Endpoint AM Policy Reevaluate'
		$buttonEndpointAMPolicyReev.UseCompatibleTextRendering = $True
		$buttonEndpointAMPolicyReev.UseVisualStyleBackColor = $True
		$buttonEndpointAMPolicyReev.add_Click($buttonEndpointAMPolicyReev_Click)
		#
		# buttonEndpointDeploymentRe
		#
		$buttonEndpointDeploymentRe.Location = '404, 360'
		$buttonEndpointDeploymentRe.Name = 'buttonEndpointDeploymentRe'
		$buttonEndpointDeploymentRe.Size = '214, 23'
		$buttonEndpointDeploymentRe.TabIndex = 46
		$buttonEndpointDeploymentRe.Text = 'Endpoint Deployment Reevaluate'
		$buttonEndpointDeploymentRe.UseCompatibleTextRendering = $True
		$buttonEndpointDeploymentRe.UseVisualStyleBackColor = $True
		$buttonEndpointDeploymentRe.add_Click($buttonEndpointDeploymentRe_Click)
		#
		# buttonSendUnsentStateMessa
		#
		$buttonSendUnsentStateMessa.Location = '403, 85'
		$buttonSendUnsentStateMessa.Name = 'buttonSendUnsentStateMessa'
		$buttonSendUnsentStateMessa.Size = '215, 23'
		$buttonSendUnsentStateMessa.TabIndex = 45
		$buttonSendUnsentStateMessa.Text = 'Send Unsent State Message'
		$buttonSendUnsentStateMessa.UseCompatibleTextRendering = $True
		$buttonSendUnsentStateMessa.UseVisualStyleBackColor = $True
		$buttonSendUnsentStateMessa.add_Click($buttonSendUnsentStateMessa_Click)
		#
		# buttonDCMPolicy
		#
		$buttonDCMPolicy.Location = '404, 60'
		$buttonDCMPolicy.Name = 'buttonDCMPolicy'
		$buttonDCMPolicy.Size = '213, 23'
		$buttonDCMPolicy.TabIndex = 44
		$buttonDCMPolicy.Text = 'DCM Policy'
		$buttonDCMPolicy.UseCompatibleTextRendering = $True
		$buttonDCMPolicy.UseVisualStyleBackColor = $True
		$buttonDCMPolicy.add_Click($buttonDCMPolicy_Click)
		#
		# buttonSUMUpdatesInstallSch
		#
		$buttonSUMUpdatesInstallSch.Location = '204, 185'
		$buttonSUMUpdatesInstallSch.Name = 'buttonSUMUpdatesInstallSch'
		$buttonSUMUpdatesInstallSch.Size = '193, 23'
		$buttonSUMUpdatesInstallSch.TabIndex = 43
		$buttonSUMUpdatesInstallSch.Text = 'SUM Updates Install Schedule'
		$buttonSUMUpdatesInstallSch.UseCompatibleTextRendering = $True
		$buttonSUMUpdatesInstallSch.UseVisualStyleBackColor = $True
		$buttonSUMUpdatesInstallSch.add_Click($buttonSUMUpdatesInstallSch_Click)
		#
		# buttonPendingPackageCheckS
		#
		$buttonPendingPackageCheckS.Location = '204, 160'
		$buttonPendingPackageCheckS.Name = 'buttonPendingPackageCheckS'
		$buttonPendingPackageCheckS.Size = '193, 23'
		$buttonPendingPackageCheckS.TabIndex = 42
		$buttonPendingPackageCheckS.Text = 'Pending Package Check Schedule'
		$buttonPendingPackageCheckS.UseCompatibleTextRendering = $True
		$buttonPendingPackageCheckS.UseVisualStyleBackColor = $True
		$buttonPendingPackageCheckS.add_Click($buttonPendingPackageCheckS_Click)
		#
		# buttonPolicyAgentRequestAs
		#
		$buttonPolicyAgentRequestAs.Location = '13, 310'
		$buttonPolicyAgentRequestAs.Name = 'buttonPolicyAgentRequestAs'
		$buttonPolicyAgentRequestAs.Size = '185, 23'
		$buttonPolicyAgentRequestAs.TabIndex = 41
		$buttonPolicyAgentRequestAs.Text = 'Policy Agent Request Assignment'
		$buttonPolicyAgentRequestAs.UseCompatibleTextRendering = $True
		$buttonPolicyAgentRequestAs.UseVisualStyleBackColor = $True
		$buttonPolicyAgentRequestAs.add_Click($buttonPolicyAgentRequestAs_Click)
		#
		# buttonLSTimeoutRefresh
		#
		$buttonLSTimeoutRefresh.Location = '13, 285'
		$buttonLSTimeoutRefresh.Name = 'buttonLSTimeoutRefresh'
		$buttonLSTimeoutRefresh.Size = '185, 23'
		$buttonLSTimeoutRefresh.TabIndex = 40
		$buttonLSTimeoutRefresh.Text = 'LS Timeout Refresh'
		$buttonLSTimeoutRefresh.UseCompatibleTextRendering = $True
		$buttonLSTimeoutRefresh.UseVisualStyleBackColor = $True
		$buttonLSTimeoutRefresh.add_Click($buttonLSTimeoutRefresh_Click)
		#
		# buttonPowerManagementStart
		#
		$buttonPowerManagementStart.Location = '404, 335'
		$buttonPowerManagementStart.Name = 'buttonPowerManagementStart'
		$buttonPowerManagementStart.Size = '214, 23'
		$buttonPowerManagementStart.TabIndex = 39
		$buttonPowerManagementStart.Text = 'PowerManagement Start Summarizer'
		$buttonPowerManagementStart.UseCompatibleTextRendering = $True
		$buttonPowerManagementStart.UseVisualStyleBackColor = $True
		$buttonPowerManagementStart.add_Click($buttonPowerManagementStart_Click)
		#
		# buttonAppManagerGlobalEval
		#
		$buttonAppManagerGlobalEval.Location = '404, 310'
		$buttonAppManagerGlobalEval.Name = 'buttonAppManagerGlobalEval'
		$buttonAppManagerGlobalEval.Size = '213, 23'
		$buttonAppManagerGlobalEval.TabIndex = 38
		$buttonAppManagerGlobalEval.Text = 'App Manager Global Evaluation Action'
		$buttonAppManagerGlobalEval.UseCompatibleTextRendering = $True
		$buttonAppManagerGlobalEval.UseVisualStyleBackColor = $True
		$buttonAppManagerGlobalEval.add_Click($buttonAppManagerGlobalEval_Click)
		#
		# buttonAppManagerUserPolicy
		#
		$buttonAppManagerUserPolicy.Location = '404, 285'
		$buttonAppManagerUserPolicy.Name = 'buttonAppManagerUserPolicy'
		$buttonAppManagerUserPolicy.Size = '213, 23'
		$buttonAppManagerUserPolicy.TabIndex = 37
		$buttonAppManagerUserPolicy.Text = 'App Manager User Policy Action'
		$buttonAppManagerUserPolicy.UseCompatibleTextRendering = $True
		$buttonAppManagerUserPolicy.UseVisualStyleBackColor = $True
		$buttonAppManagerUserPolicy.add_Click($buttonAppManagerUserPolicy_Click)
		#
		# buttonApplicationManagerPo
		#
		$buttonApplicationManagerPo.Location = '404, 260'
		$buttonApplicationManagerPo.Name = 'buttonApplicationManagerPo'
		$buttonApplicationManagerPo.Size = '213, 23'
		$buttonApplicationManagerPo.TabIndex = 36
		$buttonApplicationManagerPo.Text = 'Application Manager Policy Action'
		$buttonApplicationManagerPo.UseCompatibleTextRendering = $True
		$buttonApplicationManagerPo.UseVisualStyleBackColor = $True
		$buttonApplicationManagerPo.add_Click($buttonApplicationManagerPo_Click)
		#
		# buttonAMTStatusCheckPolicy
		#
		$buttonAMTStatusCheckPolicy.Location = '404, 235'
		$buttonAMTStatusCheckPolicy.Name = 'buttonAMTStatusCheckPolicy'
		$buttonAMTStatusCheckPolicy.Size = '213, 23'
		$buttonAMTStatusCheckPolicy.TabIndex = 35
		$buttonAMTStatusCheckPolicy.Text = 'AMT Status Check Policy'
		$buttonAMTStatusCheckPolicy.UseCompatibleTextRendering = $True
		$buttonAMTStatusCheckPolicy.UseVisualStyleBackColor = $True
		$buttonAMTStatusCheckPolicy.add_Click($buttonAMTStatusCheckPolicy_Click)
		#
		# button26
		#
		$button26.Location = '404, 210'
		$button26.Name = 'button26'
		$button26.Size = '213, 23'
		$button26.TabIndex = 34
		$button26.Text = 'State System Policy Bulk Send Low'
		$button26.UseCompatibleTextRendering = $True
		$button26.UseVisualStyleBackColor = $True
		$button26.add_Click($button26_Click)
		#
		# buttonStateSystemPolicyBul
		#
		$buttonStateSystemPolicyBul.Location = '404, 185'
		$buttonStateSystemPolicyBul.Name = 'buttonStateSystemPolicyBul'
		$buttonStateSystemPolicyBul.Size = '213, 23'
		$buttonStateSystemPolicyBul.TabIndex = 33
		$buttonStateSystemPolicyBul.Text = 'State System Policy Bulk Send High'
		$buttonStateSystemPolicyBul.UseCompatibleTextRendering = $True
		$buttonStateSystemPolicyBul.UseVisualStyleBackColor = $True
		$buttonStateSystemPolicyBul.add_Click($buttonStateSystemPolicyBul_Click)
		#
		# buttonUpdateStorePolicy
		#
		$buttonUpdateStorePolicy.Location = '404, 160'
		$buttonUpdateStorePolicy.Name = 'buttonUpdateStorePolicy'
		$buttonUpdateStorePolicy.Size = '213, 23'
		$buttonUpdateStorePolicy.TabIndex = 32
		$buttonUpdateStorePolicy.Text = 'Update Store Policy'
		$buttonUpdateStorePolicy.UseCompatibleTextRendering = $True
		$buttonUpdateStorePolicy.UseVisualStyleBackColor = $True
		$buttonUpdateStorePolicy.add_Click($buttonUpdateStorePolicy_Click)
		#
		# buttonScanByUpdateSource
		#
		$buttonScanByUpdateSource.Location = '404, 135'
		$buttonScanByUpdateSource.Name = 'buttonScanByUpdateSource'
		$buttonScanByUpdateSource.Size = '213, 23'
		$buttonScanByUpdateSource.TabIndex = 31
		$buttonScanByUpdateSource.Text = 'Scan By Update Source'
		$buttonScanByUpdateSource.UseCompatibleTextRendering = $True
		$buttonScanByUpdateSource.UseVisualStyleBackColor = $True
		$buttonScanByUpdateSource.add_Click($buttonScanByUpdateSource_Click)
		#
		# buttonStateSystemPolicyCle
		#
		$buttonStateSystemPolicyCle.Location = '403, 110'
		$buttonStateSystemPolicyCle.Name = 'buttonStateSystemPolicyCle'
		$buttonStateSystemPolicyCle.Size = '214, 23'
		$buttonStateSystemPolicyCle.TabIndex = 30
		$buttonStateSystemPolicyCle.Text = 'State System Policy Cleanout'
		$buttonStateSystemPolicyCle.UseCompatibleTextRendering = $True
		$buttonStateSystemPolicyCle.UseVisualStyleBackColor = $True
		$buttonStateSystemPolicyCle.add_Click($buttonStateSystemPolicyCle_Click)
		#
		# buttonBranchDistributionPo
		#
		$buttonBranchDistributionPo.Location = '403, 35'
		$buttonBranchDistributionPo.Name = 'buttonBranchDistributionPo'
		$buttonBranchDistributionPo.Size = '214, 23'
		$buttonBranchDistributionPo.TabIndex = 29
		$buttonBranchDistributionPo.Text = 'Branch Distribution Point Maint'
		$buttonBranchDistributionPo.UseCompatibleTextRendering = $True
		$buttonBranchDistributionPo.UseVisualStyleBackColor = $True
		$buttonBranchDistributionPo.add_Click($buttonBranchDistributionPo_Click)
		#
		# buttonSoftwareUpdatesAssig
		#
		$buttonSoftwareUpdatesAssig.Location = '204, 410'
		$buttonSoftwareUpdatesAssig.Name = 'buttonSoftwareUpdatesAssig'
		$buttonSoftwareUpdatesAssig.Size = '193, 23'
		$buttonSoftwareUpdatesAssig.TabIndex = 28
		$buttonSoftwareUpdatesAssig.Text = 'Software Updates Assignments'
		$buttonSoftwareUpdatesAssig.UseCompatibleTextRendering = $True
		$buttonSoftwareUpdatesAssig.UseVisualStyleBackColor = $True
		$buttonSoftwareUpdatesAssig.add_Click($buttonSoftwareUpdatesAssig_Click)
		#
		# buttonWindowsInstallerSour
		#
		$buttonWindowsInstallerSour.Location = '204, 385'
		$buttonWindowsInstallerSour.Name = 'buttonWindowsInstallerSour'
		$buttonWindowsInstallerSour.Size = '193, 23'
		$buttonWindowsInstallerSour.TabIndex = 27
		$buttonWindowsInstallerSour.Text = 'Windows Installer Source List'
		$buttonWindowsInstallerSour.UseCompatibleTextRendering = $True
		$buttonWindowsInstallerSour.UseVisualStyleBackColor = $True
		$buttonWindowsInstallerSour.add_Click($buttonWindowsInstallerSour_Click)
		#
		# button14
		#
		$button14.Location = '204, 360'
		$button14.Name = 'button14'
		$button14.Size = '193, 23'
		$button14.TabIndex = 26
		$button14.Text = 'Software Metering Usage Report'
		$button14.UseCompatibleTextRendering = $True
		$button14.UseVisualStyleBackColor = $True
		$button14.add_Click($button14_Click)
		#
		# buttonIDMIFCollectionCycle
		#
		$buttonIDMIFCollectionCycle.Location = '204, 335'
		$buttonIDMIFCollectionCycle.Name = 'buttonIDMIFCollectionCycle'
		$buttonIDMIFCollectionCycle.Size = '193, 23'
		$buttonIDMIFCollectionCycle.TabIndex = 25
		$buttonIDMIFCollectionCycle.Text = 'IDMIF Collection Cycle'
		$buttonIDMIFCollectionCycle.UseCompatibleTextRendering = $True
		$buttonIDMIFCollectionCycle.UseVisualStyleBackColor = $True
		$buttonIDMIFCollectionCycle.add_Click($buttonIDMIFCollectionCycle_Click)
		#
		# buttonFileCollectionCycle
		#
		$buttonFileCollectionCycle.Location = '204, 310'
		$buttonFileCollectionCycle.Name = 'buttonFileCollectionCycle'
		$buttonFileCollectionCycle.Size = '193, 23'
		$buttonFileCollectionCycle.TabIndex = 24
		$buttonFileCollectionCycle.Text = 'File Collection Cycle'
		$buttonFileCollectionCycle.UseCompatibleTextRendering = $True
		$buttonFileCollectionCycle.UseVisualStyleBackColor = $True
		$buttonFileCollectionCycle.add_Click($buttonFileCollectionCycle_Click)
		#
		# buttonDiscoveryDataCollect
		#
		$buttonDiscoveryDataCollect.Location = '204, 285'
		$buttonDiscoveryDataCollect.Name = 'buttonDiscoveryDataCollect'
		$buttonDiscoveryDataCollect.Size = '193, 23'
		$buttonDiscoveryDataCollect.TabIndex = 23
		$buttonDiscoveryDataCollect.Text = 'Discovery Data Collection'
		$buttonDiscoveryDataCollect.UseCompatibleTextRendering = $True
		$buttonDiscoveryDataCollect.UseVisualStyleBackColor = $True
		$buttonDiscoveryDataCollect.add_Click($buttonDiscoveryDataCollect_Click)
		#
		# buttonSoftwareInventoryCol
		#
		$buttonSoftwareInventoryCol.Location = '204, 260'
		$buttonSoftwareInventoryCol.Name = 'buttonSoftwareInventoryCol'
		$buttonSoftwareInventoryCol.Size = '193, 23'
		$buttonSoftwareInventoryCol.TabIndex = 22
		$buttonSoftwareInventoryCol.Text = 'Software Inventory Collection'
		$buttonSoftwareInventoryCol.UseCompatibleTextRendering = $True
		$buttonSoftwareInventoryCol.UseVisualStyleBackColor = $True
		$buttonSoftwareInventoryCol.add_Click($buttonSoftwareInventoryCol_Click)
		#
		# buttonHardwareInventoryCol
		#
		$buttonHardwareInventoryCol.Location = '204, 235'
		$buttonHardwareInventoryCol.Name = 'buttonHardwareInventoryCol'
		$buttonHardwareInventoryCol.Size = '193, 23'
		$buttonHardwareInventoryCol.TabIndex = 21
		$buttonHardwareInventoryCol.Text = 'Hardware Inventory Collection'
		$buttonHardwareInventoryCol.UseCompatibleTextRendering = $True
		$buttonHardwareInventoryCol.UseVisualStyleBackColor = $True
		$buttonHardwareInventoryCol.add_Click($buttonHardwareInventoryCol_Click)
		#
		# buttonNAPAction
		#
		$buttonNAPAction.Location = '204, 210'
		$buttonNAPAction.Name = 'buttonNAPAction'
		$buttonNAPAction.Size = '193, 23'
		$buttonNAPAction.TabIndex = 20
		$buttonNAPAction.Text = 'NAP Action'
		$buttonNAPAction.UseCompatibleTextRendering = $True
		$buttonNAPAction.UseVisualStyleBackColor = $True
		$buttonNAPAction.add_Click($buttonNAPAction_Click)
		#
		# buttonPeerDPStatusReportin
		#
		$buttonPeerDPStatusReportin.Location = '204, 135'
		$buttonPeerDPStatusReportin.Name = 'buttonPeerDPStatusReportin'
		$buttonPeerDPStatusReportin.Size = '193, 23'
		$buttonPeerDPStatusReportin.TabIndex = 19
		$buttonPeerDPStatusReportin.Text = 'Peer DP Status Reporting'
		$buttonPeerDPStatusReportin.UseCompatibleTextRendering = $True
		$buttonPeerDPStatusReportin.UseVisualStyleBackColor = $True
		$buttonPeerDPStatusReportin.add_Click($buttonPeerDPStatusReportin_Click)
		#
		# buttonRetryRefreshingCerti
		#
		$buttonRetryRefreshingCerti.Location = '204, 110'
		$buttonRetryRefreshingCerti.Name = 'buttonRetryRefreshingCerti'
		$buttonRetryRefreshingCerti.Size = '193, 23'
		$buttonRetryRefreshingCerti.TabIndex = 18
		$buttonRetryRefreshingCerti.Text = 'Retry Refreshing certificates ADMP'
		$buttonRetryRefreshingCerti.UseCompatibleTextRendering = $True
		$buttonRetryRefreshingCerti.UseVisualStyleBackColor = $True
		$buttonRetryRefreshingCerti.add_Click($buttonRetryRefreshingCerti_Click)
		#
		# buttonValidateUserPolicy
		#
		$buttonValidateUserPolicy.Location = '204, 85'
		$buttonValidateUserPolicy.Name = 'buttonValidateUserPolicy'
		$buttonValidateUserPolicy.Size = '193, 23'
		$buttonValidateUserPolicy.TabIndex = 17
		$buttonValidateUserPolicy.Text = 'Validate User Policy'
		$buttonValidateUserPolicy.UseCompatibleTextRendering = $True
		$buttonValidateUserPolicy.UseVisualStyleBackColor = $True
		$buttonValidateUserPolicy.add_Click($buttonValidateUserPolicy_Click)
		#
		# buttonValidateMachinePolic
		#
		$buttonValidateMachinePolic.Location = '204, 60'
		$buttonValidateMachinePolic.Name = 'buttonValidateMachinePolic'
		$buttonValidateMachinePolic.Size = '193, 23'
		$buttonValidateMachinePolic.TabIndex = 16
		$buttonValidateMachinePolic.Text = 'Validate Machine Policy'
		$buttonValidateMachinePolic.UseCompatibleTextRendering = $True
		$buttonValidateMachinePolic.UseVisualStyleBackColor = $True
		$buttonValidateMachinePolic.add_Click($buttonValidateMachinePolic_Click)
		#
		# buttonUserPolicyAgentClean
		#
		$buttonUserPolicyAgentClean.Location = '204, 35'
		$buttonUserPolicyAgentClean.Name = 'buttonUserPolicyAgentClean'
		$buttonUserPolicyAgentClean.Size = '193, 23'
		$buttonUserPolicyAgentClean.TabIndex = 15
		$buttonUserPolicyAgentClean.Text = 'User Policy Agent Cleanup'
		$buttonUserPolicyAgentClean.UseCompatibleTextRendering = $True
		$buttonUserPolicyAgentClean.UseVisualStyleBackColor = $True
		$buttonUserPolicyAgentClean.add_Click($buttonUserPolicyAgentClean_Click)
		#
		# buttonMachinePolicyAgentCl
		#
		$buttonMachinePolicyAgentCl.Location = '204, 435'
		$buttonMachinePolicyAgentCl.Name = 'buttonMachinePolicyAgentCl'
		$buttonMachinePolicyAgentCl.Size = '193, 23'
		$buttonMachinePolicyAgentCl.TabIndex = 14
		$buttonMachinePolicyAgentCl.Text = 'Machine Policy Agent Cleanup'
		$buttonMachinePolicyAgentCl.UseCompatibleTextRendering = $True
		$buttonMachinePolicyAgentCl.UseVisualStyleBackColor = $True
		$buttonMachinePolicyAgentCl.add_Click($buttonMachinePolicyAgentCl_Click)
		#
		# buttonClearProxySettingsCa
		#
		$buttonClearProxySettingsCa.Location = '13, 410'
		$buttonClearProxySettingsCa.Name = 'buttonClearProxySettingsCa'
		$buttonClearProxySettingsCa.Size = '185, 23'
		$buttonClearProxySettingsCa.TabIndex = 13
		$buttonClearProxySettingsCa.Text = 'Clear Proxy Settings Cache'
		$buttonClearProxySettingsCa.UseCompatibleTextRendering = $True
		$buttonClearProxySettingsCa.UseVisualStyleBackColor = $True
		$buttonClearProxySettingsCa.add_Click($buttonClearProxySettingsCa_Click)
		#
		# buttonSourceUpdateMessage
		#
		$buttonSourceUpdateMessage.Location = '13, 385'
		$buttonSourceUpdateMessage.Name = 'buttonSourceUpdateMessage'
		$buttonSourceUpdateMessage.Size = '185, 23'
		$buttonSourceUpdateMessage.TabIndex = 12
		$buttonSourceUpdateMessage.Text = 'Source Update Message'
		$buttonSourceUpdateMessage.UseCompatibleTextRendering = $True
		$buttonSourceUpdateMessage.UseVisualStyleBackColor = $True
		$buttonSourceUpdateMessage.add_Click($buttonSourceUpdateMessage_Click)
		#
		# buttonSoftwareMeteringUsag
		#
		$buttonSoftwareMeteringUsag.Location = '13, 360'
		$buttonSoftwareMeteringUsag.Name = 'buttonSoftwareMeteringUsag'
		$buttonSoftwareMeteringUsag.Size = '185, 23'
		$buttonSoftwareMeteringUsag.TabIndex = 11
		$buttonSoftwareMeteringUsag.Text = 'Software Metering Usage Report'
		$buttonSoftwareMeteringUsag.UseCompatibleTextRendering = $True
		$buttonSoftwareMeteringUsag.UseVisualStyleBackColor = $True
		$buttonSoftwareMeteringUsag.add_Click($buttonSoftwareMeteringUsag_Click)
		#
		# buttonPolicyAgentEvaluateA
		#
		$buttonPolicyAgentEvaluateA.Location = '13, 335'
		$buttonPolicyAgentEvaluateA.Name = 'buttonPolicyAgentEvaluateA'
		$buttonPolicyAgentEvaluateA.Size = '185, 23'
		$buttonPolicyAgentEvaluateA.TabIndex = 10
		$buttonPolicyAgentEvaluateA.Text = 'Policy Agent Evaluate Assignment'
		$buttonPolicyAgentEvaluateA.UseCompatibleTextRendering = $True
		$buttonPolicyAgentEvaluateA.UseVisualStyleBackColor = $True
		$buttonPolicyAgentEvaluateA.add_Click($buttonPolicyAgentEvaluateA_Click)
		#
		# buttonLSRefreshLocations
		#
		$buttonLSRefreshLocations.Location = '13, 260'
		$buttonLSRefreshLocations.Name = 'buttonLSRefreshLocations'
		$buttonLSRefreshLocations.Size = '185, 23'
		$buttonLSRefreshLocations.TabIndex = 9
		$buttonLSRefreshLocations.Text = 'LS Refresh Locations'
		$buttonLSRefreshLocations.UseCompatibleTextRendering = $True
		$buttonLSRefreshLocations.UseVisualStyleBackColor = $True
		$buttonLSRefreshLocations.add_Click($buttonLSRefreshLocations_Click)
		#
		# buttonRefreshDefaultMPTask
		#
		$buttonRefreshDefaultMPTask.Location = '13, 235'
		$buttonRefreshDefaultMPTask.Name = 'buttonRefreshDefaultMPTask'
		$buttonRefreshDefaultMPTask.Size = '185, 23'
		$buttonRefreshDefaultMPTask.TabIndex = 8
		$buttonRefreshDefaultMPTask.Text = 'Refresh Default MP Task'
		$buttonRefreshDefaultMPTask.UseCompatibleTextRendering = $True
		$buttonRefreshDefaultMPTask.UseVisualStyleBackColor = $True
		$buttonRefreshDefaultMPTask.add_Click($buttonRefreshDefaultMPTask_Click)
		#
		# buttonEvaluateMachinePolic
		#
		$buttonEvaluateMachinePolic.Location = '13, 210'
		$buttonEvaluateMachinePolic.Name = 'buttonEvaluateMachinePolic'
		$buttonEvaluateMachinePolic.Size = '185, 23'
		$buttonEvaluateMachinePolic.TabIndex = 7
		$buttonEvaluateMachinePolic.Text = 'Evaluate Machine Policies'
		$buttonEvaluateMachinePolic.UseCompatibleTextRendering = $True
		$buttonEvaluateMachinePolic.UseVisualStyleBackColor = $True
		$buttonEvaluateMachinePolic.add_Click($buttonEvaluateMachinePolic_Click)
		#
		# buttonMachineAssignments
		#
		$buttonMachineAssignments.Location = '13, 185'
		$buttonMachineAssignments.Name = 'buttonMachineAssignments'
		$buttonMachineAssignments.Size = '185, 23'
		$buttonMachineAssignments.TabIndex = 6
		$buttonMachineAssignments.Text = 'Machine Assignments'
		$buttonMachineAssignments.UseCompatibleTextRendering = $True
		$buttonMachineAssignments.UseVisualStyleBackColor = $True
		$buttonMachineAssignments.add_Click($buttonMachineAssignments_Click)
		#
		# buttonClientMachineAuthent
		#
		$buttonClientMachineAuthent.Location = '13, 160'
		$buttonClientMachineAuthent.Name = 'buttonClientMachineAuthent'
		$buttonClientMachineAuthent.Size = '185, 23'
		$buttonClientMachineAuthent.TabIndex = 5
		$buttonClientMachineAuthent.Text = 'Client Machine Authentication'
		$buttonClientMachineAuthent.UseCompatibleTextRendering = $True
		$buttonClientMachineAuthent.UseVisualStyleBackColor = $True
		$buttonClientMachineAuthent.add_Click($buttonClientMachineAuthent_Click)
		#
		# buttonIDMIFCollection
		#
		$buttonIDMIFCollection.Location = '13, 135'
		$buttonIDMIFCollection.Name = 'buttonIDMIFCollection'
		$buttonIDMIFCollection.Size = '185, 23'
		$buttonIDMIFCollection.TabIndex = 4
		$buttonIDMIFCollection.Text = 'IDMIF Collection'
		$buttonIDMIFCollection.UseCompatibleTextRendering = $True
		$buttonIDMIFCollection.UseVisualStyleBackColor = $True
		$buttonIDMIFCollection.add_Click($buttonIDMIFCollection_Click)
		#
		# buttonFileCollection
		#
		$buttonFileCollection.Location = '13, 110'
		$buttonFileCollection.Name = 'buttonFileCollection'
		$buttonFileCollection.Size = '185, 23'
		$buttonFileCollection.TabIndex = 3
		$buttonFileCollection.Text = 'File Collection'
		$buttonFileCollection.UseCompatibleTextRendering = $True
		$buttonFileCollection.UseVisualStyleBackColor = $True
		$buttonFileCollection.add_Click($buttonFileCollection_Click)
		#
		# buttonDiscoveryInventory
		#
		$buttonDiscoveryInventory.Location = '13, 85'
		$buttonDiscoveryInventory.Name = 'buttonDiscoveryInventory'
		$buttonDiscoveryInventory.Size = '185, 23'
		$buttonDiscoveryInventory.TabIndex = 2
		$buttonDiscoveryInventory.Text = 'Discovery Inventory'
		$buttonDiscoveryInventory.UseCompatibleTextRendering = $True
		$buttonDiscoveryInventory.UseVisualStyleBackColor = $True
		$buttonDiscoveryInventory.add_Click($buttonDiscoveryInventory_Click)
		#
		# buttonSoftwareInventory
		#
		$buttonSoftwareInventory.Location = '13, 60'
		$buttonSoftwareInventory.Name = 'buttonSoftwareInventory'
		$buttonSoftwareInventory.Size = '185, 23'
		$buttonSoftwareInventory.TabIndex = 1
		$buttonSoftwareInventory.Text = 'Software Inventory'
		$buttonSoftwareInventory.UseCompatibleTextRendering = $True
		$buttonSoftwareInventory.UseVisualStyleBackColor = $True
		$buttonSoftwareInventory.add_Click($buttonSoftwareInventory_Click)
		#
		# buttonHardwareInventory
		#
		$buttonHardwareInventory.Location = '13, 35'
		$buttonHardwareInventory.Name = 'buttonHardwareInventory'
		$buttonHardwareInventory.Size = '185, 23'
		$buttonHardwareInventory.TabIndex = 0
		$buttonHardwareInventory.Text = 'Hardware Inventory'
		$buttonHardwareInventory.UseCompatibleTextRendering = $True
		$buttonHardwareInventory.UseVisualStyleBackColor = $True
		$buttonHardwareInventory.add_Click($buttonHardwareInventory_Click)
		$formConfigurationManager.ResumeLayout()
		#endregion Generated Form Code
		
		#----------------------------------------------
		
		#Save the initial state of the form
		$InitialFormWindowState = $formConfigurationManager.WindowState
		#Init the OnLoad event to correct the initial state of the form
		$formConfigurationManager.add_Load($Form_StateCorrection_Load)
		#Clean up the control events
		$formConfigurationManager.add_FormClosed($Form_Cleanup_FormClosed)
		#Show the Form
		return $formConfigurationManager.ShowDialog()
		
	} #End Function
	
	function runInventory
	{
		$UserName = (Get-Item  env:\username).Value
		$ComputerName = (Get-Item env:\Computername).Value
		$filepath = "\\dbfsvs02.\itdb\Software\__DB Tech Scripts\Tracking"
		$lfilepath = (Get-ChildItem env:\userprofile).value
		
		Add-Content  "$lFilepath\style.CSS" -Value " <style>
body { background-color:#E5E4E2;
       font-family:Arial;
       font-size:10pt; }
td, th { border:0px solid black; 
         border-collapse:collapse;
         white-space:pre; }
th { color:white;
     background-color:black; }
table, tr, td, th { padding: 2px; margin: 0px ;white-space:pre; }
tr:nth-child(odd) {background-color: lightgray}
table { width:95%;margin-left:5px; margin-bottom:20px;}
h2 {
 font-family:Tahoma;
 color:#6D7B8D;
}
.footer 
{ color:green; 
  margin-left:10px; 
  font-family:Tahoma;
  font-size:8pt;
  font-style:italic;
}
</style>"
		
		Write-Host "CSS File Created Successfully... Executing Inventory Report!!! Please Wait !!!" -ForegroundColor Yellow
		
		#General Information
		$ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem | Select -Property Model, Manufacturer, Description, PrimaryOwnerName, SystemType | ConvertTo-Html -Fragment
		
		#Boot Configuration
		$BootConfiguration = Get-WmiObject -Class Win32_BootConfiguration | Select -Property Name, ConfigurationPath | ConvertTo-Html -Fragment
		
		#BIOS Information
		$BIOS = Get-WmiObject -Class Win32_BIOS | Select -Property PSComputerName, Manufacturer, Version | ConvertTo-Html -Fragment
		
		#Operating System Information
		$OS = Get-WmiObject -Class Win32_OperatingSystem | Select -Property Caption, CSDVersion, OSArchitecture, OSLanguage | ConvertTo-Html -Fragment
		
		#Time Zone Information
		$TimeZone = Get-WmiObject -Class Win32_TimeZone | Select Caption, StandardName | ConvertTo-Html -Fragment
		
		#Logical Disk Information
		$Disk = Get-WmiObject -Class Win32_LogicalDisk -Filter DriveType=3 | Select DeviceID, @{ Expression = { $_.Size /1Gb -as [int] }; Label = "Total Size(GB)" }, @{ Expression = { $_.Freespace / 1Gb -as [int] }; Label = "Free Size (GB)" } | ConvertTo-Html -Fragment
		
		#CPU Information
		$SystemProcessor = Get-WmiObject -Class Win32_Processor | Select SystemName, Name, MaxClockSpeed, Manufacturer, status | ConvertTo-Html -Fragment
		
		#Memory Information
		$PhysicalMemory = Get-WmiObject -Class Win32_PhysicalMemory | Select -Property Tag, SerialNumber, PartNumber, Manufacturer, DeviceLocator, PositionInRow, ConfiguredClockSpeed, ConfiguredVoltage, @{ Name = "Capacity(GB)"; Expression = { "{0:N1}" -f ($_.Capacity/1GB) } } | ConvertTo-Html -Fragment
		
		#Network Information
		$Network = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE |
		Select-Object Description, DHCPServer,
					  @{ Name = 'IpAddress'; Expression = { $_.IpAddress -join '; ' } },
					  @{ Name = 'IpSubnet'; Expression = { $_.IpSubnet -join '; ' } },
					  @{ Name = 'DefaultIPgateway'; Expression = { $_.DefaultIPgateway -join '; ' } },
					  @{ Name = 'DNSDomain'; Expression = { $_.DNSDomain -join '; ' } },
					  WinsPrimaryServer, WINSSecindaryServer | ConvertTo-Html -Fragment
		
		#Printer Information
		#Get-WMIObject -Class Win32_PrinterConfiguration | ConvertTo-Html -Fragment
		$Printer = Get-Printer -ComputerName $ComputerName | Select -Property Name, DriverName | ConvertTo-Html -Fragment
		
		#User Accounts
		$directories = Get-ChildItem -Path "C:\Users\" | Select -Property Name, LastWriteTime | ConvertTo-Html -Fragment
		
		#Installed Windows Updates
		$HotFix = Get-WmiObject -Class Win32_QuickFixEngineering | Select -Property HotFixID | ConvertTo-Html -Fragment
		
		#Installed Products
		$InstalledProduct = Get-WmiObject -Class Win32_Product | Select -Property Caption, PackageName | ConvertTo-HTML -Fragment
		
		#Software Inventory
		$Software = Get-WmiObject -Class Win32_Product |
		Select Name, Vendor, Version, Caption | ConvertTo-Html -Fragment
		
		#ReportDate
		#$ReportDate = Get-Date | Select -Property DateTime |ConvertTo-Html -Fragment
		
		
		
		ConvertTo-Html -Body "<p><font color = blue><H1><center>Embry-Riddle Aeronautical University Computer Information Export</center></H1></font>
</p><H1> Computer Name : $ComputerName </H1>
<font color = blue><H4><B>General Information</B></H4></font>$ComputerSystem
<font color = blue><H4><B>BIOS Information</B></H4></font>$BIOS
<font color = blue><H4><B>Boot Configuration</B></H4></font>$BootConfiguration
<font color = blue><H4><B>Operating System Information</B></H4></font>$OS
<font color = blue><H4><B>Time Zone Information</B></H4></font>$TimeZone
<font color = blue><H4><B>Disk Information</B></H4></font>$Disk
<font color = blue><H4><B>Processor Information</B></H4></font>$SystemProcessor
<font color = blue><H4><B>User Account Information</B></H4></font>$directories
<font color = blue><H4><B>Printer Information</B></H4></font>$Printer
<font color = blue><H4><B>Network Information</B></H4></font>$Network
<font color = blue><H4><B>Memory Information</B></H4></font>$PhysicalMemory
<font color = blue><H4><B>Hot Fix Installed</B></H4></font>$HotFix
<font color = blue><H4><B>Installed Applications</B></H4></font>$InstalledProduct
<font color = blue><H4><B>Software Inventory</B></H4></font>$Software
<BR><BR><BR><BR><BR><BR><BR>
The Report is generated On  $(get-date) by $((Get-Item env:\username).Value) on computer $((Get-Item env:\Computername).Value) <BR><BR><BR> Report Version 0.2.1 <BR><BR><BR> Written by Alan Newingham" -CssUri "$lfilepath\style.CSS" -Title "$ComputerName" | Out-File "$FilePath\$ComputerName.html"
		
		
		
		Write-Host "Script Execution Completed" -ForegroundColor Yellow
		Exit
	}
	
	function Show-Computerinfo_psf
	{
		
		#----------------------------------------------
		#region Import the Assemblies
		#----------------------------------------------
		[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
		[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
		#endregion Import Assemblies
		
		#----------------------------------------------
		#region Generated Form Objects
		#----------------------------------------------
		[System.Windows.Forms.Application]::EnableVisualStyles()
		$formComputerInformation = New-Object 'System.Windows.Forms.Form'
		$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
		$labelMemInstalled = New-Object 'System.Windows.Forms.Label'
		$labelCPUName = New-Object 'System.Windows.Forms.Label'
		$labelCPU = New-Object 'System.Windows.Forms.Label'
		$labelTotalMemSizeGB = New-Object 'System.Windows.Forms.Label'
		$labelMaxMemoryGB = New-Object 'System.Windows.Forms.Label'
		$label5 = New-Object 'System.Windows.Forms.Label'
		$label6 = New-Object 'System.Windows.Forms.Label'
		$label7 = New-Object 'System.Windows.Forms.Label'
		$labelModel = New-Object 'System.Windows.Forms.Label'
		$labelMaxMemory = New-Object 'System.Windows.Forms.Label'
		$labelManufacturer = New-Object 'System.Windows.Forms.Label'
		$labelIPAddress = New-Object 'System.Windows.Forms.Label'
		$labelInstDate = New-Object 'System.Windows.Forms.Label'
		$labelOSInstallDate = New-Object 'System.Windows.Forms.Label'
		$labelCCMCacheSize = New-Object 'System.Windows.Forms.Label'
		$labelCCMCache = New-Object 'System.Windows.Forms.Label'
		$labelFreeSpaceGB = New-Object 'System.Windows.Forms.Label'
		$labelDiskSizeGB = New-Object 'System.Windows.Forms.Label'
		$labelserialNumber = New-Object 'System.Windows.Forms.Label'
		$labelenvCOMPUTERNAME = New-Object 'System.Windows.Forms.Label'
		$labelMemory = New-Object 'System.Windows.Forms.Label'
		$labelSpaceAvailable = New-Object 'System.Windows.Forms.Label'
		$labelComputerName = New-Object 'System.Windows.Forms.Label'
		$labelHardDiskSize = New-Object 'System.Windows.Forms.Label'
		$buttonOK = New-Object 'System.Windows.Forms.Button'
		$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
		#endregion Generated Form Objects
		
		#----------------------------------------------
		# User Generated Script
		#----------------------------------------------
		
		$formComputerInformation_Load = {
			
		}
		$Computer = $env:COMPUTERNAME
		$SerialNumber = (Get-WmiObject win32_bios -ComputerName $Computer).SerialNumber
		$CCMCacheSize = Get-WmiObject -namespace root\ccm\SoftMgmtAgent -class CacheConfig
		$CCMCache = $CCMCacheSize.Size
		$InstDate = (Get-CimInstance Win32_OperatingSystem).InstallDate
		$Manufacturer = Get-WmiObject win32_computersystem | Select Manufacturer
		$Model = Get-WmiObject win32_computersystem | Select Model
		#Gets the OS info
		$GetOS = Get-WmiObject -class Win32_OperatingSystem -computername $Computer
		$OS = $GetOS.Caption
		$OSArchitecture = $GetOS.OSArchitecture
		$OSBuildNumber = $GetOS.BuildNumber
		#Monitor information
		$MonitorCount = Get-ciminstance -namespace root/wmi -classname WmiMonitorConnectionParams | Select VideoOutputTechnology
		#Gets memory information
		$Getmemoryslot = Get-WmiObject Win32_PhysicalMemoryArray -ComputerName $computer
		$Getmemory = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer
		$Getmemorymeasure = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer | Measure-Object -Property Capacity -Sum
		$MemorySlot = $Getmemoryslot.MemoryDevices
		$MaxMemory = $($Getmemoryslot.MaxCapacity/1024/1024)
		$TotalMemSticks = $Getmemorymeasure.count
		$TotalMemSize = $($Getmemorymeasure.sum/1024/1024/1024)
		#Get the disk info
		$GetDiskInfo = Get-WmiObject Win32_logicaldisk -ComputerName $computer -Filter "DeviceID='C:'"
		$DiskSize = $([math]::Round($GetDiskInfo.Size/1GB))
		$FreeSpace = $([math]::Round($GetDiskInfo.FreeSpace/1GB))
		$UsedSapce = $([math]::Round($DiskSize - $FreeSpace))
		#Gets CPU info
		$GetCPU = Get-wmiobject win32_processor -ComputerName $Computer
		$CPUName = $GetCPU.Name
		$CPUManufacturer = $GetCPU.Manufacturer
		$CPUMaxClockSpeed = $GetCPU.MaxClockSpeed
		#account status
		$LoggedOnUser = (Get-WmiObject win32_computersystem -ComputerName $Computer).Username
		$getLockedStart = If (Get-Process logonui -ComputerName $Computer -ErrorAction SilentlyContinue) { $Locked = "Yes" }
		Else { $Locked = "No" }
		#Serial Number
		$SerialNumber = (Get-WmiObject win32_bios -ComputerName $Computer).SerialNumber
		#get IP address
		$IpAddress = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1]
		#Gets BIOS info
		$BIOSName = (Get-WmiObject win32_bios -ComputerName $Computer).Name
		$BIOSManufacturer = (Get-WmiObject win32_bios -ComputerName $Computer).Manufacturer
		$BIOSVersionN = (Get-WmiObject win32_bios -ComputerName $Computer).Version
		#Gets Motherboard info
		$MotherBoardName = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Name
		$MotherBoardManufacturet = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Manufacturer
		$MotherBoardProduct = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Product
		$MotherBoardSerial = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).SerialNumber
		$InstDate = (Get-CimInstance Win32_OperatingSystem).InstallDate
		$DesktopPath = [Environment]::GetFolderPath("Desktop")
		$MonitorC0unt = $MonitorCount -replace '@{VideoOutputTechnology=', ''
		$MonitorCount = $MonitorC0unt -replace '}', ''
		$M4nufacturer = $Manufacturer -replace '@{Manufacturer=', ''
		$Manufacturer = $M4nufacturer -replace '}', ''
		$M0del = $Model -replace '@{Model='
		$Model = $M0del -replace '}'
		$directories = Get-ChildItem -Path "C:\Users\" | Select -Property Name
		$D1rectories = $directories -replace '{@{Name=', ''
		$directories = $D1rectories -replace '}', ''
		$M0therBoardSerial = $MotherBoardSerial -replace '/$SerialNumber/', ''
		$MotherBoardSerial = $M0therBoardSerial -replace '/'
		
		$richtextbox3.Text += "Welcome to the SCCM ToolKit."
		
		# --End User Generated Script--
		#----------------------------------------------
		#region Generated Events
		#----------------------------------------------
		
		$Form_StateCorrection_Load =
		{
			#Correct the initial state of the form to prevent the .Net maximized form issue
			$formComputerInformation.WindowState = $InitialFormWindowState
		}
		
		$Form_Cleanup_FormClosed =
		{
			#Remove all event handlers from the controls
			try
			{
				$formComputerInformation.remove_Load($formComputerInformation_Load)
				$formComputerInformation.remove_Load($Form_StateCorrection_Load)
				$formComputerInformation.remove_FormClosed($Form_Cleanup_FormClosed)
			}
			catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		}
		#endregion Generated Events
		
		#----------------------------------------------
		#region Generated Form Code
		#----------------------------------------------
		$formComputerInformation.SuspendLayout()
		$groupbox3.SuspendLayout()
		#
		# formComputerInformation
		#
		$formComputerInformation.Controls.Add($groupbox3)
		$formComputerInformation.Controls.Add($buttonOK)
		$formComputerInformation.AcceptButton = $buttonOK
		$formComputerInformation.AutoScaleDimensions = '6, 13'
		$formComputerInformation.AutoScaleMode = 'Font'
		$formComputerInformation.ClientSize = '349, 250'
		$formComputerInformation.FormBorderStyle = 'FixedDialog'
		$formComputerInformation.MaximizeBox = $False
		$formComputerInformation.MinimizeBox = $False
		$formComputerInformation.Name = 'formComputerInformation'
		$formComputerInformation.StartPosition = 'CenterScreen'
		$formComputerInformation.Text = 'Computer Information'
		$formComputerInformation.add_Load($formComputerInformation_Load)
		#
		# groupbox3
		#
		$groupbox3.Controls.Add($labelMemInstalled)
		$groupbox3.Controls.Add($labelCPUName)
		$groupbox3.Controls.Add($labelCPU)
		$groupbox3.Controls.Add($labelTotalMemSizeGB)
		$groupbox3.Controls.Add($labelMaxMemoryGB)
		$groupbox3.Controls.Add($label5)
		$groupbox3.Controls.Add($label6)
		$groupbox3.Controls.Add($label7)
		$groupbox3.Controls.Add($labelModel)
		$groupbox3.Controls.Add($labelMaxMemory)
		$groupbox3.Controls.Add($labelManufacturer)
		$groupbox3.Controls.Add($labelIPAddress)
		$groupbox3.Controls.Add($labelInstDate)
		$groupbox3.Controls.Add($labelOSInstallDate)
		$groupbox3.Controls.Add($labelCCMCacheSize)
		$groupbox3.Controls.Add($labelCCMCache)
		$groupbox3.Controls.Add($labelFreeSpaceGB)
		$groupbox3.Controls.Add($labelDiskSizeGB)
		$groupbox3.Controls.Add($labelserialNumber)
		$groupbox3.Controls.Add($labelenvCOMPUTERNAME)
		$groupbox3.Controls.Add($labelMemory)
		$groupbox3.Controls.Add($labelSpaceAvailable)
		$groupbox3.Controls.Add($labelComputerName)
		$groupbox3.Controls.Add($labelHardDiskSize)
		$groupbox3.Location = '0, 12'
		$groupbox3.Name = 'groupbox3'
		$groupbox3.Size = '352, 202'
		$groupbox3.TabIndex = 11
		$groupbox3.TabStop = $False
		$groupbox3.Text = 'System Info:'
		$groupbox3.UseCompatibleTextRendering = $True
		#
		# labelMemInstalled
		#
		$labelMemInstalled.AutoSize = $True
		$labelMemInstalled.Location = '6, 163'
		$labelMemInstalled.Name = 'labelMemInstalled'
		$labelMemInstalled.Size = '78, 17'
		$labelMemInstalled.TabIndex = 28
		$labelMemInstalled.Text = 'Mem Installed:'
		$labelMemInstalled.UseCompatibleTextRendering = $True
		#
		# labelCPUName
		#
		$labelCPUName.AutoSize = $True
		$labelCPUName.Location = '104, 178'
		$labelCPUName.Name = 'labelCPUName'
		$labelCPUName.Size = '65, 17'
		$labelCPUName.TabIndex = 27
		$labelCPUName.Text = "$CPUName"
		$labelCPUName.UseCompatibleTextRendering = $True
		#
		# labelCPU
		#
		$labelCPU.AutoSize = $True
		$labelCPU.Location = '6, 178'
		$labelCPU.Name = 'labelCPU'
		$labelCPU.Size = '34, 17'
		$labelCPU.TabIndex = 26
		$labelCPU.Text = 'CPU: '
		$labelCPU.UseCompatibleTextRendering = $True
		#
		# labelTotalMemSizeGB
		#
		$labelTotalMemSizeGB.AutoSize = $True
		$labelTotalMemSizeGB.Location = '104, 163'
		$labelTotalMemSizeGB.Name = 'labelTotalMemSizeGB'
		$labelTotalMemSizeGB.Size = '102, 17'
		$labelTotalMemSizeGB.TabIndex = 25
		$labelTotalMemSizeGB.Text = "$TotalMemSize GB"
		$labelTotalMemSizeGB.UseCompatibleTextRendering = $True
		#
		# labelMaxMemoryGB
		#
		$labelMaxMemoryGB.AutoSize = $True
		$labelMaxMemoryGB.Location = '104, 149'
		$labelMaxMemoryGB.Name = 'labelMaxMemoryGB'
		$labelMaxMemoryGB.Size = '92, 17'
		$labelMaxMemoryGB.TabIndex = 24
		$labelMaxMemoryGB.Text = "$MaxMemory GB"
		$labelMaxMemoryGB.UseCompatibleTextRendering = $True
		#
		# label5
		#
		$label5.AutoSize = $True
		$label5.Location = '104, 135'
		$label5.Name = 'label5'
		$label5.Size = '61, 17'
		$label5.TabIndex = 23
		$label5.Text = "$IpAddress"
		$label5.UseCompatibleTextRendering = $True
		#
		# label6
		#
		$label6.AutoSize = $True
		$label6.Location = '104, 120'
		$label6.Name = 'label6'
		$label6.Size = '41, 17'
		$label6.TabIndex = 22
		$label6.Text = "$Model"
		$label6.UseCompatibleTextRendering = $True
		#
		# label7
		#
		$label7.AutoSize = $True
		$label7.Location = '104, 105'
		$label7.Name = 'label7'
		$label7.Size = '77, 17'
		$label7.TabIndex = 21
		$label7.Text = "$Manufacturer"
		$label7.UseCompatibleTextRendering = $True
		#
		# labelModel
		#
		$labelModel.AutoSize = $True
		$labelModel.Location = '6, 120'
		$labelModel.Name = 'labelModel'
		$labelModel.Size = '38, 17'
		$labelModel.TabIndex = 18
		$labelModel.Text = 'Model:'
		$labelModel.UseCompatibleTextRendering = $True
		#
		# labelMaxMemory
		#
		$labelMaxMemory.AutoSize = $True
		$labelMaxMemory.Location = '6, 149'
		$labelMaxMemory.Name = 'labelMaxMemory'
		$labelMaxMemory.Size = '73, 17'
		$labelMaxMemory.TabIndex = 20
		$labelMaxMemory.Text = 'Max Memory:'
		$labelMaxMemory.UseCompatibleTextRendering = $True
		#
		# labelManufacturer
		#
		$labelManufacturer.AutoSize = $True
		$labelManufacturer.Location = '6, 105'
		$labelManufacturer.Name = 'labelManufacturer'
		$labelManufacturer.Size = '77, 17'
		$labelManufacturer.TabIndex = 17
		$labelManufacturer.Text = 'Manufacturer: '
		$labelManufacturer.UseCompatibleTextRendering = $True
		#
		# labelIPAddress
		#
		$labelIPAddress.AutoSize = $True
		$labelIPAddress.Location = '6, 135'
		$labelIPAddress.Name = 'labelIPAddress'
		$labelIPAddress.Size = '60, 17'
		$labelIPAddress.TabIndex = 19
		$labelIPAddress.Text = 'IPAddress:'
		$labelIPAddress.UseCompatibleTextRendering = $True
		#
		# labelInstDate
		#
		$labelInstDate.AutoSize = $True
		$labelInstDate.Location = '104, 90'
		$labelInstDate.Name = 'labelInstDate'
		$labelInstDate.Size = '53, 17'
		$labelInstDate.TabIndex = 16
		$labelInstDate.Text = "$InstDate"
		$labelInstDate.UseCompatibleTextRendering = $True
		#
		# labelOSInstallDate
		#
		$labelOSInstallDate.AutoSize = $True
		$labelOSInstallDate.Location = '6, 90'
		$labelOSInstallDate.Name = 'labelOSInstallDate'
		$labelOSInstallDate.Size = '86, 17'
		$labelOSInstallDate.TabIndex = 15
		$labelOSInstallDate.Text = 'OS Install Date: '
		$labelOSInstallDate.UseCompatibleTextRendering = $True
		#
		# labelCCMCacheSize
		#
		$labelCCMCacheSize.AutoSize = $True
		$labelCCMCacheSize.Location = '104, 75'
		$labelCCMCacheSize.Name = 'labelCCMCacheSize'
		$labelCCMCacheSize.Size = '69, 17'
		$labelCCMCacheSize.TabIndex = 14
		$labelCCMCacheSize.Text = "$CCMCache"
		$labelCCMCacheSize.UseCompatibleTextRendering = $True
		#
		# labelCCMCache
		#
		$labelCCMCache.AutoSize = $True
		$labelCCMCache.Location = '6, 75'
		$labelCCMCache.Name = 'labelCCMCache'
		$labelCCMCache.Size = '69, 17'
		$labelCCMCache.TabIndex = 11
		$labelCCMCache.Text = 'CCM Cache:'
		$labelCCMCache.UseCompatibleTextRendering = $True
		#
		# labelFreeSpaceGB
		#
		$labelFreeSpaceGB.AutoSize = $True
		$labelFreeSpaceGB.Location = '104, 60'
		$labelFreeSpaceGB.Name = 'labelFreeSpaceGB'
		$labelFreeSpaceGB.Size = '85, 17'
		$labelFreeSpaceGB.TabIndex = 13
		$labelFreeSpaceGB.Text = "$FreeSpace GB"
		$labelFreeSpaceGB.UseCompatibleTextRendering = $True
		#
		# labelDiskSizeGB
		#
		$labelDiskSizeGB.AutoSize = $True
		$labelDiskSizeGB.Location = '104, 46'
		$labelDiskSizeGB.Name = 'labelDiskSizeGB'
		$labelDiskSizeGB.Size = '74, 17'
		$labelDiskSizeGB.TabIndex = 12
		$labelDiskSizeGB.Text = "$DiskSize GB"
		$labelDiskSizeGB.UseCompatibleTextRendering = $True
		#
		# labelserialNumber
		#
		$labelserialNumber.AutoSize = $True
		$labelserialNumber.Location = '104, 31'
		$labelserialNumber.Name = 'labelserialNumber'
		$labelserialNumber.Size = '78, 17'
		$labelserialNumber.TabIndex = 11
		$labelserialNumber.Text = "$serialNumber"
		$labelserialNumber.UseCompatibleTextRendering = $True
		#
		# labelenvCOMPUTERNAME
		#
		$labelenvCOMPUTERNAME.AutoSize = $True
		$labelenvCOMPUTERNAME.Location = '104, 16'
		$labelenvCOMPUTERNAME.Name = 'labelenvCOMPUTERNAME'
		$labelenvCOMPUTERNAME.Size = '129, 17'
		$labelenvCOMPUTERNAME.TabIndex = 10
		$labelenvCOMPUTERNAME.Text = "$env:COMPUTERNAME"
		$labelenvCOMPUTERNAME.UseCompatibleTextRendering = $True
		#
		# labelMemory
		#
		$labelMemory.AutoSize = $True
		$labelMemory.Location = '6, 31'
		$labelMemory.Name = 'labelMemory'
		$labelMemory.Size = '80, 17'
		$labelMemory.TabIndex = 7
		$labelMemory.Text = 'Serial Number:'
		$labelMemory.UseCompatibleTextRendering = $True
		#
		# labelSpaceAvailable
		#
		$labelSpaceAvailable.AutoSize = $True
		$labelSpaceAvailable.Location = '6, 60'
		$labelSpaceAvailable.Name = 'labelSpaceAvailable'
		$labelSpaceAvailable.Size = '89, 17'
		$labelSpaceAvailable.TabIndex = 9
		$labelSpaceAvailable.Text = 'Space Available:'
		$labelSpaceAvailable.UseCompatibleTextRendering = $True
		#
		# labelComputerName
		#
		$labelComputerName.AutoSize = $True
		$labelComputerName.Location = '6, 16'
		$labelComputerName.Name = 'labelComputerName'
		$labelComputerName.Size = '93, 17'
		$labelComputerName.TabIndex = 6
		$labelComputerName.Text = 'Computer Name: '
		$labelComputerName.UseCompatibleTextRendering = $True
		#
		# labelHardDiskSize
		#
		$labelHardDiskSize.AutoSize = $True
		$labelHardDiskSize.Location = '6, 46'
		$labelHardDiskSize.Name = 'labelHardDiskSize'
		$labelHardDiskSize.Size = '82, 17'
		$labelHardDiskSize.TabIndex = 8
		$labelHardDiskSize.Text = 'Hard Disk Size:'
		$labelHardDiskSize.UseCompatibleTextRendering = $True
		#
		# buttonOK
		#
		$buttonOK.Anchor = 'Bottom, Right'
		$buttonOK.DialogResult = 'OK'
		$buttonOK.Location = '262, 215'
		$buttonOK.Name = 'buttonOK'
		$buttonOK.Size = '75, 23'
		$buttonOK.TabIndex = 0
		$buttonOK.Text = '&OK'
		$buttonOK.UseCompatibleTextRendering = $True
		$buttonOK.UseVisualStyleBackColor = $True
		$groupbox3.ResumeLayout()
		$formComputerInformation.ResumeLayout()
		#endregion Generated Form Code
		
		#----------------------------------------------
		
		#Save the initial state of the form
		$InitialFormWindowState = $formComputerInformation.WindowState
		#Init the OnLoad event to correct the initial state of the form
		$formComputerInformation.add_Load($Form_StateCorrection_Load)
		#Clean up the control events
		$formComputerInformation.add_FormClosed($Form_Cleanup_FormClosed)
		#Show the Form
		return $formComputerInformation.ShowDialog()
		
	} #End Function
	
	function forceUpdate
	{
		$DateAndTime = (Get-Date -format ddMMMyyyy-HH.mm)
		$computerName = $computerTextBox1.Text
		logAction "Update scheduled for $computerName"
		Invoke-Command -ComputerName $computerName -ScriptBlock {
			
			$DateAndTime = (Get-Date -format ddMMMyyyy-HH.mm)
			
			Register-ScheduledJob -Name "InstallUpdates $DateAndTime" -RunNow -ScriptBlock {
				
				$Criteria = "IsInstalled=0 and Type='Software'"; `
				$SearchResult = $Searcher.Search($Criteria).Updates; `
				$Session = New-Object -ComObject Microsoft.Update.Session; `
				$Downloader = $Session.CreateUpdateDownloader(); `
				$Downloader.Updates = $SearchResult; `
				$Downloader.Download(); `
				$Installer = New-Object -ComObject Microsoft.Update.Installer; `
				$Installer.Updates = $SearchResult; `
				$Result = $Installer.Install(); `
	
			}
		}
		$taskName = "InstallUpdates $DateAndTime"
		$taskExists = Get-ScheduledTask -cimsession $computerName | Where-Object { $_.TaskName -like $taskName }
		if ($taskExists)
		{
			$wshell.Popup("Update request has been sent successfully.", 0, "Success")
		}
		else
		{
			$wshell.Popup("Update request failed to send.", 0, "Error")
		}
	}
	
	function Restart-PC
	{
		$computerName = $computerTextBox1.Text
		logAction "Restart command sent to $computerName"
		$msgBoxInput = $wshell.Popup("Are you sure you want to restart the computer?", 0, "Restart", 0x1)
		switch ($msgBoxInput)
		{
			'1' {
				Restart-Computer $computerName -force
				$wshell.Popup("Restart request has been sent to the computer.", 0, "Success")
			}
			'2' {
			}
		}
	}
	
	function Shutdown-PC
	{
		$computerName = $computerTextBox1.Text
		logAction "Shutdown command sent to $computerName"
		$msgBoxInput = $wshell.Popup("Are you sure you want to shut down the computer?", 0, "Shut Down", 0x1)
		switch ($msgBoxInput)
		{
			'1' {
				Stop-Computer $computerName -force
				$wshell.Popup("Shut down request has been sent to the computer.", 0, "Success")
			}
			'2' {
			}
		}
	}
	
	function logOffAll
	{
		$computerName = $computerTextBox1.Text
		logAction "Log off all users sent to $computerName"
		$msgBoxInput = $wshell.Popup("Are you sure you want to log all users out of this computer?", 0, "Log Out All Users", 0x1)
		switch ($msgBoxInput)
		{
			'1' {
				(Get-WmiObject Win32_OperatingSystem -ComputerName $computerName).Win32Shutdown(4)
				$wshell.Popup("Request has been sent to log all users off.", 0, "Success")
			}
			'2' {
			}
		}
	}
	
	function DeleteCache
	{
		Remove-Item -path C:\Windows\ccmcache\* -Force -Recurse
		$OutPutGUI = "Deleted Cache"
	}
	
	function HardwareInventory
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000001}" /NOINTERACTIVE
	}
	function SoftwareInventory
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000002}" /NOINTERACTIVE
	}
	function DiscoveryInventory
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000003}" /NOINTERACTIVE
	}
	function FileCollection
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000010}" /NOINTERACTIVE
	}
	function IDMIFCollection
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000011}" /NOINTERACTIVE
	}
	function ClientMachineAuthentication
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000012}" /NOINTERACTIVE
	}
	function RequestMachineAssignments
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000021}" /NOINTERACTIVE
	}
	function EvaluateMachinePolicies
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000022}" /NOINTERACTIVE
	}
	function RefreshDefaultMPTask
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000023}" /NOINTERACTIVE
	}
	function LSRefreshLocationsTask
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000024}" /NOINTERACTIVE
	}
	function LSTimeoutRefreshTask
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000025}" /NOINTERACTIVE
	}
	function PolicyAgentRequestAssignment-U
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000026}" /NOINTERACTIVE
	}
	function PolicyAgentEvaluateAssignment-U
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000027}" /NOINTERACTIVE
	}
	function SoftwareMeteringGeneratingUsageReport
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000031}" /NOINTERACTIVE
	}
	function SourceUpdateMessage
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000032}" /NOINTERACTIVE
	}
	function ClearProxySettingsCache
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000037}" /NOINTERACTIVE
	}
	function MachinePolicyAgentCleanup
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000040}" /NOINTERACTIVE
	}
	function UserPolicyAgentCleanup
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000041}" /NOINTERACTIVE
	}
	function PolicyAgentValidateMachinePolicy-Assignment
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000042}" /NOINTERACTIVE
	}
	function PolicyAgentValidateUserPolicy-Assignment
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000043}" /NOINTERACTIVE
	}
	function Retrying-RefreshingcertificatesADMP
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000051}" /NOINTERACTIVE
	}
	function PeerDPStatusReporting
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000061}" /NOINTERACTIVE
	}
	function PeerDPPendingPackageCheckSchedule
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000062}" /NOINTERACTIVE
	}
	function SUMUpdatesInstallSchedule
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000063}" /NOINTERACTIVE
	}
	function NAPAction
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000071}" /NOINTERACTIVE
	}
	function HardwareInventoryCollectionCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000101}" /NOINTERACTIVE
	}
	function SoftwareInventoryCollectionCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000102}" /NOINTERACTIVE
	}
	function DiscoveryDataCollectionCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000103}" /NOINTERACTIVE
	}
	function FileCollectionCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000104}" /NOINTERACTIVE
	}
	function IDMIFCollectionCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000105}" /NOINTERACTIVE
	}
	function SoftwareMeteringUsageReportCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000106}" /NOINTERACTIVE
	}
	function WindowsInstallerSourceListUpdateCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000107}" /NOINTERACTIVE
	}
	function SoftwareUpdatesAssignmentsEvaluationCycle
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000108}" /NOINTERACTIVE
	}
	function BranchDistributionPointMaintenanceTask
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000109}" /NOINTERACTIVE
	}
	function DCMPolicy
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000110}" /NOINTERACTIVE
	}
	function SendUnsentStateMessage
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000111}" /NOINTERACTIVE
	}
	function StateSystemPolicyCacheCleanout
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000112}" /NOINTERACTIVE
	}
	function ScanByUpdateSource
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000113}" /NOINTERACTIVE
	}
	function UpdateStorePolicy
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000114}" /NOINTERACTIVE
	}
	function StateSystemPolicyBulkSendHigh
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000115}" /NOINTERACTIVE
	}
	function StateSystemPolicyBulkSendLow
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000116}" /NOINTERACTIVE
	}
	function AMTStatusCheckPolicy
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000120}" /NOINTERACTIVE
	}
	function ApplicationManagerPolicyAction
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000121}" /NOINTERACTIVE
	}
	function ApplicationManagerUserPolicyAction
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000122}" /NOINTERACTIVE
	}
	function ApplicationManagerGlobalEvaluationAction
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000123}" /NOINTERACTIVE
	}
	function PowerManagementStartSummarizer
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000131}" /NOINTERACTIVE
	}
	function EndpointDeploymentReevaluate
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000221}" /NOINTERACTIVE
	}
	function EndpointAMPolicyReevaluate
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000222}" /NOINTERACTIVE
	}
	function ExternalEventDetection
	{
		WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000223}" /NOINTERACTIVE
	}
	
	function ReloadSccmClient
	{
		cmd /c 'WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000021}" /NOINTERACTIVE'
		cmd /c 'WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000022}" /NOINTERACTIVE'
		$richtextbox3.Text += "`n Reloaded SCCM Client."
	}
	function RestartConfigMan
	{
		cmd /c "%SystemRoot%\ccm\ccmrestart.exe"
		$richtextbox3.Text += "`n Restarted Configuration Manager."
	}
	function ClientHealthEval
	{
		cmd /c "%SystemRoot%\ccm\ccmeval.exe"
		$richtextbox3.Text += "`n Ran Client Health Evaluation. Please wait some time for this to propogate."
	}
	function BackupSccmLogs
	{
		Robocopy "C:\Windows\CCM\Logs" C:\users\$env:UserName\Desktop\SccmLogs *.* /e
		$richtextbox3.Text += "`nLogs backed up to C:\users\$env:UserName\Desktop\SccmLogs"
		
	}
	function DeleteCache
	{
		Remove-Item -path C:\Windows\ccmcache\* -Force -Recurse
		Remove-Item -Path c:\Windows\CcmTemp\* -Force -Recurse
		$richtextbox3.Text += "`n Deleted all files in CcmCache and CcmTemp directories."
	}
	function TestWMIClient
	{
		$richtextbox3.Text += "`n This tests two commands. The first command is winmgmt /verifyrepository. Based off the outcome of this the script will vote to uninstall/reinstall WMI. The next command that runs is Get-CimInstance. If it fails it reports back an error and votes for a fix. If the script votes for a fix with either of the commands then it runs the uninstall/reinstall WMI commands so you do not have to. "
		$vote = 0
		$result = winmgmt /verifyrepository
		switch -wildcard ($result)
		{
			# Always fix if this returns inconsistent
			"*inconsistent*" { $vote = 100 } # English
			"*not consistent*"  { $vote = 100 } # English
			"*inkonsekvent*" { $vote = 100 } # Swedish
			"*epäyhtenäinen*" { $vote = 100 } # Finnish
			"*inkonsistent*" { $vote = 100 } # German
			# Add more languages as I learn their inconsistent value
			# Not needed but I am building a skillset so I wrote it out as I know it.
			
		}
		
		Try
		{
			if ($PowerShellVersion -ge 6) { $WMI = Get-CimInstance Win32_ComputerSystem -ErrorAction Stop }
			else { $WMI = Get-WmiObject Win32_ComputerSystem -ErrorAction Stop }
			
		}
		Catch
		{
			$richtextbox3.Text += "`nFailed to connect to WMI class Win32_ComputerSystem. Voting for WMI fix...'"
			$vote++
			
		}
		
		Try
		{
			if ($PowerShellVersion -ge 6) { $WMI = Get-CimInstance -Namespace root/ccm -Class SMS_Client -ErrorAction Stop }
			else { $WMI = Get-WmiObject -Namespace root/ccm -Class SMS_Client -ErrorAction Stop }
			
		}
		Catch
		{
			$richtextbox3.Text += "`nFailed to connect to WMI namespace root ccm class SMS_Client. Tagging client for reinstall instead of WMI fix."
			$obj = $true
			
		}
		Finally
		{
			if ($vote -eq 0)
			{
				$richtextbox3.Text += "`nWMI Check: OK"
				$obj = $false
				
			}
			else
			{
				$fix = Get-XMLConfigWMIRepairEnable
				if ($fix -like "True")
				{
					$richtextbox3.Text += "`nWMI Check: Corrupt. Attempting to repair WMI and reinstall ConfigMgr client."
					Write-Warning $text
					rebuildWMI
				}
				else
				{
					$richtextbox3.Text += "`nWMI Check: Corrupt. Autofix is disabled"
					Write-Warning $text
					
				}
				$richtextbox3.Text += "`nReturning true to tag client for reinstall"
				$obj = $true
				
			}
			#Out-LogFile -Xml $xml -Text $text
			#Write-Output $obj
			
		}
	}
	
	
	$buttonHPWarranty_Click={
		Start-Process "https://support.hp.com/us-en/checkwarranty"
	}
	
	$buttonDellWarranty_Click={
		Start-Process "https://www.dell.com/support/home/us/en/04/Products/?app=warranty"
	}
	
	$buttonTechDirect_Click={
		Start-Process "https://techdirect.dell.com/Portal/Login.aspx?ReturnUrl=%2fPortal%2f"
	}
	
	$buttonHPDrivers_Click={
		Start-Process "https://support.hp.com/us-en/drivers"
	}
	
	$buttonDellDrivers_Click={
		Start-Process "https://www.dell.com/support/home/us/en/19?app=drivers&mkwid=syxHCJpLb&pcrid=337999471626&pkw=dell%20drivers&pmt=e&pdv=c&slid=&product=&pgrid=64110719747&pgrid=64110719747&ptaid=aud-303408927813:kwd-16103180&ptaid=aud-303408927813:kwd-16103180&VEN1=syxHCJpLb, 337999471626, 901pdb6671, c,,, 64110719747, aud-303408927813:kwd-16103180&VEN1=syxHCJpLb, 337999471626, 901pdb6671, c,,, 64110719747, aud-303408927813:kwd-16103180&VEN2=e, dell%20drivers&VEN2=e, dell%20drivers&cid=298252046&cid=298252046&lid=57027020856&lid=57027020856&dgc=st&dgc=st&dgseg=dhs&dgseg=dhs&acd=123098073120560&acd=123098073120560&st=dell%20drivers&gclid=Cj0KCQjw_OzrBRDmARIsAAIdQ_JbaOFAimVApAVAHXXc8NfXUyA93Rq8cKUNUgU1urILrObDPw_4TAsaAmcWEALw_wcB&VEN3=811204973826173417"
	}
	
	$linklabelBuyingMeATea_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		Start-Process "https://www.buymeacoffee.com/mwWXAyznc"
	}
	
	$buttonWebsite_Click={
		Start-Process "https://www.sosfla.com/"
	}
	
	$buttonEncodeImage_Click={
		ConvertImage
	}
	
	$buttonDecodeImage_Click={
		decodeImage
	}
	
	$buttonConvert_Click={
		$SecureStringAsPlainText = $textbox1.Text | ConvertTo-SecureString -AsPlainText -Force
		#Convert SecureString to secure plain text repersentation
		$richtextbox1.Text = $SecureStringAsPlainText | ConvertFrom-SecureString
	}
	
	$buttonEncode64_Click={
		encodeAll
	}
	
	$buttonDecode64_Click={
		decodeAll
	}
	
	$buttonFindESC_Click={
		Find-ESC
	}
	
	$buttonFindST_Click={
		Find-ST
	}
	
	$buttonRestartConfigMan_Click={
		RestartConfigMan
	}
	
	$buttonRunMachinePolicy_Click={
		ReloadSccmClient
	}
	
	$buttonClientHealthEval_Click={
		ClientHealthEval
	}
	
	$buttonSCCMLogs_Click={
		BackupSccmLogs
	}
	
	$buttonCCMSetupLog_Click={
		$FileLocation = 'C:\Windows\ccmsetup\Logs\ccmsetup.log'
		Start-Process C:\WINDOWS\CCM\CMTrace.exe $FileLocation
	}
	
	$buttonRepairSCCM_Click={
		CcmRepair1
	}
	
	$buttonInstallSCCM_Click={
		InstallSCCM
	}
	
	$buttonCheckSCCM_Click={
		CCMSQLCELog
	}
	
	$buttonCCMRepairLog_Click={
		$FileLocation = 'C:\Windows\CCM\Logs\CcmRepair.log'
		Start-Process C:\WINDOWS\CCM\CMTrace.exe $FileLocation
	}
	
	$buttonCMTrace_Click={
		cmTrace
		Invoke-Item C:\Windows\CCM\Logs
	}
	
	$buttonUninstallSCCM_Click={
		DeleteSCCM
	}
	
	$buttonDelSCCMCache_Click={
		DeleteCache
	}
	
	$buttonCheckWMI_Click={
		TestWMIClient
	}
	
	$buttonSalvageRepo_Click={
		CcmRestart
	}
	
	$buttonResetRepo_Click={
		ResetRepo
	}
	
	$buttonUninstallReinstall_Click={
		rebuildWMI
	}
	
	$buttonInventory_Click={
		Get-Inventory
		runInventory
	}
	
	$buttonBackup_Click={
		backupDirectory
	}
	
	$systemInformationToolStripMenuItem_Click={
		Show-Computerinfo_psf | Out-Null
	}
	function Show-AboutForm_psf
	{
		
		#----------------------------------------------
		#region Import the Assemblies
		#----------------------------------------------
		[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
		[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
		#endregion Import Assemblies
		
		#----------------------------------------------
		#region Generated Form Objects
		#----------------------------------------------
		[System.Windows.Forms.Application]::EnableVisualStyles()
		$formAboutTheAuthor = New-Object 'System.Windows.Forms.Form'
		$linklabelBuyMeATea = New-Object 'System.Windows.Forms.LinkLabel'
		$labelLikeThisTool = New-Object 'System.Windows.Forms.Label'
		$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
		$labelAlannewinghamgmailco = New-Object 'System.Windows.Forms.Label'
		$labelEmail = New-Object 'System.Windows.Forms.Label'
		$labelAlanNewingham = New-Object 'System.Windows.Forms.Label'
		$labelAuthor = New-Object 'System.Windows.Forms.Label'
		$buttonOK = New-Object 'System.Windows.Forms.Button'
		$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
		#endregion Generated Form Objects
		
		#----------------------------------------------
		# User Generated Script
		#----------------------------------------------
		
		$formAboutTheAuthor_Load = {
			#TODO: Initialize Form Controls here
			
		}
		
		$linklabelBuyMeATea_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
			#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
			#TODO: Place custom script here
			Start-Process "https://www.buymeacoffee.com/mwWXAyznc"
		}
		
		# --End User Generated Script--
		#----------------------------------------------
		#region Generated Events
		#----------------------------------------------
		
		$Form_StateCorrection_Load =
		{
			#Correct the initial state of the form to prevent the .Net maximized form issue
			$formAboutTheAuthor.WindowState = $InitialFormWindowState
		}
		
		$Form_Cleanup_FormClosed =
		{
			#Remove all event handlers from the controls
			try
			{
				$linklabelBuyMeATea.remove_LinkClicked($linklabelBuyMeATea_LinkClicked)
				$formAboutTheAuthor.remove_Load($formAboutTheAuthor_Load)
				$formAboutTheAuthor.remove_Load($Form_StateCorrection_Load)
				$formAboutTheAuthor.remove_FormClosed($Form_Cleanup_FormClosed)
			}
			catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		}
		#endregion Generated Events
		
		#----------------------------------------------
		#region Generated Form Code
		#----------------------------------------------
		$formAboutTheAuthor.SuspendLayout()
		$picturebox1.BeginInit()
		#
		# formAboutTheAuthor
		#
		$formAboutTheAuthor.Controls.Add($linklabelBuyMeATea)
		$formAboutTheAuthor.Controls.Add($labelLikeThisTool)
		$formAboutTheAuthor.Controls.Add($picturebox1)
		$formAboutTheAuthor.Controls.Add($labelAlannewinghamgmailco)
		$formAboutTheAuthor.Controls.Add($labelEmail)
		$formAboutTheAuthor.Controls.Add($labelAlanNewingham)
		$formAboutTheAuthor.Controls.Add($labelAuthor)
		$formAboutTheAuthor.Controls.Add($buttonOK)
		$formAboutTheAuthor.AcceptButton = $buttonOK
		$formAboutTheAuthor.AutoScaleDimensions = '6, 13'
		$formAboutTheAuthor.AutoScaleMode = 'Font'
		$formAboutTheAuthor.ClientSize = '284, 262'
		$formAboutTheAuthor.FormBorderStyle = 'FixedDialog'
		$formAboutTheAuthor.MaximizeBox = $False
		$formAboutTheAuthor.MinimizeBox = $False
		$formAboutTheAuthor.Name = 'formAboutTheAuthor'
		$formAboutTheAuthor.StartPosition = 'CenterScreen'
		$formAboutTheAuthor.Text = 'About the Author'
		$formAboutTheAuthor.add_Load($formAboutTheAuthor_Load)
		#
		# linklabelBuyMeATea
		#
		$linklabelBuyMeATea.Location = '84, 236'
		$linklabelBuyMeATea.Name = 'linklabelBuyMeATea'
		$linklabelBuyMeATea.Size = '100, 17'
		$linklabelBuyMeATea.TabIndex = 8
		$linklabelBuyMeATea.TabStop = $True
		$linklabelBuyMeATea.Text = 'Buy me a tea!'
		$linklabelBuyMeATea.UseCompatibleTextRendering = $True
		$linklabelBuyMeATea.add_LinkClicked($linklabelBuyMeATea_LinkClicked)
		#
		# labelLikeThisTool
		#
		$labelLikeThisTool.AutoSize = $True
		$labelLikeThisTool.Location = '7, 236'
		$labelLikeThisTool.Name = 'labelLikeThisTool'
		$labelLikeThisTool.Size = '76, 17'
		$labelLikeThisTool.TabIndex = 7
		$labelLikeThisTool.Text = 'Like this tool? '
		$labelLikeThisTool.UseCompatibleTextRendering = $True
		#
		# picturebox1
		#
		#region Binary Data
		$picturebox1.Image = [System.Convert]::FromBase64String('
R0lGODlhdAB0AIcAAAAAAAAAMwAAZgAAmQAAzAAA/wArAAArMwArZgArmQArzAAr/wBVAABVMwBV
ZgBVmQBVzABV/wCAAACAMwCAZgCAmQCAzACA/wCqAACqMwCqZgCqmQCqzACq/wDVAADVMwDVZgDV
mQDVzADV/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMrADMrMzMrZjMrmTMr
zDMr/zNVADNVMzNVZjNVmTNVzDNV/zOAADOAMzOAZjOAmTOAzDOA/zOqADOqMzOqZjOqmTOqzDOq
/zPVADPVMzPVZjPVmTPVzDPV/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2Yr
AGYrM2YrZmYrmWYrzGYr/2ZVAGZVM2ZVZmZVmWZVzGZV/2aAAGaAM2aAZmaAmWaAzGaA/2aqAGaq
M2aqZmaqmWaqzGaq/2bVAGbVM2bVZmbVmWbVzGbV/2b/AGb/M2b/Zmb/mWb/zGb//5kAAJkAM5kA
ZpkAmZkAzJkA/5krAJkrM5krZpkrmZkrzJkr/5lVAJlVM5lVZplVmZlVzJlV/5mAAJmAM5mAZpmA
mZmAzJmA/5mqAJmqM5mqZpmqmZmqzJmq/5nVAJnVM5nVZpnVmZnVzJnV/5n/AJn/M5n/Zpn/mZn/
zJn//8wAAMwAM8wAZswAmcwAzMwA/8wrAMwrM8wrZswrmcwrzMwr/8xVAMxVM8xVZsxVmcxVzMxV
/8yAAMyAM8yAZsyAmcyAzMyA/8yqAMyqM8yqZsyqmcyqzMyq/8zVAMzVM8zVZszVmczVzMzV/8z/
AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8rAP8rM/8rZv8rmf8rzP8r//9VAP9V
M/9VZv9Vmf9VzP9V//+AAP+AM/+AZv+Amf+AzP+A//+qAP+qM/+qZv+qmf+qzP+q///VAP/VM//V
Zv/Vmf/VzP/V////AP//M///Zv//mf//zP///wAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEB
AAAh+QQBAAD8ACwAAAAAdAB0AAAI/wABCBxIsKDBg/sS7jvIsKDChxAjJiT4kKLChhgzatwIoCJH
hxJDehQ4suPFjyhTIjypUqTLhQNLllRJ8+NMmy9DWpwYk2XNhjl19oy4EybJoDyPJjXpsijSpU6f
Rl0qU+pQo0xFTg3K8CnErUW3ClWKNafYl129+hyb9SzRq27LqoUKN2PVt2TD1sXI9i7WtHTz2l0r
Ua/gw0AL7207ODBjvoTxPp5802DfyH9XOq4MkqpixH41Xvbs2HDnzJYxA5YrWbRVxKtjN2aNmvLn
jV5Ny05dejFnv5xXm128+7Rr0rWB+zzOlbjm5Muf6/4JOjpv2syLFw9OM/Ts6de1S/93Tt07ZOTZ
x5/HTt04efew1Z/O/d584tZXlSMV/nqyae5k/XbbXJsRCJ5tvQVoXVb6NXcdffFVlyCDC46mVnv3
sSehhghyiOGHvqkWInoj1gZieSJu+F+K/p2IoX0wsmjfiwQOp+B++bEYV408opUjjjd6+GOPRNpI
IZBHChlkkUwOaOCQBzYpmZEAughfiy3dFteBVspXJXMCNvVel+GNiRN+S+pI5nYLomSheBuGyeOa
6ZVpZ5L8zUXnd/KtiGaSEO7ZZ32YyVmjoLhpWSKYbS46aJp/suWniVDyGSGWgCoaJJsTSuplhaAi
CdannWp6pZx5ajVbg55eWiWqZ1L/+mChPt7JJaET3jorckZG2airv17JKK+1CmsmsLkem+iUtEba
36SBfllpnKYGCm1/0m5aYquZOkssktniuW21z44LbrMcGhrspKmu+SauX8Xq6580MkvirrKeGmq8
Xb6LLL/LKikuiIeS2etzr+67o6n1qrpewgV+66CVB+Nbp756Glxsu5Yaa/GQEKdLrr0XxspqsDF6
C3DBHFnILbvTzoduxRmeXOq9A8ssMc1FLpzsneruPPOTkALsppraFu3zxNbKC6/NtPUMMsMdBx21
kzhfzDPRHR59c77Xqhwt0hlerPXGU4upotPreX212NiSDWe3DusMdnsuxy202nYj9pr3uXvXPeqe
fzM9NN+D01k4lejOO7HZHTtuteRot822xzknbvXLj5bdObf+2s25rZE/vS68MLeMtcBuh8wp6wjL
ePrDKCvsqOok6xqw66TC/vHaKJIsJXQ/d73q6osTOffrw65c7PCw4u473VumPWfnzB8vPNXB3610
7BFPH67brY9s9O2e9zs79eATL/765JtsfvSYUg6487n3nmqDYRu+fdboq17SOjS2/wlsRtbT3OHq
VjjH2Q9/ENQdAr9Hu+KVL3+W+9foMncixn3tgSEbn/wwmD5M0SxxLvJgvqA2uZglj28TxNjjXIi8
BYaOd0Vr4QBfyHFAuZlLcDQ04NJStsLGme6D2juf9M5GQhRiL4HdqZ3EHgg5fInwUv2jYumsCD/r
8RCHopOi+5qnwhMeUYmYC6HeZkg6CpZQglxrWhvZl0HMpdCIOTRfw3QXvx1yjY9V62Idv6hHvPkw
S1P0YiG7V5SAAAA7')
		#endregion
		$picturebox1.Location = '84, 36'
		$picturebox1.Name = 'picturebox1'
		$picturebox1.Size = '116, 116'
		$picturebox1.TabIndex = 6
		$picturebox1.TabStop = $False
		#
		# labelAlannewinghamgmailco
		#
		$labelAlannewinghamgmailco.AutoSize = $True
		$labelAlannewinghamgmailco.Location = '50, 216'
		$labelAlannewinghamgmailco.Name = 'labelAlannewinghamgmailco'
		$labelAlannewinghamgmailco.Size = '150, 17'
		$labelAlannewinghamgmailco.TabIndex = 4
		$labelAlannewinghamgmailco.Text = 'alan.newingham@gmail.com'
		$labelAlannewinghamgmailco.UseCompatibleTextRendering = $True
		#
		# labelEmail
		#
		$labelEmail.AutoSize = $True
		$labelEmail.Location = '7, 216'
		$labelEmail.Name = 'labelEmail'
		$labelEmail.Size = '36, 17'
		$labelEmail.TabIndex = 3
		$labelEmail.Text = 'Email:'
		$labelEmail.UseCompatibleTextRendering = $True
		#
		# labelAlanNewingham
		#
		$labelAlanNewingham.AutoSize = $True
		$labelAlanNewingham.Location = '50, 199'
		$labelAlanNewingham.Name = 'labelAlanNewingham'
		$labelAlanNewingham.Size = '90, 17'
		$labelAlanNewingham.TabIndex = 2
		$labelAlanNewingham.Text = 'Alan Newingham'
		$labelAlanNewingham.UseCompatibleTextRendering = $True
		#
		# labelAuthor
		#
		$labelAuthor.AutoSize = $True
		$labelAuthor.Location = '7, 199'
		$labelAuthor.Name = 'labelAuthor'
		$labelAuthor.Size = '41, 17'
		$labelAuthor.TabIndex = 1
		$labelAuthor.Text = 'Author:'
		$labelAuthor.UseCompatibleTextRendering = $True
		#
		# buttonOK
		#
		$buttonOK.Anchor = 'Bottom, Right'
		$buttonOK.DialogResult = 'OK'
		$buttonOK.Location = '206, 228'
		$buttonOK.Name = 'buttonOK'
		$buttonOK.Size = '75, 23'
		$buttonOK.TabIndex = 0
		$buttonOK.Text = '&OK'
		$buttonOK.UseCompatibleTextRendering = $True
		$buttonOK.UseVisualStyleBackColor = $True
		$picturebox1.EndInit()
		$formAboutTheAuthor.ResumeLayout()
		#endregion Generated Form Code
		
		#----------------------------------------------
		
		#Save the initial state of the form
		$InitialFormWindowState = $formAboutTheAuthor.WindowState
		#Init the OnLoad event to correct the initial state of the form
		$formAboutTheAuthor.add_Load($Form_StateCorrection_Load)
		#Clean up the control events
		$formAboutTheAuthor.add_FormClosed($Form_Cleanup_FormClosed)
		#Show the Form
		return $formAboutTheAuthor.ShowDialog()
		
	} #End Function
	
	
	$aboutTheToolToolStripMenuItem_Click={
		
		
		#Call the form
		Show-AboutForm_psf | Out-Null
		
	}
	
	function scrapeAD
	{
		<#
	Retrieves computers in AD then creates an html report.
	#>
		
		$reportPath = $PSScriptRoot + "C:\ActiveDirectoryComputers.html"
		
		$servers = Get-ADComputer -Filter *
		
		$serversHtml = $servers | Select-Object DNSHostName, Enabled, Name, ObjectClass, ObjectGUID, SamAccountName | ConvertTo-Html -Fragment -PreContent "<h2>Active Directory Computers</h2>"
		
		
		$head = @"
	<title>AD Computer List</title>
	<style>
		body {
			background-color: #FFFFFF;
			font-family: sans-serif;
		}
		h1 {
			color: #1E87F0;
		}
		h2 {
			color: #1E87F0;
		}
		table {
			background-color: #1E87F0;
		}
		td {
			background-color: #FFFFFF;
			color: #666666;
			padding: 3px;
		}
		th {
			background-color: #1E87F0;
			color: #FFFFFF;
			text-align: left;
			padding: 3px;
		}
	</style>
"@
		
		
		ConvertTo-Html -Head $head -Body $serversHtml | Out-File $reportPath
	}
	
	
	$buttonRunInventory_Click={
		runInventory
	}
	
	$buttonRunLAPS_Click={
		runLAPS
	}
	
	$buttonDevMode_Click={
		reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"
	}
	
	$buttonScrapeAD_Click={
		scrapeAD
	}
	
	$buttonADUC_Click={
		Start-Process -FilePath "C:\Windows\system32\dsa.msc" -Verb RunAs
	}
	
	$buttonComputerManagement_Click={
		Start-Process -FilePath "C:\Windows\system32\compmgmt.msc" -Verb RunAs
	}
	
	$buttonDeviceManager_Click={
		Start-Process -FilePath "C:\Windows\system32\devmgmt.msc" -Verb RunAs
	}
	
	$buttonSCCM_Click={
		Start-Process -FilePath "C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\Microsoft.ConfigurationManagement.exe" -Verb RunAs
	}
	
	$buttonRegedit_Click={
		Start-Process -FilePath "C:\Windows\regedit.exe" -Verb RunAs
	}
	
	$buttonControlPanel_Click={
		control
	}
	
	$buttonSCCMRemoteControl_Click={
		Start-Process -FilePath "C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\i386\CmRcViewer.exe" -Verb RunAs
	}
	
	$buttonPrintManagement_Click={
		Start-Process -FilePath "C:\Windows\system32\printmanagement.msc" -Verb RunAs
	}
	
	
	
	$buttonProgramList_Click={
		Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -AutoSize > C:\InstalledPrograms.txt
		Invoke-Item -Path C:\InstalledPrograms.txt
	}
	
	$buttonWinSysInfo_Click={
		[system.Diagnostics.Process]::start("msinfo32")
	}
	
	$buttonSCCMReports_Click={
		[system.Diagnostics.Process]::start("https://")
	}
	
	$buttonButton7_Click={
		Start-Process "https://www.dell.com/support/home/us/en/04/Products/?app=warranty"
	}
	
	$buttonButton8_Click={
		Start-Process "https://support.hp.com/us-en/checkwarranty"
	}
	
	$buttonDeleteSCCMCache_Click={
		DeleteCache
	}
	
	$aboutLifeToolStripMenuItem_Click={
		aboutLife
	}
	
	$aboutTheAuthorToolStripMenuItem_Click={
		#Call the form
		Show-AboutForm_psf | Out-Null
	}
	
	$buttonSearch_Click={
		$TicketNumber = $textbox12.Text
		Start-Process ".aspx?TicketID=$TicketNumber"
	}
	
	$computername = $env:COMPUTERNAME
	$DomainName = ''
	
	function testPassword
	{
		$passwordSyncStatus = Test-ComputerSecureChannel
		$richtextbox5.Text = $passwordSyncStatus
	}
	
	function repairPassword
	{
		$repairPasswordSync = Test-ComputerSecureChannel -Repair -Credential (Get-Credential)
		$richtextbox5.Text = $repairPasswordSync
	}
	
	function unJoinComputerRemote
	{
		
		
		$instance = Get-CimInstance -ComputerName $textbox3.Text -ClassName 'Win32_ComputerSystem'
		$SecureStringAsPlainText1 = $textbox13.Text | ConvertTo-SecureString -AsPlainText -Force
		$invCimParams = @{
			MethodName = 'UnjoinDomainOrWorkGroup'
			Arguments  = @{ FUnjoinOptions = 0; Username = $textbox14.Text; Password = $SecureStringAsPlainText1 }
		}
		$instance | Invoke-CimMethod @invCimParams
	}
	
	#requires -Version 3
	#------------------------------------------------------------------------
	# Source File Information (DO NOT MODIFY)
	# Source ID: 93360277-dc32-4270-85e6-276e928cd539
	# Source File: C:\Users\Newingha\Documents\SAPIEN\PowerShell Studio\Files\ConfigurationManagerActions-popupwindow.psf
	#------------------------------------------------------------------------
	
	<#
	    .NOTES
	    --------------------------------------------------------------------------------
	     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.167
	     Generated on:       9/20/2019 8:43 AM
	     Generated by:       Support.newingha
	    --------------------------------------------------------------------------------
	    .DESCRIPTION
	        GUI script generated by PowerShell Studio 2019
	#>
	
	
	#----------------------------------------------
	#region Application Functions
	#----------------------------------------------
	
	#endregion Application Functions
	
	#----------------------------------------------
	# Generated Form Function
	#----------------------------------------------
	function Show-ConfigurationManagerActions-popupwindow_psf
	{
		
		#----------------------------------------------
		#region Import the Assemblies
		#----------------------------------------------
		[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
		[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
		#endregion Import Assemblies
		
		#----------------------------------------------
		#region Generated Form Objects
		#----------------------------------------------
		[System.Windows.Forms.Application]::EnableVisualStyles()
		$formConfigurationManager = New-Object 'System.Windows.Forms.Form'
		$buttonExternalEventDetecti = New-Object 'System.Windows.Forms.Button'
		$labelClickOnTheActionYouW = New-Object 'System.Windows.Forms.Label'
		$buttonEndpointAMPolicyReev = New-Object 'System.Windows.Forms.Button'
		$buttonEndpointDeploymentRe = New-Object 'System.Windows.Forms.Button'
		$buttonSendUnsentStateMessa = New-Object 'System.Windows.Forms.Button'
		$buttonDCMPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonSUMUpdatesInstallSch = New-Object 'System.Windows.Forms.Button'
		$buttonPendingPackageCheckS = New-Object 'System.Windows.Forms.Button'
		$buttonPolicyAgentRequestAs = New-Object 'System.Windows.Forms.Button'
		$buttonLSTimeoutRefresh = New-Object 'System.Windows.Forms.Button'
		$buttonPowerManagementStart = New-Object 'System.Windows.Forms.Button'
		$buttonAppManagerGlobalEval = New-Object 'System.Windows.Forms.Button'
		$buttonAppManagerUserPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonApplicationManagerPo = New-Object 'System.Windows.Forms.Button'
		$buttonAMTStatusCheckPolicy = New-Object 'System.Windows.Forms.Button'
		$button26 = New-Object 'System.Windows.Forms.Button'
		$buttonStateSystemPolicyBul = New-Object 'System.Windows.Forms.Button'
		$buttonUpdateStorePolicy = New-Object 'System.Windows.Forms.Button'
		$buttonScanByUpdateSource = New-Object 'System.Windows.Forms.Button'
		$buttonStateSystemPolicyCle = New-Object 'System.Windows.Forms.Button'
		$buttonBranchDistributionPo = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareUpdatesAssig = New-Object 'System.Windows.Forms.Button'
		$buttonWindowsInstallerSour = New-Object 'System.Windows.Forms.Button'
		$button14 = New-Object 'System.Windows.Forms.Button'
		$buttonIDMIFCollectionCycle = New-Object 'System.Windows.Forms.Button'
		$buttonFileCollectionCycle = New-Object 'System.Windows.Forms.Button'
		$buttonDiscoveryDataCollect = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareInventoryCol = New-Object 'System.Windows.Forms.Button'
		$buttonHardwareInventoryCol = New-Object 'System.Windows.Forms.Button'
		$buttonNAPAction = New-Object 'System.Windows.Forms.Button'
		$buttonPeerDPStatusReportin = New-Object 'System.Windows.Forms.Button'
		$buttonRetryRefreshingCerti = New-Object 'System.Windows.Forms.Button'
		$buttonValidateUserPolicy = New-Object 'System.Windows.Forms.Button'
		$buttonValidateMachinePolic = New-Object 'System.Windows.Forms.Button'
		$buttonUserPolicyAgentClean = New-Object 'System.Windows.Forms.Button'
		$buttonMachinePolicyAgentCl = New-Object 'System.Windows.Forms.Button'
		$buttonClearProxySettingsCa = New-Object 'System.Windows.Forms.Button'
		$buttonSourceUpdateMessage = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareMeteringUsag = New-Object 'System.Windows.Forms.Button'
		$buttonPolicyAgentEvaluateA = New-Object 'System.Windows.Forms.Button'
		$buttonLSRefreshLocations = New-Object 'System.Windows.Forms.Button'
		$buttonRefreshDefaultMPTask = New-Object 'System.Windows.Forms.Button'
		$buttonEvaluateMachinePolic = New-Object 'System.Windows.Forms.Button'
		$buttonMachineAssignments = New-Object 'System.Windows.Forms.Button'
		$buttonClientMachineAuthent = New-Object 'System.Windows.Forms.Button'
		$buttonIDMIFCollection = New-Object 'System.Windows.Forms.Button'
		$buttonFileCollection = New-Object 'System.Windows.Forms.Button'
		$buttonDiscoveryInventory = New-Object 'System.Windows.Forms.Button'
		$buttonSoftwareInventory = New-Object 'System.Windows.Forms.Button'
		$buttonHardwareInventory = New-Object 'System.Windows.Forms.Button'
		$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
		#endregion Generated Form Objects
		
		#----------------------------------------------
		# User Generated Script
		#----------------------------------------------
		
		#The function Parade
		function HardwareInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000001}" /NOINTERACTIVE
		}
		function SoftwareInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000002}" /NOINTERACTIVE
		}
		function DiscoveryInventory
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000003}" /NOINTERACTIVE
		}
		function FileCollection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000010}" /NOINTERACTIVE
		}
		function IDMIFCollection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000011}" /NOINTERACTIVE
		}
		function ClientMachineAuthentication
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000012}" /NOINTERACTIVE
		}
		function RequestMachineAssignments
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000021}" /NOINTERACTIVE
		}
		function EvaluateMachinePolicies
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000022}" /NOINTERACTIVE
		}
		function RefreshDefaultMPTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000023}" /NOINTERACTIVE
		}
		function LSRefreshLocationsTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000024}" /NOINTERACTIVE
		}
		function LSTimeoutRefreshTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000025}" /NOINTERACTIVE
		}
		function PolicyAgentRequestAssignment-U
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000026}" /NOINTERACTIVE
		}
		function PolicyAgentEvaluateAssignment-U
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000027}" /NOINTERACTIVE
		}
		function SoftwareMeteringGeneratingUsageReport
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000031}" /NOINTERACTIVE
		}
		function SourceUpdateMessage
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000032}" /NOINTERACTIVE
		}
		function ClearProxySettingsCache
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000037}" /NOINTERACTIVE
		}
		function MachinePolicyAgentCleanup
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000040}" /NOINTERACTIVE
		}
		function UserPolicyAgentCleanup
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000041}" /NOINTERACTIVE
		}
		function PolicyAgentValidateMachinePolicy-Assignment
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000042}" /NOINTERACTIVE
		}
		function PolicyAgentValidateUserPolicy-Assignment
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000043}" /NOINTERACTIVE
		}
		function Retrying-RefreshingcertificatesADMP
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000051}" /NOINTERACTIVE
		}
		function PeerDPStatusReporting
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000061}" /NOINTERACTIVE
		}
		function PeerDPPendingPackageCheckSchedule
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000062}" /NOINTERACTIVE
		}
		function SUMUpdatesInstallSchedule
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000063}" /NOINTERACTIVE
		}
		function NAPAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000071}" /NOINTERACTIVE
		}
		function HardwareInventoryCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000101}" /NOINTERACTIVE
		}
		function SoftwareInventoryCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000102}" /NOINTERACTIVE
		}
		function DiscoveryDataCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000103}" /NOINTERACTIVE
		}
		function FileCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000104}" /NOINTERACTIVE
		}
		function IDMIFCollectionCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000105}" /NOINTERACTIVE
		}
		function SoftwareMeteringUsageReportCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000106}" /NOINTERACTIVE
		}
		function WindowsInstallerSourceListUpdateCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000107}" /NOINTERACTIVE
		}
		function SoftwareUpdatesAssignmentsEvaluationCycle
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000108}" /NOINTERACTIVE
		}
		function BranchDistributionPointMaintenanceTask
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000109}" /NOINTERACTIVE
		}
		function DCMPolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000110}" /NOINTERACTIVE
		}
		function SendUnsentStateMessage
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000111}" /NOINTERACTIVE
		}
		function StateSystemPolicyCacheCleanout
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000112}" /NOINTERACTIVE
		}
		function ScanByUpdateSource
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000113}" /NOINTERACTIVE
		}
		function UpdateStorePolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000114}" /NOINTERACTIVE
		}
		function StateSystemPolicyBulkSendHigh
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000115}" /NOINTERACTIVE
		}
		function StateSystemPolicyBulkSendLow
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000116}" /NOINTERACTIVE
		}
		function AMTStatusCheckPolicy
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000120}" /NOINTERACTIVE
		}
		function ApplicationManagerPolicyAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000121}" /NOINTERACTIVE
		}
		function ApplicationManagerUserPolicyAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000122}" /NOINTERACTIVE
		}
		function ApplicationManagerGlobalEvaluationAction
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000123}" /NOINTERACTIVE
		}
		function PowerManagementStartSummarizer
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000131}" /NOINTERACTIVE
		}
		function EndpointDeploymentReevaluate
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000221}" /NOINTERACTIVE
		}
		function EndpointAMPolicyReevaluate
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000222}" /NOINTERACTIVE
		}
		function ExternalEventDetection
		{
			WMIC /namespace:\\root\ccm path sms_client CALL TriggerSchedule "{00000000-0000-0000-0000-000000000223}" /NOINTERACTIVE
		}
		
		
		
		
		$formConfigurationManager_Load = {
			#TODO: Initialize Form Controls here
			
		}
		
		$buttonSoftwareMeteringUsag_Click = {
			SoftwareMeteringUsageReportCycle
		}
		
		$buttonValidateMachinePolic_Click = {
			PolicyAgentValidateMachinePolicy-Assignment
		}
		
		$buttonHardwareInventory_Click = {
			HardwareInventory
		}
		
		$buttonSoftwareInventory_Click = {
			SoftwareInventory
		}
		
		$buttonDiscoveryInventory_Click = {
			DiscoveryInventory
		}
		
		$buttonFileCollection_Click = {
			FileCollection
		}
		
		$buttonIDMIFCollection_Click = {
			IDMIFCollection
		}
		
		$buttonClientMachineAuthent_Click = {
			ClientMachineAuthentication
		}
		
		$buttonMachineAssignments_Click = {
			RequestMachineAssignments
		}
		
		$buttonEvaluateMachinePolic_Click = {
			EvaluateMachinePolicies
		}
		
		$buttonRefreshDefaultMPTask_Click = {
			RefreshDefaultMPTask
		}
		
		$buttonLSRefreshLocations_Click = {
			LSRefreshLocationsTask
		}
		
		$buttonLSTimeoutRefresh_Click = {
			LSTimeoutRefreshTask
		}
		
		$buttonPolicyAgentRequestAs_Click = {
			PolicyAgentRequestAssignment-U
		}
		
		$buttonPolicyAgentEvaluateA_Click = {
			PolicyAgentEvaluateAssignment-U
		}
		
		$buttonSourceUpdateMessage_Click = {
			SourceUpdateMessage
		}
		
		$buttonClearProxySettingsCa_Click = {
			ClearProxySettingsCache
		}
		
		$buttonUserPolicyAgentClean_Click = {
			MachinePolicyAgentCleanup
		}
		
		$buttonValidateUserPolicy_Click = {
			PolicyAgentValidateUserPolicy-Assignment
		}
		
		$buttonRetryRefreshingCerti_Click = {
			Retrying-RefreshingcertificatesADMP
		}
		
		$buttonPeerDPStatusReportin_Click = {
			PeerDPStatusReporting
		}
		
		$buttonPendingPackageCheckS_Click = {
			PeerDPPendingPackageCheckSchedule
		}
		
		$buttonSUMUpdatesInstallSch_Click = {
			SUMUpdatesInstallSchedule
		}
		
		$buttonNAPAction_Click = {
			NAPAction
		}
		
		$buttonHardwareInventoryCol_Click = {
			HardwareInventoryCollectionCycle
		}
		
		$buttonSoftwareInventoryCol_Click = {
			SoftwareInventoryCollectionCycle
		}
		
		$buttonDiscoveryDataCollect_Click = {
			DiscoveryDataCollectionCycle
		}
		
		$buttonFileCollectionCycle_Click = {
			FileCollectionCycle
		}
		
		$buttonIDMIFCollectionCycle_Click = {
			IDMIFCollectionCycle
		}
		
		$button14_Click = {
			SoftwareMeteringUsageReportCycle
		}
		
		$buttonWindowsInstallerSour_Click = {
			WindowsInstallerSourceListUpdateCycle
		}
		
		$buttonSoftwareUpdatesAssig_Click = {
			SoftwareUpdatesAssignmentsEvaluationCycle
		}
		
		$buttonMachinePolicyAgentCl_Click = {
			MachinePolicyAgentCleanup
		}
		
		$buttonBranchDistributionPo_Click = {
			BranchDistributionPointMaintenanceTask
		}
		
		$buttonDCMPolicy_Click = {
			DCMPolicy
		}
		
		$buttonSendUnsentStateMessa_Click = {
			SendUnsentStateMessage
		}
		
		$buttonStateSystemPolicyCle_Click = {
			StateSystemPolicyCacheCleanout
		}
		
		$buttonScanByUpdateSource_Click = {
			ScanByUpdateSource
		}
		
		$buttonUpdateStorePolicy_Click = {
			UpdateStorePolicy
		}
		
		$buttonStateSystemPolicyBul_Click = {
			StateSystemPolicyBulkSendHigh
		}
		
		$button26_Click = {
			StateSystemPolicyBulkSendLow
		}
		
		$buttonAMTStatusCheckPolicy_Click = {
			AMTStatusCheckPolicy
		}
		
		$buttonApplicationManagerPo_Click = {
			ApplicationManagerPolicyAction
		}
		
		$buttonAppManagerUserPolicy_Click = {
			ApplicationManagerUserPolicyAction
		}
		
		$buttonAppManagerGlobalEval_Click = {
			ApplicationManagerGlobalEvaluationAction
		}
		
		$buttonPowerManagementStart_Click = {
			PowerManagementStartSummarizer
		}
		
		$buttonEndpointDeploymentRe_Click = {
			EndpointDeploymentReevaluate
		}
		
		$buttonEndpointAMPolicyReev_Click = {
			EndpointAMPolicyReevaluate
		}
		
		$buttonExternalEventDetecti_Click = {
			ExternalEventDetection
		}
		
		# --End User Generated Script--
		#----------------------------------------------
		#region Generated Events
		#----------------------------------------------
		
		$Form_StateCorrection_Load =
		{
			#Correct the initial state of the form to prevent the .Net maximized form issue
			$formConfigurationManager.WindowState = $InitialFormWindowState
		}
		
		$Form_Cleanup_FormClosed =
		{
			#Remove all event handlers from the controls
			try
			{
				$buttonExternalEventDetecti.remove_Click($buttonExternalEventDetecti_Click)
				$buttonEndpointAMPolicyReev.remove_Click($buttonEndpointAMPolicyReev_Click)
				$buttonEndpointDeploymentRe.remove_Click($buttonEndpointDeploymentRe_Click)
				$buttonSendUnsentStateMessa.remove_Click($buttonSendUnsentStateMessa_Click)
				$buttonDCMPolicy.remove_Click($buttonDCMPolicy_Click)
				$buttonSUMUpdatesInstallSch.remove_Click($buttonSUMUpdatesInstallSch_Click)
				$buttonPendingPackageCheckS.remove_Click($buttonPendingPackageCheckS_Click)
				$buttonPolicyAgentRequestAs.remove_Click($buttonPolicyAgentRequestAs_Click)
				$buttonLSTimeoutRefresh.remove_Click($buttonLSTimeoutRefresh_Click)
				$buttonPowerManagementStart.remove_Click($buttonPowerManagementStart_Click)
				$buttonAppManagerGlobalEval.remove_Click($buttonAppManagerGlobalEval_Click)
				$buttonAppManagerUserPolicy.remove_Click($buttonAppManagerUserPolicy_Click)
				$buttonApplicationManagerPo.remove_Click($buttonApplicationManagerPo_Click)
				$buttonAMTStatusCheckPolicy.remove_Click($buttonAMTStatusCheckPolicy_Click)
				$button26.remove_Click($button26_Click)
				$buttonStateSystemPolicyBul.remove_Click($buttonStateSystemPolicyBul_Click)
				$buttonUpdateStorePolicy.remove_Click($buttonUpdateStorePolicy_Click)
				$buttonScanByUpdateSource.remove_Click($buttonScanByUpdateSource_Click)
				$buttonStateSystemPolicyCle.remove_Click($buttonStateSystemPolicyCle_Click)
				$buttonBranchDistributionPo.remove_Click($buttonBranchDistributionPo_Click)
				$buttonSoftwareUpdatesAssig.remove_Click($buttonSoftwareUpdatesAssig_Click)
				$buttonWindowsInstallerSour.remove_Click($buttonWindowsInstallerSour_Click)
				$button14.remove_Click($button14_Click)
				$buttonIDMIFCollectionCycle.remove_Click($buttonIDMIFCollectionCycle_Click)
				$buttonFileCollectionCycle.remove_Click($buttonFileCollectionCycle_Click)
				$buttonDiscoveryDataCollect.remove_Click($buttonDiscoveryDataCollect_Click)
				$buttonSoftwareInventoryCol.remove_Click($buttonSoftwareInventoryCol_Click)
				$buttonHardwareInventoryCol.remove_Click($buttonHardwareInventoryCol_Click)
				$buttonNAPAction.remove_Click($buttonNAPAction_Click)
				$buttonPeerDPStatusReportin.remove_Click($buttonPeerDPStatusReportin_Click)
				$buttonRetryRefreshingCerti.remove_Click($buttonRetryRefreshingCerti_Click)
				$buttonValidateUserPolicy.remove_Click($buttonValidateUserPolicy_Click)
				$buttonValidateMachinePolic.remove_Click($buttonValidateMachinePolic_Click)
				$buttonUserPolicyAgentClean.remove_Click($buttonUserPolicyAgentClean_Click)
				$buttonMachinePolicyAgentCl.remove_Click($buttonMachinePolicyAgentCl_Click)
				$buttonClearProxySettingsCa.remove_Click($buttonClearProxySettingsCa_Click)
				$buttonSourceUpdateMessage.remove_Click($buttonSourceUpdateMessage_Click)
				$buttonSoftwareMeteringUsag.remove_Click($buttonSoftwareMeteringUsag_Click)
				$buttonPolicyAgentEvaluateA.remove_Click($buttonPolicyAgentEvaluateA_Click)
				$buttonLSRefreshLocations.remove_Click($buttonLSRefreshLocations_Click)
				$buttonRefreshDefaultMPTask.remove_Click($buttonRefreshDefaultMPTask_Click)
				$buttonEvaluateMachinePolic.remove_Click($buttonEvaluateMachinePolic_Click)
				$buttonMachineAssignments.remove_Click($buttonMachineAssignments_Click)
				$buttonClientMachineAuthent.remove_Click($buttonClientMachineAuthent_Click)
				$buttonIDMIFCollection.remove_Click($buttonIDMIFCollection_Click)
				$buttonFileCollection.remove_Click($buttonFileCollection_Click)
				$buttonDiscoveryInventory.remove_Click($buttonDiscoveryInventory_Click)
				$buttonSoftwareInventory.remove_Click($buttonSoftwareInventory_Click)
				$buttonHardwareInventory.remove_Click($buttonHardwareInventory_Click)
				$formConfigurationManager.remove_Load($formConfigurationManager_Load)
				$formConfigurationManager.remove_Load($Form_StateCorrection_Load)
				$formConfigurationManager.remove_FormClosed($Form_Cleanup_FormClosed)
			}
			catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		}
		#endregion Generated Events
		
		#----------------------------------------------
		#region Generated Form Code
		#----------------------------------------------
		$formConfigurationManager.SuspendLayout()
		#
		# formConfigurationManager
		#
		$formConfigurationManager.Controls.Add($buttonExternalEventDetecti)
		$formConfigurationManager.Controls.Add($labelClickOnTheActionYouW)
		$formConfigurationManager.Controls.Add($buttonEndpointAMPolicyReev)
		$formConfigurationManager.Controls.Add($buttonEndpointDeploymentRe)
		$formConfigurationManager.Controls.Add($buttonSendUnsentStateMessa)
		$formConfigurationManager.Controls.Add($buttonDCMPolicy)
		$formConfigurationManager.Controls.Add($buttonSUMUpdatesInstallSch)
		$formConfigurationManager.Controls.Add($buttonPendingPackageCheckS)
		$formConfigurationManager.Controls.Add($buttonPolicyAgentRequestAs)
		$formConfigurationManager.Controls.Add($buttonLSTimeoutRefresh)
		$formConfigurationManager.Controls.Add($buttonPowerManagementStart)
		$formConfigurationManager.Controls.Add($buttonAppManagerGlobalEval)
		$formConfigurationManager.Controls.Add($buttonAppManagerUserPolicy)
		$formConfigurationManager.Controls.Add($buttonApplicationManagerPo)
		$formConfigurationManager.Controls.Add($buttonAMTStatusCheckPolicy)
		$formConfigurationManager.Controls.Add($button26)
		$formConfigurationManager.Controls.Add($buttonStateSystemPolicyBul)
		$formConfigurationManager.Controls.Add($buttonUpdateStorePolicy)
		$formConfigurationManager.Controls.Add($buttonScanByUpdateSource)
		$formConfigurationManager.Controls.Add($buttonStateSystemPolicyCle)
		$formConfigurationManager.Controls.Add($buttonBranchDistributionPo)
		$formConfigurationManager.Controls.Add($buttonSoftwareUpdatesAssig)
		$formConfigurationManager.Controls.Add($buttonWindowsInstallerSour)
		$formConfigurationManager.Controls.Add($button14)
		$formConfigurationManager.Controls.Add($buttonIDMIFCollectionCycle)
		$formConfigurationManager.Controls.Add($buttonFileCollectionCycle)
		$formConfigurationManager.Controls.Add($buttonDiscoveryDataCollect)
		$formConfigurationManager.Controls.Add($buttonSoftwareInventoryCol)
		$formConfigurationManager.Controls.Add($buttonHardwareInventoryCol)
		$formConfigurationManager.Controls.Add($buttonNAPAction)
		$formConfigurationManager.Controls.Add($buttonPeerDPStatusReportin)
		$formConfigurationManager.Controls.Add($buttonRetryRefreshingCerti)
		$formConfigurationManager.Controls.Add($buttonValidateUserPolicy)
		$formConfigurationManager.Controls.Add($buttonValidateMachinePolic)
		$formConfigurationManager.Controls.Add($buttonUserPolicyAgentClean)
		$formConfigurationManager.Controls.Add($buttonMachinePolicyAgentCl)
		$formConfigurationManager.Controls.Add($buttonClearProxySettingsCa)
		$formConfigurationManager.Controls.Add($buttonSourceUpdateMessage)
		$formConfigurationManager.Controls.Add($buttonSoftwareMeteringUsag)
		$formConfigurationManager.Controls.Add($buttonPolicyAgentEvaluateA)
		$formConfigurationManager.Controls.Add($buttonLSRefreshLocations)
		$formConfigurationManager.Controls.Add($buttonRefreshDefaultMPTask)
		$formConfigurationManager.Controls.Add($buttonEvaluateMachinePolic)
		$formConfigurationManager.Controls.Add($buttonMachineAssignments)
		$formConfigurationManager.Controls.Add($buttonClientMachineAuthent)
		$formConfigurationManager.Controls.Add($buttonIDMIFCollection)
		$formConfigurationManager.Controls.Add($buttonFileCollection)
		$formConfigurationManager.Controls.Add($buttonDiscoveryInventory)
		$formConfigurationManager.Controls.Add($buttonSoftwareInventory)
		$formConfigurationManager.Controls.Add($buttonHardwareInventory)
		$formConfigurationManager.AutoScaleDimensions = '6, 13'
		$formConfigurationManager.AutoScaleMode = 'Font'
		$formConfigurationManager.ClientSize = '630, 501'
		$formConfigurationManager.Name = 'formConfigurationManager'
		$formConfigurationManager.Text = 'Configuration Manager Actions'
		$formConfigurationManager.add_Load($formConfigurationManager_Load)
		#
		# buttonExternalEventDetecti
		#
		$buttonExternalEventDetecti.Location = '403, 410'
		$buttonExternalEventDetecti.Name = 'buttonExternalEventDetecti'
		$buttonExternalEventDetecti.Size = '214, 23'
		$buttonExternalEventDetecti.TabIndex = 51
		$buttonExternalEventDetecti.Text = 'External Event Detection'
		$buttonExternalEventDetecti.UseCompatibleTextRendering = $True
		$buttonExternalEventDetecti.UseVisualStyleBackColor = $True
		$buttonExternalEventDetecti.add_Click($buttonExternalEventDetecti_Click)
		#
		# labelClickOnTheActionYouW
		#
		$labelClickOnTheActionYouW.AutoSize = $True
		$labelClickOnTheActionYouW.Location = '106, 480'
		$labelClickOnTheActionYouW.Name = 'labelClickOnTheActionYouW'
		$labelClickOnTheActionYouW.Size = '418, 17'
		$labelClickOnTheActionYouW.TabIndex = 50
		$labelClickOnTheActionYouW.Text = 'Click on the action you would like to preform. All actions are done silently for now.  '
		$labelClickOnTheActionYouW.UseCompatibleTextRendering = $True
		#
		# buttonEndpointAMPolicyReev
		#
		$buttonEndpointAMPolicyReev.Location = '404, 385'
		$buttonEndpointAMPolicyReev.Name = 'buttonEndpointAMPolicyReev'
		$buttonEndpointAMPolicyReev.Size = '214, 23'
		$buttonEndpointAMPolicyReev.TabIndex = 47
		$buttonEndpointAMPolicyReev.Text = 'Endpoint AM Policy Reevaluate'
		$buttonEndpointAMPolicyReev.UseCompatibleTextRendering = $True
		$buttonEndpointAMPolicyReev.UseVisualStyleBackColor = $True
		$buttonEndpointAMPolicyReev.add_Click($buttonEndpointAMPolicyReev_Click)
		#
		# buttonEndpointDeploymentRe
		#
		$buttonEndpointDeploymentRe.Location = '404, 360'
		$buttonEndpointDeploymentRe.Name = 'buttonEndpointDeploymentRe'
		$buttonEndpointDeploymentRe.Size = '214, 23'
		$buttonEndpointDeploymentRe.TabIndex = 46
		$buttonEndpointDeploymentRe.Text = 'Endpoint Deployment Reevaluate'
		$buttonEndpointDeploymentRe.UseCompatibleTextRendering = $True
		$buttonEndpointDeploymentRe.UseVisualStyleBackColor = $True
		$buttonEndpointDeploymentRe.add_Click($buttonEndpointDeploymentRe_Click)
		#
		# buttonSendUnsentStateMessa
		#
		$buttonSendUnsentStateMessa.Location = '403, 85'
		$buttonSendUnsentStateMessa.Name = 'buttonSendUnsentStateMessa'
		$buttonSendUnsentStateMessa.Size = '215, 23'
		$buttonSendUnsentStateMessa.TabIndex = 45
		$buttonSendUnsentStateMessa.Text = 'Send Unsent State Message'
		$buttonSendUnsentStateMessa.UseCompatibleTextRendering = $True
		$buttonSendUnsentStateMessa.UseVisualStyleBackColor = $True
		$buttonSendUnsentStateMessa.add_Click($buttonSendUnsentStateMessa_Click)
		#
		# buttonDCMPolicy
		#
		$buttonDCMPolicy.Location = '404, 60'
		$buttonDCMPolicy.Name = 'buttonDCMPolicy'
		$buttonDCMPolicy.Size = '213, 23'
		$buttonDCMPolicy.TabIndex = 44
		$buttonDCMPolicy.Text = 'DCM Policy'
		$buttonDCMPolicy.UseCompatibleTextRendering = $True
		$buttonDCMPolicy.UseVisualStyleBackColor = $True
		$buttonDCMPolicy.add_Click($buttonDCMPolicy_Click)
		#
		# buttonSUMUpdatesInstallSch
		#
		$buttonSUMUpdatesInstallSch.Location = '204, 185'
		$buttonSUMUpdatesInstallSch.Name = 'buttonSUMUpdatesInstallSch'
		$buttonSUMUpdatesInstallSch.Size = '193, 23'
		$buttonSUMUpdatesInstallSch.TabIndex = 43
		$buttonSUMUpdatesInstallSch.Text = 'SUM Updates Install Schedule'
		$buttonSUMUpdatesInstallSch.UseCompatibleTextRendering = $True
		$buttonSUMUpdatesInstallSch.UseVisualStyleBackColor = $True
		$buttonSUMUpdatesInstallSch.add_Click($buttonSUMUpdatesInstallSch_Click)
		#
		# buttonPendingPackageCheckS
		#
		$buttonPendingPackageCheckS.Location = '204, 160'
		$buttonPendingPackageCheckS.Name = 'buttonPendingPackageCheckS'
		$buttonPendingPackageCheckS.Size = '193, 23'
		$buttonPendingPackageCheckS.TabIndex = 42
		$buttonPendingPackageCheckS.Text = 'Pending Package Check Schedule'
		$buttonPendingPackageCheckS.UseCompatibleTextRendering = $True
		$buttonPendingPackageCheckS.UseVisualStyleBackColor = $True
		$buttonPendingPackageCheckS.add_Click($buttonPendingPackageCheckS_Click)
		#
		# buttonPolicyAgentRequestAs
		#
		$buttonPolicyAgentRequestAs.Location = '13, 310'
		$buttonPolicyAgentRequestAs.Name = 'buttonPolicyAgentRequestAs'
		$buttonPolicyAgentRequestAs.Size = '185, 23'
		$buttonPolicyAgentRequestAs.TabIndex = 41
		$buttonPolicyAgentRequestAs.Text = 'Policy Agent Request Assignment'
		$buttonPolicyAgentRequestAs.UseCompatibleTextRendering = $True
		$buttonPolicyAgentRequestAs.UseVisualStyleBackColor = $True
		$buttonPolicyAgentRequestAs.add_Click($buttonPolicyAgentRequestAs_Click)
		#
		# buttonLSTimeoutRefresh
		#
		$buttonLSTimeoutRefresh.Location = '13, 285'
		$buttonLSTimeoutRefresh.Name = 'buttonLSTimeoutRefresh'
		$buttonLSTimeoutRefresh.Size = '185, 23'
		$buttonLSTimeoutRefresh.TabIndex = 40
		$buttonLSTimeoutRefresh.Text = 'LS Timeout Refresh'
		$buttonLSTimeoutRefresh.UseCompatibleTextRendering = $True
		$buttonLSTimeoutRefresh.UseVisualStyleBackColor = $True
		$buttonLSTimeoutRefresh.add_Click($buttonLSTimeoutRefresh_Click)
		#
		# buttonPowerManagementStart
		#
		$buttonPowerManagementStart.Location = '404, 335'
		$buttonPowerManagementStart.Name = 'buttonPowerManagementStart'
		$buttonPowerManagementStart.Size = '214, 23'
		$buttonPowerManagementStart.TabIndex = 39
		$buttonPowerManagementStart.Text = 'PowerManagement Start Summarizer'
		$buttonPowerManagementStart.UseCompatibleTextRendering = $True
		$buttonPowerManagementStart.UseVisualStyleBackColor = $True
		$buttonPowerManagementStart.add_Click($buttonPowerManagementStart_Click)
		#
		# buttonAppManagerGlobalEval
		#
		$buttonAppManagerGlobalEval.Location = '404, 310'
		$buttonAppManagerGlobalEval.Name = 'buttonAppManagerGlobalEval'
		$buttonAppManagerGlobalEval.Size = '213, 23'
		$buttonAppManagerGlobalEval.TabIndex = 38
		$buttonAppManagerGlobalEval.Text = 'App Manager Global Evaluation Action'
		$buttonAppManagerGlobalEval.UseCompatibleTextRendering = $True
		$buttonAppManagerGlobalEval.UseVisualStyleBackColor = $True
		$buttonAppManagerGlobalEval.add_Click($buttonAppManagerGlobalEval_Click)
		#
		# buttonAppManagerUserPolicy
		#
		$buttonAppManagerUserPolicy.Location = '404, 285'
		$buttonAppManagerUserPolicy.Name = 'buttonAppManagerUserPolicy'
		$buttonAppManagerUserPolicy.Size = '213, 23'
		$buttonAppManagerUserPolicy.TabIndex = 37
		$buttonAppManagerUserPolicy.Text = 'App Manager User Policy Action'
		$buttonAppManagerUserPolicy.UseCompatibleTextRendering = $True
		$buttonAppManagerUserPolicy.UseVisualStyleBackColor = $True
		$buttonAppManagerUserPolicy.add_Click($buttonAppManagerUserPolicy_Click)
		#
		# buttonApplicationManagerPo
		#
		$buttonApplicationManagerPo.Location = '404, 260'
		$buttonApplicationManagerPo.Name = 'buttonApplicationManagerPo'
		$buttonApplicationManagerPo.Size = '213, 23'
		$buttonApplicationManagerPo.TabIndex = 36
		$buttonApplicationManagerPo.Text = 'Application Manager Policy Action'
		$buttonApplicationManagerPo.UseCompatibleTextRendering = $True
		$buttonApplicationManagerPo.UseVisualStyleBackColor = $True
		$buttonApplicationManagerPo.add_Click($buttonApplicationManagerPo_Click)
		#
		# buttonAMTStatusCheckPolicy
		#
		$buttonAMTStatusCheckPolicy.Location = '404, 235'
		$buttonAMTStatusCheckPolicy.Name = 'buttonAMTStatusCheckPolicy'
		$buttonAMTStatusCheckPolicy.Size = '213, 23'
		$buttonAMTStatusCheckPolicy.TabIndex = 35
		$buttonAMTStatusCheckPolicy.Text = 'AMT Status Check Policy'
		$buttonAMTStatusCheckPolicy.UseCompatibleTextRendering = $True
		$buttonAMTStatusCheckPolicy.UseVisualStyleBackColor = $True
		$buttonAMTStatusCheckPolicy.add_Click($buttonAMTStatusCheckPolicy_Click)
		#
		# button26
		#
		$button26.Location = '404, 210'
		$button26.Name = 'button26'
		$button26.Size = '213, 23'
		$button26.TabIndex = 34
		$button26.Text = 'State System Policy Bulk Send Low'
		$button26.UseCompatibleTextRendering = $True
		$button26.UseVisualStyleBackColor = $True
		$button26.add_Click($button26_Click)
		#
		# buttonStateSystemPolicyBul
		#
		$buttonStateSystemPolicyBul.Location = '404, 185'
		$buttonStateSystemPolicyBul.Name = 'buttonStateSystemPolicyBul'
		$buttonStateSystemPolicyBul.Size = '213, 23'
		$buttonStateSystemPolicyBul.TabIndex = 33
		$buttonStateSystemPolicyBul.Text = 'State System Policy Bulk Send High'
		$buttonStateSystemPolicyBul.UseCompatibleTextRendering = $True
		$buttonStateSystemPolicyBul.UseVisualStyleBackColor = $True
		$buttonStateSystemPolicyBul.add_Click($buttonStateSystemPolicyBul_Click)
		#
		# buttonUpdateStorePolicy
		#
		$buttonUpdateStorePolicy.Location = '404, 160'
		$buttonUpdateStorePolicy.Name = 'buttonUpdateStorePolicy'
		$buttonUpdateStorePolicy.Size = '213, 23'
		$buttonUpdateStorePolicy.TabIndex = 32
		$buttonUpdateStorePolicy.Text = 'Update Store Policy'
		$buttonUpdateStorePolicy.UseCompatibleTextRendering = $True
		$buttonUpdateStorePolicy.UseVisualStyleBackColor = $True
		$buttonUpdateStorePolicy.add_Click($buttonUpdateStorePolicy_Click)
		#
		# buttonScanByUpdateSource
		#
		$buttonScanByUpdateSource.Location = '404, 135'
		$buttonScanByUpdateSource.Name = 'buttonScanByUpdateSource'
		$buttonScanByUpdateSource.Size = '213, 23'
		$buttonScanByUpdateSource.TabIndex = 31
		$buttonScanByUpdateSource.Text = 'Scan By Update Source'
		$buttonScanByUpdateSource.UseCompatibleTextRendering = $True
		$buttonScanByUpdateSource.UseVisualStyleBackColor = $True
		$buttonScanByUpdateSource.add_Click($buttonScanByUpdateSource_Click)
		#
		# buttonStateSystemPolicyCle
		#
		$buttonStateSystemPolicyCle.Location = '403, 110'
		$buttonStateSystemPolicyCle.Name = 'buttonStateSystemPolicyCle'
		$buttonStateSystemPolicyCle.Size = '214, 23'
		$buttonStateSystemPolicyCle.TabIndex = 30
		$buttonStateSystemPolicyCle.Text = 'State System Policy Cleanout'
		$buttonStateSystemPolicyCle.UseCompatibleTextRendering = $True
		$buttonStateSystemPolicyCle.UseVisualStyleBackColor = $True
		$buttonStateSystemPolicyCle.add_Click($buttonStateSystemPolicyCle_Click)
		#
		# buttonBranchDistributionPo
		#
		$buttonBranchDistributionPo.Location = '403, 35'
		$buttonBranchDistributionPo.Name = 'buttonBranchDistributionPo'
		$buttonBranchDistributionPo.Size = '214, 23'
		$buttonBranchDistributionPo.TabIndex = 29
		$buttonBranchDistributionPo.Text = 'Branch Distribution Point Maint'
		$buttonBranchDistributionPo.UseCompatibleTextRendering = $True
		$buttonBranchDistributionPo.UseVisualStyleBackColor = $True
		$buttonBranchDistributionPo.add_Click($buttonBranchDistributionPo_Click)
		#
		# buttonSoftwareUpdatesAssig
		#
		$buttonSoftwareUpdatesAssig.Location = '204, 410'
		$buttonSoftwareUpdatesAssig.Name = 'buttonSoftwareUpdatesAssig'
		$buttonSoftwareUpdatesAssig.Size = '193, 23'
		$buttonSoftwareUpdatesAssig.TabIndex = 28
		$buttonSoftwareUpdatesAssig.Text = 'Software Updates Assignments'
		$buttonSoftwareUpdatesAssig.UseCompatibleTextRendering = $True
		$buttonSoftwareUpdatesAssig.UseVisualStyleBackColor = $True
		$buttonSoftwareUpdatesAssig.add_Click($buttonSoftwareUpdatesAssig_Click)
		#
		# buttonWindowsInstallerSour
		#
		$buttonWindowsInstallerSour.Location = '204, 385'
		$buttonWindowsInstallerSour.Name = 'buttonWindowsInstallerSour'
		$buttonWindowsInstallerSour.Size = '193, 23'
		$buttonWindowsInstallerSour.TabIndex = 27
		$buttonWindowsInstallerSour.Text = 'Windows Installer Source List'
		$buttonWindowsInstallerSour.UseCompatibleTextRendering = $True
		$buttonWindowsInstallerSour.UseVisualStyleBackColor = $True
		$buttonWindowsInstallerSour.add_Click($buttonWindowsInstallerSour_Click)
		#
		# button14
		#
		$button14.Location = '204, 360'
		$button14.Name = 'button14'
		$button14.Size = '193, 23'
		$button14.TabIndex = 26
		$button14.Text = 'Software Metering Usage Report'
		$button14.UseCompatibleTextRendering = $True
		$button14.UseVisualStyleBackColor = $True
		$button14.add_Click($button14_Click)
		#
		# buttonIDMIFCollectionCycle
		#
		$buttonIDMIFCollectionCycle.Location = '204, 335'
		$buttonIDMIFCollectionCycle.Name = 'buttonIDMIFCollectionCycle'
		$buttonIDMIFCollectionCycle.Size = '193, 23'
		$buttonIDMIFCollectionCycle.TabIndex = 25
		$buttonIDMIFCollectionCycle.Text = 'IDMIF Collection Cycle'
		$buttonIDMIFCollectionCycle.UseCompatibleTextRendering = $True
		$buttonIDMIFCollectionCycle.UseVisualStyleBackColor = $True
		$buttonIDMIFCollectionCycle.add_Click($buttonIDMIFCollectionCycle_Click)
		#
		# buttonFileCollectionCycle
		#
		$buttonFileCollectionCycle.Location = '204, 310'
		$buttonFileCollectionCycle.Name = 'buttonFileCollectionCycle'
		$buttonFileCollectionCycle.Size = '193, 23'
		$buttonFileCollectionCycle.TabIndex = 24
		$buttonFileCollectionCycle.Text = 'File Collection Cycle'
		$buttonFileCollectionCycle.UseCompatibleTextRendering = $True
		$buttonFileCollectionCycle.UseVisualStyleBackColor = $True
		$buttonFileCollectionCycle.add_Click($buttonFileCollectionCycle_Click)
		#
		# buttonDiscoveryDataCollect
		#
		$buttonDiscoveryDataCollect.Location = '204, 285'
		$buttonDiscoveryDataCollect.Name = 'buttonDiscoveryDataCollect'
		$buttonDiscoveryDataCollect.Size = '193, 23'
		$buttonDiscoveryDataCollect.TabIndex = 23
		$buttonDiscoveryDataCollect.Text = 'Discovery Data Collection'
		$buttonDiscoveryDataCollect.UseCompatibleTextRendering = $True
		$buttonDiscoveryDataCollect.UseVisualStyleBackColor = $True
		$buttonDiscoveryDataCollect.add_Click($buttonDiscoveryDataCollect_Click)
		#
		# buttonSoftwareInventoryCol
		#
		$buttonSoftwareInventoryCol.Location = '204, 260'
		$buttonSoftwareInventoryCol.Name = 'buttonSoftwareInventoryCol'
		$buttonSoftwareInventoryCol.Size = '193, 23'
		$buttonSoftwareInventoryCol.TabIndex = 22
		$buttonSoftwareInventoryCol.Text = 'Software Inventory Collection'
		$buttonSoftwareInventoryCol.UseCompatibleTextRendering = $True
		$buttonSoftwareInventoryCol.UseVisualStyleBackColor = $True
		$buttonSoftwareInventoryCol.add_Click($buttonSoftwareInventoryCol_Click)
		#
		# buttonHardwareInventoryCol
		#
		$buttonHardwareInventoryCol.Location = '204, 235'
		$buttonHardwareInventoryCol.Name = 'buttonHardwareInventoryCol'
		$buttonHardwareInventoryCol.Size = '193, 23'
		$buttonHardwareInventoryCol.TabIndex = 21
		$buttonHardwareInventoryCol.Text = 'Hardware Inventory Collection'
		$buttonHardwareInventoryCol.UseCompatibleTextRendering = $True
		$buttonHardwareInventoryCol.UseVisualStyleBackColor = $True
		$buttonHardwareInventoryCol.add_Click($buttonHardwareInventoryCol_Click)
		#
		# buttonNAPAction
		#
		$buttonNAPAction.Location = '204, 210'
		$buttonNAPAction.Name = 'buttonNAPAction'
		$buttonNAPAction.Size = '193, 23'
		$buttonNAPAction.TabIndex = 20
		$buttonNAPAction.Text = 'NAP Action'
		$buttonNAPAction.UseCompatibleTextRendering = $True
		$buttonNAPAction.UseVisualStyleBackColor = $True
		$buttonNAPAction.add_Click($buttonNAPAction_Click)
		#
		# buttonPeerDPStatusReportin
		#
		$buttonPeerDPStatusReportin.Location = '204, 135'
		$buttonPeerDPStatusReportin.Name = 'buttonPeerDPStatusReportin'
		$buttonPeerDPStatusReportin.Size = '193, 23'
		$buttonPeerDPStatusReportin.TabIndex = 19
		$buttonPeerDPStatusReportin.Text = 'Peer DP Status Reporting'
		$buttonPeerDPStatusReportin.UseCompatibleTextRendering = $True
		$buttonPeerDPStatusReportin.UseVisualStyleBackColor = $True
		$buttonPeerDPStatusReportin.add_Click($buttonPeerDPStatusReportin_Click)
		#
		# buttonRetryRefreshingCerti
		#
		$buttonRetryRefreshingCerti.Location = '204, 110'
		$buttonRetryRefreshingCerti.Name = 'buttonRetryRefreshingCerti'
		$buttonRetryRefreshingCerti.Size = '193, 23'
		$buttonRetryRefreshingCerti.TabIndex = 18
		$buttonRetryRefreshingCerti.Text = 'Retry Refreshing certificates ADMP'
		$buttonRetryRefreshingCerti.UseCompatibleTextRendering = $True
		$buttonRetryRefreshingCerti.UseVisualStyleBackColor = $True
		$buttonRetryRefreshingCerti.add_Click($buttonRetryRefreshingCerti_Click)
		#
		# buttonValidateUserPolicy
		#
		$buttonValidateUserPolicy.Location = '204, 85'
		$buttonValidateUserPolicy.Name = 'buttonValidateUserPolicy'
		$buttonValidateUserPolicy.Size = '193, 23'
		$buttonValidateUserPolicy.TabIndex = 17
		$buttonValidateUserPolicy.Text = 'Validate User Policy'
		$buttonValidateUserPolicy.UseCompatibleTextRendering = $True
		$buttonValidateUserPolicy.UseVisualStyleBackColor = $True
		$buttonValidateUserPolicy.add_Click($buttonValidateUserPolicy_Click)
		#
		# buttonValidateMachinePolic
		#
		$buttonValidateMachinePolic.Location = '204, 60'
		$buttonValidateMachinePolic.Name = 'buttonValidateMachinePolic'
		$buttonValidateMachinePolic.Size = '193, 23'
		$buttonValidateMachinePolic.TabIndex = 16
		$buttonValidateMachinePolic.Text = 'Validate Machine Policy'
		$buttonValidateMachinePolic.UseCompatibleTextRendering = $True
		$buttonValidateMachinePolic.UseVisualStyleBackColor = $True
		$buttonValidateMachinePolic.add_Click($buttonValidateMachinePolic_Click)
		#
		# buttonUserPolicyAgentClean
		#
		$buttonUserPolicyAgentClean.Location = '204, 35'
		$buttonUserPolicyAgentClean.Name = 'buttonUserPolicyAgentClean'
		$buttonUserPolicyAgentClean.Size = '193, 23'
		$buttonUserPolicyAgentClean.TabIndex = 15
		$buttonUserPolicyAgentClean.Text = 'User Policy Agent Cleanup'
		$buttonUserPolicyAgentClean.UseCompatibleTextRendering = $True
		$buttonUserPolicyAgentClean.UseVisualStyleBackColor = $True
		$buttonUserPolicyAgentClean.add_Click($buttonUserPolicyAgentClean_Click)
		#
		# buttonMachinePolicyAgentCl
		#
		$buttonMachinePolicyAgentCl.Location = '204, 435'
		$buttonMachinePolicyAgentCl.Name = 'buttonMachinePolicyAgentCl'
		$buttonMachinePolicyAgentCl.Size = '193, 23'
		$buttonMachinePolicyAgentCl.TabIndex = 14
		$buttonMachinePolicyAgentCl.Text = 'Machine Policy Agent Cleanup'
		$buttonMachinePolicyAgentCl.UseCompatibleTextRendering = $True
		$buttonMachinePolicyAgentCl.UseVisualStyleBackColor = $True
		$buttonMachinePolicyAgentCl.add_Click($buttonMachinePolicyAgentCl_Click)
		#
		# buttonClearProxySettingsCa
		#
		$buttonClearProxySettingsCa.Location = '13, 410'
		$buttonClearProxySettingsCa.Name = 'buttonClearProxySettingsCa'
		$buttonClearProxySettingsCa.Size = '185, 23'
		$buttonClearProxySettingsCa.TabIndex = 13
		$buttonClearProxySettingsCa.Text = 'Clear Proxy Settings Cache'
		$buttonClearProxySettingsCa.UseCompatibleTextRendering = $True
		$buttonClearProxySettingsCa.UseVisualStyleBackColor = $True
		$buttonClearProxySettingsCa.add_Click($buttonClearProxySettingsCa_Click)
		#
		# buttonSourceUpdateMessage
		#
		$buttonSourceUpdateMessage.Location = '13, 385'
		$buttonSourceUpdateMessage.Name = 'buttonSourceUpdateMessage'
		$buttonSourceUpdateMessage.Size = '185, 23'
		$buttonSourceUpdateMessage.TabIndex = 12
		$buttonSourceUpdateMessage.Text = 'Source Update Message'
		$buttonSourceUpdateMessage.UseCompatibleTextRendering = $True
		$buttonSourceUpdateMessage.UseVisualStyleBackColor = $True
		$buttonSourceUpdateMessage.add_Click($buttonSourceUpdateMessage_Click)
		#
		# buttonSoftwareMeteringUsag
		#
		$buttonSoftwareMeteringUsag.Location = '13, 360'
		$buttonSoftwareMeteringUsag.Name = 'buttonSoftwareMeteringUsag'
		$buttonSoftwareMeteringUsag.Size = '185, 23'
		$buttonSoftwareMeteringUsag.TabIndex = 11
		$buttonSoftwareMeteringUsag.Text = 'Software Metering Usage Report'
		$buttonSoftwareMeteringUsag.UseCompatibleTextRendering = $True
		$buttonSoftwareMeteringUsag.UseVisualStyleBackColor = $True
		$buttonSoftwareMeteringUsag.add_Click($buttonSoftwareMeteringUsag_Click)
		#
		# buttonPolicyAgentEvaluateA
		#
		$buttonPolicyAgentEvaluateA.Location = '13, 335'
		$buttonPolicyAgentEvaluateA.Name = 'buttonPolicyAgentEvaluateA'
		$buttonPolicyAgentEvaluateA.Size = '185, 23'
		$buttonPolicyAgentEvaluateA.TabIndex = 10
		$buttonPolicyAgentEvaluateA.Text = 'Policy Agent Evaluate Assignment'
		$buttonPolicyAgentEvaluateA.UseCompatibleTextRendering = $True
		$buttonPolicyAgentEvaluateA.UseVisualStyleBackColor = $True
		$buttonPolicyAgentEvaluateA.add_Click($buttonPolicyAgentEvaluateA_Click)
		#
		# buttonLSRefreshLocations
		#
		$buttonLSRefreshLocations.Location = '13, 260'
		$buttonLSRefreshLocations.Name = 'buttonLSRefreshLocations'
		$buttonLSRefreshLocations.Size = '185, 23'
		$buttonLSRefreshLocations.TabIndex = 9
		$buttonLSRefreshLocations.Text = 'LS Refresh Locations'
		$buttonLSRefreshLocations.UseCompatibleTextRendering = $True
		$buttonLSRefreshLocations.UseVisualStyleBackColor = $True
		$buttonLSRefreshLocations.add_Click($buttonLSRefreshLocations_Click)
		#
		# buttonRefreshDefaultMPTask
		#
		$buttonRefreshDefaultMPTask.Location = '13, 235'
		$buttonRefreshDefaultMPTask.Name = 'buttonRefreshDefaultMPTask'
		$buttonRefreshDefaultMPTask.Size = '185, 23'
		$buttonRefreshDefaultMPTask.TabIndex = 8
		$buttonRefreshDefaultMPTask.Text = 'Refresh Default MP Task'
		$buttonRefreshDefaultMPTask.UseCompatibleTextRendering = $True
		$buttonRefreshDefaultMPTask.UseVisualStyleBackColor = $True
		$buttonRefreshDefaultMPTask.add_Click($buttonRefreshDefaultMPTask_Click)
		#
		# buttonEvaluateMachinePolic
		#
		$buttonEvaluateMachinePolic.Location = '13, 210'
		$buttonEvaluateMachinePolic.Name = 'buttonEvaluateMachinePolic'
		$buttonEvaluateMachinePolic.Size = '185, 23'
		$buttonEvaluateMachinePolic.TabIndex = 7
		$buttonEvaluateMachinePolic.Text = 'Evaluate Machine Policies'
		$buttonEvaluateMachinePolic.UseCompatibleTextRendering = $True
		$buttonEvaluateMachinePolic.UseVisualStyleBackColor = $True
		$buttonEvaluateMachinePolic.add_Click($buttonEvaluateMachinePolic_Click)
		#
		# buttonMachineAssignments
		#
		$buttonMachineAssignments.Location = '13, 185'
		$buttonMachineAssignments.Name = 'buttonMachineAssignments'
		$buttonMachineAssignments.Size = '185, 23'
		$buttonMachineAssignments.TabIndex = 6
		$buttonMachineAssignments.Text = 'Machine Assignments'
		$buttonMachineAssignments.UseCompatibleTextRendering = $True
		$buttonMachineAssignments.UseVisualStyleBackColor = $True
		$buttonMachineAssignments.add_Click($buttonMachineAssignments_Click)
		#
		# buttonClientMachineAuthent
		#
		$buttonClientMachineAuthent.Location = '13, 160'
		$buttonClientMachineAuthent.Name = 'buttonClientMachineAuthent'
		$buttonClientMachineAuthent.Size = '185, 23'
		$buttonClientMachineAuthent.TabIndex = 5
		$buttonClientMachineAuthent.Text = 'Client Machine Authentication'
		$buttonClientMachineAuthent.UseCompatibleTextRendering = $True
		$buttonClientMachineAuthent.UseVisualStyleBackColor = $True
		$buttonClientMachineAuthent.add_Click($buttonClientMachineAuthent_Click)
		#
		# buttonIDMIFCollection
		#
		$buttonIDMIFCollection.Location = '13, 135'
		$buttonIDMIFCollection.Name = 'buttonIDMIFCollection'
		$buttonIDMIFCollection.Size = '185, 23'
		$buttonIDMIFCollection.TabIndex = 4
		$buttonIDMIFCollection.Text = 'IDMIF Collection'
		$buttonIDMIFCollection.UseCompatibleTextRendering = $True
		$buttonIDMIFCollection.UseVisualStyleBackColor = $True
		$buttonIDMIFCollection.add_Click($buttonIDMIFCollection_Click)
		#
		# buttonFileCollection
		#
		$buttonFileCollection.Location = '13, 110'
		$buttonFileCollection.Name = 'buttonFileCollection'
		$buttonFileCollection.Size = '185, 23'
		$buttonFileCollection.TabIndex = 3
		$buttonFileCollection.Text = 'File Collection'
		$buttonFileCollection.UseCompatibleTextRendering = $True
		$buttonFileCollection.UseVisualStyleBackColor = $True
		$buttonFileCollection.add_Click($buttonFileCollection_Click)
		#
		# buttonDiscoveryInventory
		#
		$buttonDiscoveryInventory.Location = '13, 85'
		$buttonDiscoveryInventory.Name = 'buttonDiscoveryInventory'
		$buttonDiscoveryInventory.Size = '185, 23'
		$buttonDiscoveryInventory.TabIndex = 2
		$buttonDiscoveryInventory.Text = 'Discovery Inventory'
		$buttonDiscoveryInventory.UseCompatibleTextRendering = $True
		$buttonDiscoveryInventory.UseVisualStyleBackColor = $True
		$buttonDiscoveryInventory.add_Click($buttonDiscoveryInventory_Click)
		#
		# buttonSoftwareInventory
		#
		$buttonSoftwareInventory.Location = '13, 60'
		$buttonSoftwareInventory.Name = 'buttonSoftwareInventory'
		$buttonSoftwareInventory.Size = '185, 23'
		$buttonSoftwareInventory.TabIndex = 1
		$buttonSoftwareInventory.Text = 'Software Inventory'
		$buttonSoftwareInventory.UseCompatibleTextRendering = $True
		$buttonSoftwareInventory.UseVisualStyleBackColor = $True
		$buttonSoftwareInventory.add_Click($buttonSoftwareInventory_Click)
		#
		# buttonHardwareInventory
		#
		$buttonHardwareInventory.Location = '13, 35'
		$buttonHardwareInventory.Name = 'buttonHardwareInventory'
		$buttonHardwareInventory.Size = '185, 23'
		$buttonHardwareInventory.TabIndex = 0
		$buttonHardwareInventory.Text = 'Hardware Inventory'
		$buttonHardwareInventory.UseCompatibleTextRendering = $True
		$buttonHardwareInventory.UseVisualStyleBackColor = $True
		$buttonHardwareInventory.add_Click($buttonHardwareInventory_Click)
		$formConfigurationManager.ResumeLayout()
		#endregion Generated Form Code
		
		#----------------------------------------------
		
		#Save the initial state of the form
		$InitialFormWindowState = $formConfigurationManager.WindowState
		#Init the OnLoad event to correct the initial state of the form
		$formConfigurationManager.add_Load($Form_StateCorrection_Load)
		#Clean up the control events
		$formConfigurationManager.add_FormClosed($Form_Cleanup_FormClosed)
		#Show the Form
		return $formConfigurationManager.ShowDialog()
		
	} #End Function
	
	function reJoinComputerRemote
	{
		
		$instance = Get-CimInstance -ComputerName $textbox3.Text -ClassName 'Win32_ComputerSystem'
		$SecureStringAsPlainText2 = $textbox13.Text | ConvertTo-SecureString -AsPlainText -Force
		$invCimParams = @{
			MethodName = 'JoinDomainOrWorkGroup'
			Arguments  = @{ FJoinOptions = 3; Name = DOMAIN ; Username = $textbox14.Text; Password = $SecureStringAsPlainText2 }
		}
		$instance | Invoke-CimMethod @invCimParams
	}
	
	function restartComputer
	{
		
	}
	
	function unJoinComputer
	{
		$richtextbox5.Text = "Removing Computer from Domain and joining WorkgroupS. It's a new elite workgroup. Not your grandfathers workgroup that's for sure."
		Remove-Computer -ComputerName $Computer -LocalCredential $LocalCredential -UnjoinDomainCredential $DomainCredential -Workgroup WorkgroupS -Restart -Force
	}
	
	function reJoinComputer
	{
		$richtextbox5.Text = "Adding the Computer to the domain. It's what all the cool kids are doing!"
		Add-Computer -ComputerName $Computer -DomainName $DomainName -Credential $DomainCredential -LocalCredential $LocalCredential -Restart -Force
	}
	
	function Test-DomainTrust ($Computername)
	{
		$Result = netdom verify /domain: $env:COMPUTERNAME
		if ($Result -match 'command completed successfully')
		{
			$richtextbox5.Text = "Domain Trust Established. Nothing Needed."
		}
		else
		{
			$richtextbox5.Text = "Domain Trust Lost. Please Locate Domain Trust."
		}
	}
	
	
	$buttonTestTrustRelationshi_Click={
		Test-DomainTrust
	}
	
	$button38_Click={
		unJoinComputer
	}
	
	$button39_Click={
		reJoinComputer
	}
	
	$buttonCheckPassword_Click={
		testPassword
	}
	
	$buttonResetPassword_Click={
		repairPassword
	}
	
	$buttonDissociateFromDomain_Click={
		unJoinComputerRemote
	}
	
	$buttonAssociateWithDomain_Click={
		reJoinComputerRemote
	}
	
	$groupbox10_Enter={
		#TODO: Place custom script here
		
	}
	
	$buttonClassConfP1_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonDaytonaClassConfP1_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonPasswordResetForm_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonNewRequest_Click={
		#TODO: Place custom script here
		
	}
	
	$cMActionsToolStripMenuItem_Click={
		Show-ConfigurationManagerActions-popupwindow_psf | Out-Null
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formTechTool.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelBuyingMeATea.remove_LinkClicked($linklabelBuyingMeATea_LinkClicked)
			$buttonConvert.remove_Click($buttonConvert_Click)
			$buttonEncodeImage.remove_Click($buttonEncodeImage_Click)
			$buttonDecodeImage.remove_Click($buttonDecodeImage_Click)
			$buttonEncode64.remove_Click($buttonEncode64_Click)
			$buttonDecode64.remove_Click($buttonDecode64_Click)
			$buttonCopyToClipboard.remove_Click($buttonCopyToClipboard_Click)
			$buttonHPWarranty.remove_Click($buttonHPWarranty_Click)
			$buttonHPDrivers.remove_Click($buttonHPDrivers_Click)
			$buttonFindESC.remove_Click($buttonFindESC_Click)
			$buttonDellDrivers.remove_Click($buttonDellDrivers_Click)
			$buttonFindST.remove_Click($buttonFindST_Click)
			$buttonTechDirect.remove_Click($buttonTechDirect_Click)
			$buttonDellWarranty.remove_Click($buttonDellWarranty_Click)
			$buttonUninstallReinstall.remove_Click($buttonUninstallReinstall_Click)
			$buttonCheckWMI.remove_Click($buttonCheckWMI_Click)
			$buttonResetRepo.remove_Click($buttonResetRepo_Click)
			$buttonSalvageRepo.remove_Click($buttonSalvageRepo_Click)
			$buttonCheckSCCM.remove_Click($buttonCheckSCCM_Click)
			$buttonRepairSCCM.remove_Click($buttonRepairSCCM_Click)
			$buttonCCMRepairLog.remove_Click($buttonCCMRepairLog_Click)
			$buttonCCMSetupLog.remove_Click($buttonCCMSetupLog_Click)
			$buttonCMTrace.remove_Click($buttonCMTrace_Click)
			$buttonUninstallSCCM.remove_Click($buttonUninstallSCCM_Click)
			$buttonDelSCCMCache.remove_Click($buttonDelSCCMCache_Click)
			$buttonInstallSCCM.remove_Click($buttonInstallSCCM_Click)
			$buttonSCCMLogs.remove_Click($buttonSCCMLogs_Click)
			$buttonClientHealthEval.remove_Click($buttonClientHealthEval_Click)
			$buttonRunMachinePolicy.remove_Click($buttonRunMachinePolicy_Click)
			$buttonRestartConfigMan.remove_Click($buttonRestartConfigMan_Click)
			$buttonPrograms.remove_Click($buttonPrograms_Click)
			$buttonInventory.remove_Click($buttonInventory_Click)
			$buttonPrinters.remove_Click($buttonPrinters_Click)
			$buttonBackup.remove_Click($buttonBackup_Click)
			$buttonRunInventory.remove_Click($buttonRunInventory_Click)
			$buttonDevMode.remove_Click($buttonDevMode_Click)
			$buttonScrapeAD.remove_Click($buttonScrapeAD_Click)
			$buttonADUC.remove_Click($buttonADUC_Click)
			$buttonComputerManagement.remove_Click($buttonComputerManagement_Click)
			$buttonDeviceManager.remove_Click($buttonDeviceManager_Click)
			$buttonSCCM.remove_Click($buttonSCCM_Click)
			$buttonRegedit.remove_Click($buttonRegedit_Click)
			$buttonControlPanel.remove_Click($buttonControlPanel_Click)
			$buttonPrintManagement.remove_Click($buttonPrintManagement_Click)
			$buttonDeleteSCCMCache.remove_Click($buttonDeleteSCCMCache_Click)
			$buttonWinSysInfo.remove_Click($buttonWinSysInfo_Click)
			$buttonProgramList.remove_Click($buttonProgramList_Click)
			$buttonNewRequest.remove_Click($buttonNewRequest_Click)
			$buttonPasswordResetForm.remove_Click($buttonPasswordResetForm_Click)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$buttonAssociateWithDomain.remove_Click($buttonAssociateWithDomain_Click)
			$buttonDissociateFromDomain.remove_Click($buttonDissociateFromDomain_Click)
			$buttonCheckPassword.remove_Click($buttonCheckPassword_Click)
			$buttonResetPassword.remove_Click($buttonResetPassword_Click)
			$buttonTestTrustRelationshi.remove_Click($buttonTestTrustRelationshi_Click)
			$button39.remove_Click($button39_Click)
			$button38.remove_Click($button38_Click)
			$formTechTool.remove_Load($formTechTool_Load)
			$systemInformationToolStripMenuItem.remove_Click($systemInformationToolStripMenuItem_Click)
			$aboutTheToolToolStripMenuItem.remove_Click($aboutTheToolToolStripMenuItem_Click)
			$aboutTheAuthorToolStripMenuItem.remove_Click($aboutTheAuthorToolStripMenuItem_Click)
			$aboutLifeToolStripMenuItem.remove_Click($aboutLifeToolStripMenuItem_Click)
			$cMActionsToolStripMenuItem.remove_Click($cMActionsToolStripMenuItem_Click)
			$formTechTool.remove_Load($Form_StateCorrection_Load)
			$formTechTool.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formTechTool.SuspendLayout()
	$menustrip1.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox8.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupbox9.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage4.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$tabpage6.SuspendLayout()
	$groupbox12.SuspendLayout()
	$Info.SuspendLayout()
	$groupbox4.SuspendLayout()
	$groupbox5.SuspendLayout()
	$tabpage7.SuspendLayout()
	$tabpage8.SuspendLayout()
	$groupbox13.SuspendLayout()
	$groupbox14.SuspendLayout()
	$tabpage9.SuspendLayout()
	$groupbox15.SuspendLayout()
	$groupbox16.SuspendLayout()
	#
	# formTechTool
	#
	$formTechTool.Controls.Add($menustrip1)
	$formTechTool.Controls.Add($tabcontrol1)
	$formTechTool.AutoScaleDimensions = '6, 13'
	$formTechTool.AutoScaleMode = 'Font'
	$formTechTool.AutoValidate = 'Disable'
	$formTechTool.ClientSize = '404, 482'
	$formTechTool.Name = 'formTechTool'
	$formTechTool.Text = 'Tech Tool'
	$formTechTool.add_Load($formTechTool_Load)
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($utilityBeltToolStripMenuItem)
	[void]$menustrip1.Items.Add($computerInfoToolStripMenuItem)
	[void]$menustrip1.Items.Add($helpToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '404, 24'
	$menustrip1.TabIndex = 12
	$menustrip1.Text = 'menustrip1'
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Controls.Add($tabpage4)
	$tabcontrol1.Controls.Add($tabpage6)
	$tabcontrol1.Controls.Add($tabpage7)
	$tabcontrol1.Controls.Add($tabpage8)
	$tabcontrol1.Controls.Add($tabpage9)
	$tabcontrol1.Location = '0, 27'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '404, 458'
	$tabcontrol1.TabIndex = 0
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($linklabelBuyingMeATea)
	$tabpage1.Controls.Add($labelIfYouLikeMyWorkPleas)
	$tabpage1.Controls.Add($labelDomainTrustResolver)
	$tabpage1.Controls.Add($labelTicketSearchTools)
	$tabpage1.Controls.Add($labelTDX)
	$tabpage1.Controls.Add($labelVersion9192019)
	$tabpage1.Controls.Add($labelOtherVendorInformati)
	$tabpage1.Controls.Add($labelDellHPQuickLinks)
	$tabpage1.Controls.Add($labelVendorTools)
	$tabpage1.Controls.Add($labelQuickLinksToToolsIUs)
	$tabpage1.Controls.Add($labelTools)
	$tabpage1.Controls.Add($labelBackupTheUsersProfil)
	$tabpage1.Controls.Add($labelProfileBackup)
	$tabpage1.Controls.Add($labelMultipleWMITools)
	$tabpage1.Controls.Add($labelMultipleSCCMTools)
	$tabpage1.Controls.Add($labelSCCM)
	$tabpage1.Controls.Add($labelTextBase64)
	$tabpage1.Controls.Add($labelSecureString)
	$tabpage1.Controls.Add($labelImageToBase10)
	$tabpage1.Controls.Add($labelConverters)
	$tabpage1.Controls.Add($labelPleaseLetMeKnowIfSom)
	$tabpage1.Controls.Add($labelWelcomeToMynewOctobe)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '396, 432'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Main'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# linklabelBuyingMeATea
	#
	$linklabelBuyingMeATea.Font = 'Lucida Handwriting, 8.25pt'
	$linklabelBuyingMeATea.Location = '240, 416'
	$linklabelBuyingMeATea.Name = 'linklabelBuyingMeATea'
	$linklabelBuyingMeATea.Size = '132, 14'
	$linklabelBuyingMeATea.TabIndex = 25
	$linklabelBuyingMeATea.TabStop = $True
	$linklabelBuyingMeATea.Text = 'buying me a tea.'
	$linklabelBuyingMeATea.UseCompatibleTextRendering = $True
	$linklabelBuyingMeATea.add_LinkClicked($linklabelBuyingMeATea_LinkClicked)
	#
	# labelIfYouLikeMyWorkPleas
	#
	$labelIfYouLikeMyWorkPleas.AutoSize = $True
	$labelIfYouLikeMyWorkPleas.Font = 'Lucida Handwriting, 8.25pt'
	$labelIfYouLikeMyWorkPleas.Location = '21, 416'
	$labelIfYouLikeMyWorkPleas.Name = 'labelIfYouLikeMyWorkPleas'
	$labelIfYouLikeMyWorkPleas.Size = '230, 19'
	$labelIfYouLikeMyWorkPleas.TabIndex = 24
	$labelIfYouLikeMyWorkPleas.Text = 'If you like my work please consider '
	$labelIfYouLikeMyWorkPleas.UseCompatibleTextRendering = $True
	#
	# labelDomainTrustResolver
	#
	$labelDomainTrustResolver.AutoSize = $True
	$labelDomainTrustResolver.Font = 'Lucida Handwriting, 8.25pt'
	$labelDomainTrustResolver.Location = '22, 374'
	$labelDomainTrustResolver.Name = 'labelDomainTrustResolver'
	$labelDomainTrustResolver.Size = '149, 19'
	$labelDomainTrustResolver.TabIndex = 23
	$labelDomainTrustResolver.Text = 'Domain Trust Resolver'
	$labelDomainTrustResolver.UseCompatibleTextRendering = $True
	#
	# labelTicketSearchTools
	#
	$labelTicketSearchTools.AutoSize = $True
	$labelTicketSearchTools.Font = 'Lucida Handwriting, 8.25pt'
	$labelTicketSearchTools.Location = '53, 355'
	$labelTicketSearchTools.Name = 'labelTicketSearchTools'
	$labelTicketSearchTools.Size = '136, 19'
	$labelTicketSearchTools.TabIndex = 22
	$labelTicketSearchTools.Text = 'Ticket Search + Tools'
	$labelTicketSearchTools.UseCompatibleTextRendering = $True
	#
	# labelTDX
	#
	$labelTDX.AutoSize = $True
	$labelTDX.Font = 'Lucida Handwriting, 8.25pt'
	$labelTDX.Location = '22, 336'
	$labelTDX.Name = 'labelTDX'
	$labelTDX.Size = '37, 19'
	$labelTDX.TabIndex = 21
	$labelTDX.Text = 'TDX: '
	$labelTDX.UseCompatibleTextRendering = $True
	#
	# labelVersion9192019
	#
	$labelVersion9192019.AutoSize = $True
	$labelVersion9192019.Font = 'Lucida Handwriting, 8.25pt'
	$labelVersion9192019.Location = '273, 397'
	$labelVersion9192019.Name = 'labelVersion9192019'
	$labelVersion9192019.Size = '120, 19'
	$labelVersion9192019.TabIndex = 20
	$labelVersion9192019.Text = 'Version: 9.19.2019'
	$labelVersion9192019.UseCompatibleTextRendering = $True
	#
	# labelOtherVendorInformati
	#
	$labelOtherVendorInformati.AutoSize = $True
	$labelOtherVendorInformati.Font = 'Lucida Handwriting, 8.25pt'
	$labelOtherVendorInformati.Location = '53, 178'
	$labelOtherVendorInformati.Name = 'labelOtherVendorInformati'
	$labelOtherVendorInformati.Size = '175, 19'
	$labelOtherVendorInformati.TabIndex = 18
	$labelOtherVendorInformati.Text = 'Other Vendor Information'
	$labelOtherVendorInformati.UseCompatibleTextRendering = $True
	#
	# labelDellHPQuickLinks
	#
	$labelDellHPQuickLinks.AutoSize = $True
	$labelDellHPQuickLinks.Font = 'Lucida Handwriting, 8.25pt'
	$labelDellHPQuickLinks.Location = '53, 159'
	$labelDellHPQuickLinks.Name = 'labelDellHPQuickLinks'
	$labelDellHPQuickLinks.Size = '126, 19'
	$labelDellHPQuickLinks.TabIndex = 17
	$labelDellHPQuickLinks.Text = 'Dell/HP quick links'
	$labelDellHPQuickLinks.UseCompatibleTextRendering = $True
	#
	# labelVendorTools
	#
	$labelVendorTools.AutoSize = $True
	$labelVendorTools.Font = 'Lucida Handwriting, 8.25pt'
	$labelVendorTools.Location = '22, 138'
	$labelVendorTools.Name = 'labelVendorTools'
	$labelVendorTools.Size = '94, 19'
	$labelVendorTools.TabIndex = 16
	$labelVendorTools.Text = 'Vendor Tools: '
	$labelVendorTools.UseCompatibleTextRendering = $True
	#
	# labelQuickLinksToToolsIUs
	#
	$labelQuickLinksToToolsIUs.AutoSize = $True
	$labelQuickLinksToToolsIUs.Font = 'Lucida Handwriting, 8.25pt'
	$labelQuickLinksToToolsIUs.Location = '53, 317'
	$labelQuickLinksToToolsIUs.Name = 'labelQuickLinksToToolsIUs'
	$labelQuickLinksToToolsIUs.Size = '160, 19'
	$labelQuickLinksToToolsIUs.TabIndex = 15
	$labelQuickLinksToToolsIUs.Text = 'Quick links to tools I use'
	$labelQuickLinksToToolsIUs.UseCompatibleTextRendering = $True
	#
	# labelTools
	#
	$labelTools.AutoSize = $True
	$labelTools.Font = 'Lucida Handwriting, 8.25pt'
	$labelTools.Location = '22, 298'
	$labelTools.Name = 'labelTools'
	$labelTools.Size = '44, 19'
	$labelTools.TabIndex = 14
	$labelTools.Text = 'Tools: '
	$labelTools.UseCompatibleTextRendering = $True
	#
	# labelBackupTheUsersProfil
	#
	$labelBackupTheUsersProfil.AutoSize = $True
	$labelBackupTheUsersProfil.Font = 'Lucida Handwriting, 8.25pt'
	$labelBackupTheUsersProfil.Location = '52, 279'
	$labelBackupTheUsersProfil.Name = 'labelBackupTheUsersProfil'
	$labelBackupTheUsersProfil.Size = '155, 19'
	$labelBackupTheUsersProfil.TabIndex = 13
	$labelBackupTheUsersProfil.Text = 'Backup the users profile'
	$labelBackupTheUsersProfil.UseCompatibleTextRendering = $True
	#
	# labelProfileBackup
	#
	$labelProfileBackup.AutoSize = $True
	$labelProfileBackup.Font = 'Lucida Handwriting, 8.25pt'
	$labelProfileBackup.Location = '22, 260'
	$labelProfileBackup.Name = 'labelProfileBackup'
	$labelProfileBackup.Size = '104, 19'
	$labelProfileBackup.TabIndex = 12
	$labelProfileBackup.Text = 'Profile Backup: '
	$labelProfileBackup.UseCompatibleTextRendering = $True
	#
	# labelMultipleWMITools
	#
	$labelMultipleWMITools.AutoSize = $True
	$labelMultipleWMITools.Font = 'Lucida Handwriting, 8.25pt'
	$labelMultipleWMITools.Location = '53, 241'
	$labelMultipleWMITools.Name = 'labelMultipleWMITools'
	$labelMultipleWMITools.Size = '121, 19'
	$labelMultipleWMITools.TabIndex = 11
	$labelMultipleWMITools.Text = 'Multiple WMI tools'
	$labelMultipleWMITools.UseCompatibleTextRendering = $True
	#
	# labelMultipleSCCMTools
	#
	$labelMultipleSCCMTools.AutoSize = $True
	$labelMultipleSCCMTools.Font = 'Lucida Handwriting, 8.25pt'
	$labelMultipleSCCMTools.Location = '53, 216'
	$labelMultipleSCCMTools.Name = 'labelMultipleSCCMTools'
	$labelMultipleSCCMTools.Size = '127, 19'
	$labelMultipleSCCMTools.TabIndex = 10
	$labelMultipleSCCMTools.Text = 'Multiple SCCM tools'
	$labelMultipleSCCMTools.UseCompatibleTextRendering = $True
	#
	# labelSCCM
	#
	$labelSCCM.AutoSize = $True
	$labelSCCM.Font = 'Lucida Handwriting, 8.25pt'
	$labelSCCM.Location = '22, 197'
	$labelSCCM.Name = 'labelSCCM'
	$labelSCCM.Size = '45, 19'
	$labelSCCM.TabIndex = 9
	$labelSCCM.Text = 'SCCM: '
	$labelSCCM.UseCompatibleTextRendering = $True
	#
	# labelTextBase64
	#
	$labelTextBase64.AutoSize = $True
	$labelTextBase64.Font = 'Lucida Handwriting, 8.25pt'
	$labelTextBase64.Location = '52, 119'
	$labelTextBase64.Name = 'labelTextBase64'
	$labelTextBase64.Size = '78, 19'
	$labelTextBase64.TabIndex = 8
	$labelTextBase64.Text = 'Text base64'
	$labelTextBase64.UseCompatibleTextRendering = $True
	#
	# labelSecureString
	#
	$labelSecureString.AutoSize = $True
	$labelSecureString.Font = 'Lucida Handwriting, 8.25pt'
	$labelSecureString.Location = '52, 100'
	$labelSecureString.Name = 'labelSecureString'
	$labelSecureString.Size = '89, 19'
	$labelSecureString.TabIndex = 7
	$labelSecureString.Text = 'Secure String'
	$labelSecureString.UseCompatibleTextRendering = $True
	#
	# labelImageToBase10
	#
	$labelImageToBase10.AutoSize = $True
	$labelImageToBase10.Font = 'Lucida Handwriting, 8.25pt'
	$labelImageToBase10.Location = '52, 81'
	$labelImageToBase10.Name = 'labelImageToBase10'
	$labelImageToBase10.Size = '110, 19'
	$labelImageToBase10.TabIndex = 6
	$labelImageToBase10.Text = 'Image to base10'
	$labelImageToBase10.UseCompatibleTextRendering = $True
	#
	# labelConverters
	#
	$labelConverters.AutoSize = $True
	$labelConverters.Font = 'Lucida Handwriting, 8.25pt'
	$labelConverters.Location = '22, 62'
	$labelConverters.Name = 'labelConverters'
	$labelConverters.Size = '78, 19'
	$labelConverters.TabIndex = 5
	$labelConverters.Text = 'Converters: '
	$labelConverters.UseCompatibleTextRendering = $True
	#
	# labelPleaseLetMeKnowIfSom
	#
	$labelPleaseLetMeKnowIfSom.AutoSize = $True
	$labelPleaseLetMeKnowIfSom.Font = 'Lucida Handwriting, 8.25pt'
	$labelPleaseLetMeKnowIfSom.Location = '119, 46'
	$labelPleaseLetMeKnowIfSom.Name = 'labelPleaseLetMeKnowIfSom'
	$labelPleaseLetMeKnowIfSom.Size = '277, 19'
	$labelPleaseLetMeKnowIfSom.TabIndex = 1
	$labelPleaseLetMeKnowIfSom.Text = 'Please let me know if something is broken. '
	$labelPleaseLetMeKnowIfSom.UseCompatibleTextRendering = $True
	#
	# labelWelcomeToMynewOctobe
	#
	$labelWelcomeToMynewOctobe.AutoSize = $True
	$labelWelcomeToMynewOctobe.Font = 'Lucida Handwriting, 14.25pt'
	$labelWelcomeToMynewOctobe.Location = '21, 16'
	$labelWelcomeToMynewOctobe.Name = 'labelWelcomeToMynewOctobe'
	$labelWelcomeToMynewOctobe.Size = '288, 30'
	$labelWelcomeToMynewOctobe.TabIndex = 0
	$labelWelcomeToMynewOctobe.Text = 'Welcome to my new tool.  '
	$labelWelcomeToMynewOctobe.UseCompatibleTextRendering = $True
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($statusbar1)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox8)
	$tabpage2.Controls.Add($buttonCopyToClipboard)
	$tabpage2.Controls.Add($labelWelcomeToFr33Bas3The)
	$tabpage2.Controls.Add($label7)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '396, 432'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Converters'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# statusbar1
	#
	$statusbar1.Location = '3, 412'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '390, 17'
	$statusbar1.TabIndex = 23
	$statusbar1.Text = 'statusbar1'
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($textbox1)
	$groupbox6.Controls.Add($buttonConvert)
	$groupbox6.Location = '9, 88'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '378, 73'
	$groupbox6.TabIndex = 22
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'SecureString'
	$groupbox6.UseCompatibleTextRendering = $True
	#
	# textbox1
	#
	$textbox1.Location = '16, 31'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '218, 20'
	$textbox1.TabIndex = 1
	#
	# buttonConvert
	#
	$buttonConvert.Location = '283, 31'
	$buttonConvert.Name = 'buttonConvert'
	$buttonConvert.Size = '75, 23'
	$buttonConvert.TabIndex = 0
	$buttonConvert.Text = 'Convert'
	$buttonConvert.UseCompatibleTextRendering = $True
	$buttonConvert.UseVisualStyleBackColor = $True
	$buttonConvert.add_Click($buttonConvert_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($buttonEncodeImage)
	$groupbox7.Controls.Add($textbox10)
	$groupbox7.Controls.Add($buttonDecodeImage)
	$groupbox7.Controls.Add($labelImageLocation)
	$groupbox7.Location = '9, 5'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '378, 77'
	$groupbox7.TabIndex = 21
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'Image'
	$groupbox7.UseCompatibleTextRendering = $True
	#
	# buttonEncodeImage
	#
	$buttonEncodeImage.Location = '191, 44'
	$buttonEncodeImage.Name = 'buttonEncodeImage'
	$buttonEncodeImage.Size = '89, 23'
	$buttonEncodeImage.TabIndex = 9
	$buttonEncodeImage.Text = 'Encode Image'
	$buttonEncodeImage.UseCompatibleTextRendering = $True
	$buttonEncodeImage.UseVisualStyleBackColor = $True
	$buttonEncodeImage.add_Click($buttonEncodeImage_Click)
	#
	# textbox10
	#
	$textbox10.Location = '100, 18'
	$textbox10.Name = 'textbox10'
	$textbox10.Size = '180, 20'
	$textbox10.TabIndex = 11
	#
	# buttonDecodeImage
	#
	$buttonDecodeImage.Location = '283, 44'
	$buttonDecodeImage.Name = 'buttonDecodeImage'
	$buttonDecodeImage.Size = '89, 23'
	$buttonDecodeImage.TabIndex = 13
	$buttonDecodeImage.Text = 'Decode Image'
	$buttonDecodeImage.UseCompatibleTextRendering = $True
	$buttonDecodeImage.UseVisualStyleBackColor = $True
	$buttonDecodeImage.add_Click($buttonDecodeImage_Click)
	#
	# labelImageLocation
	#
	$labelImageLocation.AutoSize = $True
	$labelImageLocation.Location = '6, 21'
	$labelImageLocation.Name = 'labelImageLocation'
	$labelImageLocation.Size = '88, 17'
	$labelImageLocation.TabIndex = 12
	$labelImageLocation.Text = 'Image Location: '
	$labelImageLocation.UseCompatibleTextRendering = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($richtextbox1)
	$groupbox8.Controls.Add($buttonEncode64)
	$groupbox8.Controls.Add($buttonDecode64)
	$groupbox8.Location = '2, 167'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '392, 210'
	$groupbox8.TabIndex = 20
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Text'
	$groupbox8.UseCompatibleTextRendering = $True
	#
	# richtextbox1
	#
	$richtextbox1.Location = '7, 48'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.Size = '380, 156'
	$richtextbox1.TabIndex = 0
	$richtextbox1.Text = ''
	#
	# buttonEncode64
	#
	$buttonEncode64.Location = '229, 19'
	$buttonEncode64.Name = 'buttonEncode64'
	$buttonEncode64.Size = '75, 23'
	$buttonEncode64.TabIndex = 2
	$buttonEncode64.Text = 'Encode64'
	$buttonEncode64.UseCompatibleTextRendering = $True
	$buttonEncode64.UseVisualStyleBackColor = $True
	$buttonEncode64.add_Click($buttonEncode64_Click)
	#
	# buttonDecode64
	#
	$buttonDecode64.Location = '310, 19'
	$buttonDecode64.Name = 'buttonDecode64'
	$buttonDecode64.Size = '75, 23'
	$buttonDecode64.TabIndex = 3
	$buttonDecode64.Text = 'Decode64'
	$buttonDecode64.UseCompatibleTextRendering = $True
	$buttonDecode64.UseVisualStyleBackColor = $True
	$buttonDecode64.add_Click($buttonDecode64_Click)
	#
	# buttonCopyToClipboard
	#
	$buttonCopyToClipboard.Location = '285, 383'
	$buttonCopyToClipboard.Name = 'buttonCopyToClipboard'
	$buttonCopyToClipboard.Size = '109, 23'
	$buttonCopyToClipboard.TabIndex = 18
	$buttonCopyToClipboard.Text = 'Copy to Clipboard'
	$buttonCopyToClipboard.UseCompatibleTextRendering = $True
	$buttonCopyToClipboard.UseVisualStyleBackColor = $True
	$buttonCopyToClipboard.add_Click($buttonCopyToClipboard_Click)
	#
	# labelWelcomeToFr33Bas3The
	#
	$labelWelcomeToFr33Bas3The.AutoSize = $True
	$labelWelcomeToFr33Bas3The.Location = '75, -15'
	$labelWelcomeToFr33Bas3The.Name = 'labelWelcomeToFr33Bas3The'
	$labelWelcomeToFr33Bas3The.Size = '252, 17'
	$labelWelcomeToFr33Bas3The.TabIndex = 17
	$labelWelcomeToFr33Bas3The.Text = 'Welcome to Fr33Bas3 the Base64 Encoding Tool'
	$labelWelcomeToFr33Bas3The.UseCompatibleTextRendering = $True
	#
	# label7
	#
	$label7.AutoSize = $True
	$label7.Location = '-62, 159'
	$label7.Name = 'label7'
	$label7.Size = '35, 17'
	$label7.TabIndex = 6
	$label7.Text = 'label7'
	$label7.UseCompatibleTextRendering = $True
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($groupbox9)
	$tabpage3.Controls.Add($groupbox1)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '396, 432'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Vendor Tools'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# groupbox9
	#
	$groupbox9.Controls.Add($buttonHPWarranty)
	$groupbox9.Controls.Add($buttonHPDrivers)
	$groupbox9.Location = '0, 189'
	$groupbox9.Name = 'groupbox9'
	$groupbox9.Size = '165, 94'
	$groupbox9.TabIndex = 60
	$groupbox9.TabStop = $False
	$groupbox9.Text = 'HP'
	$groupbox9.UseCompatibleTextRendering = $True
	#
	# buttonHPWarranty
	#
	$buttonHPWarranty.Location = '40, 21'
	$buttonHPWarranty.Name = 'buttonHPWarranty'
	$buttonHPWarranty.Size = '85, 23'
	$buttonHPWarranty.TabIndex = 52
	$buttonHPWarranty.Text = 'HP Warranty'
	$buttonHPWarranty.UseCompatibleTextRendering = $True
	$buttonHPWarranty.UseVisualStyleBackColor = $True
	$buttonHPWarranty.add_Click($buttonHPWarranty_Click)
	#
	# buttonHPDrivers
	#
	$buttonHPDrivers.Location = '40, 50'
	$buttonHPDrivers.Name = 'buttonHPDrivers'
	$buttonHPDrivers.Size = '85, 23'
	$buttonHPDrivers.TabIndex = 54
	$buttonHPDrivers.Text = 'HP Drivers'
	$buttonHPDrivers.UseCompatibleTextRendering = $True
	$buttonHPDrivers.UseVisualStyleBackColor = $True
	$buttonHPDrivers.add_Click($buttonHPDrivers_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($labelExpressServiceCodeSe)
	$groupbox1.Controls.Add($labelExpressServiceCode)
	$groupbox1.Controls.Add($buttonFindESC)
	$groupbox1.Controls.Add($buttonDellDrivers)
	$groupbox1.Controls.Add($buttonFindST)
	$groupbox1.Controls.Add($buttonTechDirect)
	$groupbox1.Controls.Add($textbox11)
	$groupbox1.Controls.Add($labelServiceTag)
	$groupbox1.Controls.Add($buttonDellWarranty)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Location = '0, 6'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '400, 177'
	$groupbox1.TabIndex = 18
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Dell'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# labelExpressServiceCodeSe
	#
	$labelExpressServiceCodeSe.AutoSize = $True
	$labelExpressServiceCodeSe.Location = '74, 31'
	$labelExpressServiceCodeSe.Name = 'labelExpressServiceCodeSe'
	$labelExpressServiceCodeSe.Size = '240, 17'
	$labelExpressServiceCodeSe.TabIndex = 13
	$labelExpressServiceCodeSe.Text = 'Express Service Code / Service Tag Calculator'
	$labelExpressServiceCodeSe.UseCompatibleTextRendering = $True
	#
	# labelExpressServiceCode
	#
	$labelExpressServiceCode.AutoSize = $True
	$labelExpressServiceCode.Location = '17, 96'
	$labelExpressServiceCode.Name = 'labelExpressServiceCode'
	$labelExpressServiceCode.Size = '119, 17'
	$labelExpressServiceCode.TabIndex = 17
	$labelExpressServiceCode.Text = 'Express Service Code:'
	$labelExpressServiceCode.UseCompatibleTextRendering = $True
	#
	# buttonFindESC
	#
	$buttonFindESC.Location = '219, 120'
	$buttonFindESC.Name = 'buttonFindESC'
	$buttonFindESC.Size = '75, 23'
	$buttonFindESC.TabIndex = 11
	$buttonFindESC.Text = 'Find ESC'
	$buttonFindESC.UseCompatibleTextRendering = $True
	$buttonFindESC.UseVisualStyleBackColor = $True
	$buttonFindESC.add_Click($buttonFindESC_Click)
	#
	# buttonDellDrivers
	#
	$buttonDellDrivers.Location = '99, 120'
	$buttonDellDrivers.Name = 'buttonDellDrivers'
	$buttonDellDrivers.Size = '85, 23'
	$buttonDellDrivers.TabIndex = 56
	$buttonDellDrivers.Text = 'Dell Drivers'
	$buttonDellDrivers.UseCompatibleTextRendering = $True
	$buttonDellDrivers.UseVisualStyleBackColor = $True
	$buttonDellDrivers.add_Click($buttonDellDrivers_Click)
	#
	# buttonFindST
	#
	$buttonFindST.Location = '300, 120'
	$buttonFindST.Name = 'buttonFindST'
	$buttonFindST.Size = '75, 23'
	$buttonFindST.TabIndex = 16
	$buttonFindST.Text = 'Find ST'
	$buttonFindST.UseCompatibleTextRendering = $True
	$buttonFindST.UseVisualStyleBackColor = $True
	$buttonFindST.add_Click($buttonFindST_Click)
	#
	# buttonTechDirect
	#
	$buttonTechDirect.Location = '8, 149'
	$buttonTechDirect.Name = 'buttonTechDirect'
	$buttonTechDirect.Size = '85, 23'
	$buttonTechDirect.TabIndex = 55
	$buttonTechDirect.Text = 'Tech Direct'
	$buttonTechDirect.UseCompatibleTextRendering = $True
	$buttonTechDirect.UseVisualStyleBackColor = $True
	$buttonTechDirect.add_Click($buttonTechDirect_Click)
	#
	# textbox11
	#
	$textbox11.Location = '142, 67'
	$textbox11.Name = 'textbox11'
	$textbox11.Size = '233, 20'
	$textbox11.TabIndex = 12
	#
	# labelServiceTag
	#
	$labelServiceTag.AutoSize = $True
	$labelServiceTag.Location = '17, 70'
	$labelServiceTag.Name = 'labelServiceTag'
	$labelServiceTag.Size = '68, 17'
	$labelServiceTag.TabIndex = 15
	$labelServiceTag.Text = 'Service Tag:'
	$labelServiceTag.UseCompatibleTextRendering = $True
	#
	# buttonDellWarranty
	#
	$buttonDellWarranty.Location = '8, 120'
	$buttonDellWarranty.Name = 'buttonDellWarranty'
	$buttonDellWarranty.Size = '85, 23'
	$buttonDellWarranty.TabIndex = 53
	$buttonDellWarranty.Text = 'Dell Warranty'
	$buttonDellWarranty.UseCompatibleTextRendering = $True
	$buttonDellWarranty.UseVisualStyleBackColor = $True
	$buttonDellWarranty.add_Click($buttonDellWarranty_Click)
	#
	# textbox2
	#
	$textbox2.Location = '142, 93'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '233, 20'
	$textbox2.TabIndex = 14
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($richtextbox3)
	$tabpage4.Controls.Add($groupbox3)
	$tabpage4.Controls.Add($groupbox2)
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '396, 432'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'SCCM'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# richtextbox3
	#
	$richtextbox3.Location = '-4, 177'
	$richtextbox3.Name = 'richtextbox3'
	$richtextbox3.Size = '404, 255'
	$richtextbox3.TabIndex = 7
	$richtextbox3.Text = ''
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonUninstallReinstall)
	$groupbox3.Controls.Add($buttonCheckWMI)
	$groupbox3.Controls.Add($buttonResetRepo)
	$groupbox3.Controls.Add($buttonSalvageRepo)
	$groupbox3.Location = '266, 6'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '127, 118'
	$groupbox3.TabIndex = 6
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'WMI'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# buttonUninstallReinstall
	#
	$buttonUninstallReinstall.BackColor = 'Tomato'
	$buttonUninstallReinstall.Location = '6, 88'
	$buttonUninstallReinstall.Name = 'buttonUninstallReinstall'
	$buttonUninstallReinstall.Size = '114, 23'
	$buttonUninstallReinstall.TabIndex = 5
	$buttonUninstallReinstall.Text = 'Uninstall/Reinstall'
	$buttonUninstallReinstall.UseCompatibleTextRendering = $True
	$buttonUninstallReinstall.UseVisualStyleBackColor = $False
	$buttonUninstallReinstall.add_Click($buttonUninstallReinstall_Click)
	#
	# buttonCheckWMI
	#
	$buttonCheckWMI.Location = '6, 19'
	$buttonCheckWMI.Name = 'buttonCheckWMI'
	$buttonCheckWMI.Size = '111, 23'
	$buttonCheckWMI.TabIndex = 4
	$buttonCheckWMI.Text = 'Check WMI'
	$buttonCheckWMI.UseCompatibleTextRendering = $True
	$buttonCheckWMI.UseVisualStyleBackColor = $True
	$buttonCheckWMI.add_Click($buttonCheckWMI_Click)
	#
	# buttonResetRepo
	#
	$buttonResetRepo.Location = '6, 65'
	$buttonResetRepo.Name = 'buttonResetRepo'
	$buttonResetRepo.Size = '112, 23'
	$buttonResetRepo.TabIndex = 2
	$buttonResetRepo.Text = 'Reset Repo'
	$buttonResetRepo.UseCompatibleTextRendering = $True
	$buttonResetRepo.UseVisualStyleBackColor = $True
	$buttonResetRepo.add_Click($buttonResetRepo_Click)
	#
	# buttonSalvageRepo
	#
	$buttonSalvageRepo.Location = '6, 42'
	$buttonSalvageRepo.Name = 'buttonSalvageRepo'
	$buttonSalvageRepo.Size = '112, 23'
	$buttonSalvageRepo.TabIndex = 0
	$buttonSalvageRepo.Text = 'Salvage Repo'
	$buttonSalvageRepo.UseCompatibleTextRendering = $True
	$buttonSalvageRepo.UseVisualStyleBackColor = $True
	$buttonSalvageRepo.add_Click($buttonSalvageRepo_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonCheckSCCM)
	$groupbox2.Controls.Add($buttonRepairSCCM)
	$groupbox2.Controls.Add($buttonCCMRepairLog)
	$groupbox2.Controls.Add($buttonCCMSetupLog)
	$groupbox2.Controls.Add($buttonCMTrace)
	$groupbox2.Controls.Add($buttonUninstallSCCM)
	$groupbox2.Controls.Add($buttonDelSCCMCache)
	$groupbox2.Controls.Add($buttonInstallSCCM)
	$groupbox2.Controls.Add($buttonSCCMLogs)
	$groupbox2.Controls.Add($buttonClientHealthEval)
	$groupbox2.Controls.Add($buttonRunMachinePolicy)
	$groupbox2.Controls.Add($buttonRestartConfigMan)
	$groupbox2.Location = '3, 6'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '238, 165'
	$groupbox2.TabIndex = 5
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'SCCM'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonCheckSCCM
	#
	$buttonCheckSCCM.Location = '121, 42'
	$buttonCheckSCCM.Name = 'buttonCheckSCCM'
	$buttonCheckSCCM.Size = '112, 23'
	$buttonCheckSCCM.TabIndex = 12
	$buttonCheckSCCM.Text = 'Check SCCM '
	$buttonCheckSCCM.UseCompatibleTextRendering = $True
	$buttonCheckSCCM.UseVisualStyleBackColor = $True
	$buttonCheckSCCM.add_Click($buttonCheckSCCM_Click)
	#
	# buttonRepairSCCM
	#
	$buttonRepairSCCM.Location = '7, 134'
	$buttonRepairSCCM.Name = 'buttonRepairSCCM'
	$buttonRepairSCCM.Size = '112, 23'
	$buttonRepairSCCM.TabIndex = 11
	$buttonRepairSCCM.Text = 'Repair SCCM'
	$buttonRepairSCCM.UseCompatibleTextRendering = $True
	$buttonRepairSCCM.UseVisualStyleBackColor = $True
	$buttonRepairSCCM.add_Click($buttonRepairSCCM_Click)
	#
	# buttonCCMRepairLog
	#
	$buttonCCMRepairLog.Location = '121, 65'
	$buttonCCMRepairLog.Name = 'buttonCCMRepairLog'
	$buttonCCMRepairLog.Size = '112, 23'
	$buttonCCMRepairLog.TabIndex = 10
	$buttonCCMRepairLog.Text = 'CCMRepair Log'
	$buttonCCMRepairLog.UseCompatibleTextRendering = $True
	$buttonCCMRepairLog.UseVisualStyleBackColor = $True
	$buttonCCMRepairLog.add_Click($buttonCCMRepairLog_Click)
	#
	# buttonCCMSetupLog
	#
	$buttonCCMSetupLog.Location = '7, 111'
	$buttonCCMSetupLog.Name = 'buttonCCMSetupLog'
	$buttonCCMSetupLog.Size = '112, 23'
	$buttonCCMSetupLog.TabIndex = 9
	$buttonCCMSetupLog.Text = 'CCMSetup Log'
	$buttonCCMSetupLog.UseCompatibleTextRendering = $True
	$buttonCCMSetupLog.UseVisualStyleBackColor = $True
	$buttonCCMSetupLog.add_Click($buttonCCMSetupLog_Click)
	#
	# buttonCMTrace
	#
	$buttonCMTrace.Location = '121, 88'
	$buttonCMTrace.Name = 'buttonCMTrace'
	$buttonCMTrace.Size = '112, 23'
	$buttonCMTrace.TabIndex = 8
	$buttonCMTrace.Text = 'CMTrace'
	$buttonCMTrace.UseCompatibleTextRendering = $True
	$buttonCMTrace.UseVisualStyleBackColor = $True
	$buttonCMTrace.add_Click($buttonCMTrace_Click)
	#
	# buttonUninstallSCCM
	#
	$buttonUninstallSCCM.BackColor = 'Tomato'
	$buttonUninstallSCCM.Location = '120, 111'
	$buttonUninstallSCCM.Name = 'buttonUninstallSCCM'
	$buttonUninstallSCCM.Size = '112, 23'
	$buttonUninstallSCCM.TabIndex = 7
	$buttonUninstallSCCM.Text = 'Uninstall SCCM'
	$buttonUninstallSCCM.UseCompatibleTextRendering = $True
	$buttonUninstallSCCM.UseVisualStyleBackColor = $False
	$buttonUninstallSCCM.add_Click($buttonUninstallSCCM_Click)
	#
	# buttonDelSCCMCache
	#
	$buttonDelSCCMCache.BackColor = 'Tomato'
	$buttonDelSCCMCache.Location = '120, 134'
	$buttonDelSCCMCache.Name = 'buttonDelSCCMCache'
	$buttonDelSCCMCache.Size = '112, 23'
	$buttonDelSCCMCache.TabIndex = 5
	$buttonDelSCCMCache.Text = 'Del SCCM Cache'
	$buttonDelSCCMCache.UseCompatibleTextRendering = $True
	$buttonDelSCCMCache.UseVisualStyleBackColor = $False
	$buttonDelSCCMCache.add_Click($buttonDelSCCMCache_Click)
	#
	# buttonInstallSCCM
	#
	$buttonInstallSCCM.Location = '121, 19'
	$buttonInstallSCCM.Name = 'buttonInstallSCCM'
	$buttonInstallSCCM.Size = '112, 23'
	$buttonInstallSCCM.TabIndex = 4
	$buttonInstallSCCM.Text = 'Install SCCM'
	$buttonInstallSCCM.UseCompatibleTextRendering = $True
	$buttonInstallSCCM.UseVisualStyleBackColor = $True
	$buttonInstallSCCM.add_Click($buttonInstallSCCM_Click)
	#
	# buttonSCCMLogs
	#
	$buttonSCCMLogs.Location = '7, 88'
	$buttonSCCMLogs.Name = 'buttonSCCMLogs'
	$buttonSCCMLogs.Size = '112, 23'
	$buttonSCCMLogs.TabIndex = 3
	$buttonSCCMLogs.Text = 'SCCM Logs'
	$buttonSCCMLogs.UseCompatibleTextRendering = $True
	$buttonSCCMLogs.UseVisualStyleBackColor = $True
	$buttonSCCMLogs.add_Click($buttonSCCMLogs_Click)
	#
	# buttonClientHealthEval
	#
	$buttonClientHealthEval.Location = '7, 65'
	$buttonClientHealthEval.Name = 'buttonClientHealthEval'
	$buttonClientHealthEval.Size = '112, 23'
	$buttonClientHealthEval.TabIndex = 2
	$buttonClientHealthEval.Text = 'Client Health Eval'
	$buttonClientHealthEval.UseCompatibleTextRendering = $True
	$buttonClientHealthEval.UseVisualStyleBackColor = $True
	$buttonClientHealthEval.add_Click($buttonClientHealthEval_Click)
	#
	# buttonRunMachinePolicy
	#
	$buttonRunMachinePolicy.Location = '7, 42'
	$buttonRunMachinePolicy.Name = 'buttonRunMachinePolicy'
	$buttonRunMachinePolicy.Size = '112, 23'
	$buttonRunMachinePolicy.TabIndex = 1
	$buttonRunMachinePolicy.Text = 'Run Machine Policy'
	$buttonRunMachinePolicy.UseCompatibleTextRendering = $True
	$buttonRunMachinePolicy.UseVisualStyleBackColor = $True
	$buttonRunMachinePolicy.add_Click($buttonRunMachinePolicy_Click)
	#
	# buttonRestartConfigMan
	#
	$buttonRestartConfigMan.Location = '7, 19'
	$buttonRestartConfigMan.Name = 'buttonRestartConfigMan'
	$buttonRestartConfigMan.Size = '112, 23'
	$buttonRestartConfigMan.TabIndex = 0
	$buttonRestartConfigMan.Text = 'Restart Config Man'
	$buttonRestartConfigMan.UseCompatibleTextRendering = $True
	$buttonRestartConfigMan.UseVisualStyleBackColor = $True
	$buttonRestartConfigMan.add_Click($buttonRestartConfigMan_Click)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($progressbar1)
	$tabpage6.Controls.Add($groupbox12)
	$tabpage6.Controls.Add($Info)
	$tabpage6.Controls.Add($labelProfileBackup005)
	$tabpage6.Controls.Add($buttonPrograms)
	$tabpage6.Controls.Add($buttonInventory)
	$tabpage6.Controls.Add($buttonPrinters)
	$tabpage6.Controls.Add($buttonBackup)
	$tabpage6.Controls.Add($groupbox4)
	$tabpage6.Controls.Add($groupbox5)
	$tabpage6.Controls.Add($richtextbox4)
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '396, 432'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Profile Backup'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# progressbar1
	#
	$progressbar1.Location = '-4, 410'
	$progressbar1.Name = 'progressbar1'
	$progressbar1.Size = '404, 21'
	$progressbar1.TabIndex = 62
	#
	# groupbox12
	#
	$groupbox12.Controls.Add($checkboxOpenOutlook)
	$groupbox12.Controls.Add($checkboxOpenFirefox)
	$groupbox12.Controls.Add($labelCheckDirectoryYouWan)
	$groupbox12.Controls.Add($checkboxOpenChrome)
	$groupbox12.Controls.Add($checkboxOpenOneDrive)
	$groupbox12.Location = '256, 6'
	$groupbox12.Name = 'groupbox12'
	$groupbox12.Size = '137, 105'
	$groupbox12.TabIndex = 61
	$groupbox12.TabStop = $False
	$groupbox12.Text = 'New Computer'
	$groupbox12.UseCompatibleTextRendering = $True
	#
	# checkboxOpenOutlook
	#
	$checkboxOpenOutlook.Location = '6, 19'
	$checkboxOpenOutlook.Name = 'checkboxOpenOutlook'
	$checkboxOpenOutlook.Size = '116, 24'
	$checkboxOpenOutlook.TabIndex = 54
	$checkboxOpenOutlook.Text = 'Open Outlook'
	$checkboxOpenOutlook.UseCompatibleTextRendering = $True
	$checkboxOpenOutlook.UseVisualStyleBackColor = $True
	#
	# checkboxOpenFirefox
	#
	$checkboxOpenFirefox.Location = '6, 76'
	$checkboxOpenFirefox.Name = 'checkboxOpenFirefox'
	$checkboxOpenFirefox.Size = '116, 24'
	$checkboxOpenFirefox.TabIndex = 60
	$checkboxOpenFirefox.Text = 'Open FireFox'
	$checkboxOpenFirefox.UseCompatibleTextRendering = $True
	$checkboxOpenFirefox.UseVisualStyleBackColor = $True
	#
	# labelCheckDirectoryYouWan
	#
	$labelCheckDirectoryYouWan.AutoSize = $True
	$labelCheckDirectoryYouWan.Location = '0, 31'
	$labelCheckDirectoryYouWan.Name = 'labelCheckDirectoryYouWan'
	$labelCheckDirectoryYouWan.Size = '0, 16'
	$labelCheckDirectoryYouWan.TabIndex = 57
	$labelCheckDirectoryYouWan.UseCompatibleTextRendering = $True
	#
	# checkboxOpenChrome
	#
	$checkboxOpenChrome.Location = '6, 57'
	$checkboxOpenChrome.Name = 'checkboxOpenChrome'
	$checkboxOpenChrome.Size = '116, 24'
	$checkboxOpenChrome.TabIndex = 59
	$checkboxOpenChrome.Text = 'Open Chrome'
	$checkboxOpenChrome.UseCompatibleTextRendering = $True
	$checkboxOpenChrome.UseVisualStyleBackColor = $True
	#
	# checkboxOpenOneDrive
	#
	$checkboxOpenOneDrive.Location = '6, 38'
	$checkboxOpenOneDrive.Name = 'checkboxOpenOneDrive'
	$checkboxOpenOneDrive.Size = '116, 24'
	$checkboxOpenOneDrive.TabIndex = 58
	$checkboxOpenOneDrive.Text = 'Open OneDrive'
	$checkboxOpenOneDrive.UseCompatibleTextRendering = $True
	$checkboxOpenOneDrive.UseVisualStyleBackColor = $True
	#
	# Info
	#
	$Info.Controls.Add($labelenvUserName)
	$Info.Controls.Add($labelOSInstallDate)
	$Info.Controls.Add($labelenvCOMPUTERNAME)
	$Info.Controls.Add($labelAuthenticatedUser)
	$Info.Controls.Add($labelInstDate)
	$Info.Controls.Add($labelWindowsUser)
	$Info.Controls.Add($label1)
	$Info.Controls.Add($labelDeviceName)
	$Info.Location = '3, 220'
	$Info.Name = 'Info'
	$Info.Size = '245, 100'
	$Info.TabIndex = 56
	$Info.TabStop = $False
	$Info.Text = 'Information'
	$Info.UseCompatibleTextRendering = $True
	#
	# labelenvUserName
	#
	$labelenvUserName.AutoSize = $True
	$labelenvUserName.Location = '119, 57'
	$labelenvUserName.Name = 'labelenvUserName'
	$labelenvUserName.Size = '86, 17'
	$labelenvUserName.TabIndex = 36
	$labelenvUserName.Text = "$env:UserName"
	$labelenvUserName.UseCompatibleTextRendering = $True
	#
	# labelOSInstallDate
	#
	$labelOSInstallDate.AutoSize = $True
	$labelOSInstallDate.Location = '30, 74'
	$labelOSInstallDate.Name = 'labelOSInstallDate'
	$labelOSInstallDate.Size = '83, 17'
	$labelOSInstallDate.TabIndex = 43
	$labelOSInstallDate.Text = 'OS Install Date:'
	$labelOSInstallDate.UseCompatibleTextRendering = $True
	#
	# labelenvCOMPUTERNAME
	#
	$labelenvCOMPUTERNAME.AutoSize = $True
	$labelenvCOMPUTERNAME.Location = '119, 40'
	$labelenvCOMPUTERNAME.Name = 'labelenvCOMPUTERNAME'
	$labelenvCOMPUTERNAME.Size = '87, 17'
	$labelenvCOMPUTERNAME.TabIndex = 35
	$labelenvCOMPUTERNAME.Text = "$LoggedOnUser"
	$labelenvCOMPUTERNAME.UseCompatibleTextRendering = $True
	#
	# labelAuthenticatedUser
	#
	$labelAuthenticatedUser.AutoSize = $True
	$labelAuthenticatedUser.Location = '9, 57'
	$labelAuthenticatedUser.Name = 'labelAuthenticatedUser'
	$labelAuthenticatedUser.Size = '104, 17'
	$labelAuthenticatedUser.TabIndex = 42
	$labelAuthenticatedUser.Text = 'Authenticated User:'
	$labelAuthenticatedUser.UseCompatibleTextRendering = $True
	#
	# labelInstDate
	#
	$labelInstDate.AutoSize = $True
	$labelInstDate.Location = '119, 74'
	$labelInstDate.Name = 'labelInstDate'
	$labelInstDate.Size = '53, 17'
	$labelInstDate.TabIndex = 37
	$labelInstDate.Text = "$InstDate"
	$labelInstDate.UseCompatibleTextRendering = $True
	#
	# labelWindowsUser
	#
	$labelWindowsUser.AutoSize = $True
	$labelWindowsUser.Location = '33, 40'
	$labelWindowsUser.Name = 'labelWindowsUser'
	$labelWindowsUser.Size = '80, 17'
	$labelWindowsUser.TabIndex = 41
	$labelWindowsUser.Text = 'Windows User:'
	$labelWindowsUser.UseCompatibleTextRendering = $True
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '119, 23'
	$label1.Name = 'label1'
	$label1.Size = '112, 17'
	$label1.TabIndex = 39
	$label1.Text = "$env:ComputerName"
	$label1.UseCompatibleTextRendering = $True
	#
	# labelDeviceName
	#
	$labelDeviceName.AutoSize = $True
	$labelDeviceName.Location = '39, 22'
	$labelDeviceName.Name = 'labelDeviceName'
	$labelDeviceName.Size = '75, 17'
	$labelDeviceName.TabIndex = 40
	$labelDeviceName.Text = 'Device Name:'
	$labelDeviceName.UseCompatibleTextRendering = $True
	#
	# labelProfileBackup005
	#
	$labelProfileBackup005.AutoSize = $True
	$labelProfileBackup005.Location = '143, -20'
	$labelProfileBackup005.Name = 'labelProfileBackup005'
	$labelProfileBackup005.Size = '105, 17'
	$labelProfileBackup005.TabIndex = 55
	$labelProfileBackup005.Text = 'Profile Backup 0.0.5'
	$labelProfileBackup005.UseCompatibleTextRendering = $True
	#
	# buttonPrograms
	#
	$buttonPrograms.Location = '310, 226'
	$buttonPrograms.Name = 'buttonPrograms'
	$buttonPrograms.Size = '75, 23'
	$buttonPrograms.TabIndex = 53
	$buttonPrograms.Text = 'Programs'
	$buttonPrograms.UseCompatibleTextRendering = $True
	$buttonPrograms.UseVisualStyleBackColor = $True
	$buttonPrograms.add_Click($buttonPrograms_Click)
	#
	# buttonInventory
	#
	$buttonInventory.Location = '310, 272'
	$buttonInventory.Name = 'buttonInventory'
	$buttonInventory.Size = '75, 23'
	$buttonInventory.TabIndex = 52
	$buttonInventory.Text = 'Inventory'
	$buttonInventory.UseCompatibleTextRendering = $True
	$buttonInventory.UseVisualStyleBackColor = $True
	$buttonInventory.add_Click($buttonInventory_Click)
	#
	# buttonPrinters
	#
	$buttonPrinters.Location = '310, 249'
	$buttonPrinters.Name = 'buttonPrinters'
	$buttonPrinters.Size = '75, 23'
	$buttonPrinters.TabIndex = 51
	$buttonPrinters.Text = 'Printers'
	$buttonPrinters.UseCompatibleTextRendering = $True
	$buttonPrinters.UseVisualStyleBackColor = $True
	$buttonPrinters.add_Click($buttonPrinters_Click)
	#
	# buttonBackup
	#
	$buttonBackup.Location = '310, 295'
	$buttonBackup.Name = 'buttonBackup'
	$buttonBackup.Size = '75, 25'
	$buttonBackup.TabIndex = 50
	$buttonBackup.Text = 'Backup'
	$buttonBackup.UseCompatibleTextRendering = $True
	$buttonBackup.UseVisualStyleBackColor = $True
	$buttonBackup.add_Click($buttonBackup_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($checkboxOneDrive)
	$groupbox4.Controls.Add($checkboxCustomDirectory)
	$groupbox4.Controls.Add($textbox7)
	$groupbox4.Controls.Add($checkboxQuickparts)
	$groupbox4.Controls.Add($checkboxBrowsers)
	$groupbox4.Controls.Add($checkboxVideos)
	$groupbox4.Controls.Add($checkboxPictures)
	$groupbox4.Controls.Add($checkboxDocuments)
	$groupbox4.Controls.Add($checkboxDownloads)
	$groupbox4.Controls.Add($checkboxDesktop)
	$groupbox4.Location = '3, 81'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '246, 134'
	$groupbox4.TabIndex = 49
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'Directories'
	$groupbox4.UseCompatibleTextRendering = $True
	#
	# checkboxOneDrive
	#
	$checkboxOneDrive.Location = '134, 76'
	$checkboxOneDrive.Name = 'checkboxOneDrive'
	$checkboxOneDrive.Size = '104, 24'
	$checkboxOneDrive.TabIndex = 37
	$checkboxOneDrive.Text = 'OneDrive'
	$checkboxOneDrive.UseCompatibleTextRendering = $True
	$checkboxOneDrive.UseVisualStyleBackColor = $True
	#
	# checkboxCustomDirectory
	#
	$checkboxCustomDirectory.Location = '6, 98'
	$checkboxCustomDirectory.Name = 'checkboxCustomDirectory'
	$checkboxCustomDirectory.Size = '119, 24'
	$checkboxCustomDirectory.TabIndex = 36
	$checkboxCustomDirectory.Text = 'Custom Directory: '
	$checkboxCustomDirectory.UseCompatibleTextRendering = $True
	$checkboxCustomDirectory.UseVisualStyleBackColor = $True
	#
	# textbox7
	#
	$textbox7.Location = '128, 100'
	$textbox7.Name = 'textbox7'
	$textbox7.Size = '110, 20'
	$textbox7.TabIndex = 35
	#
	# checkboxQuickparts
	#
	$checkboxQuickparts.Location = '6, 76'
	$checkboxQuickparts.Name = 'checkboxQuickparts'
	$checkboxQuickparts.Size = '109, 24'
	$checkboxQuickparts.TabIndex = 34
	$checkboxQuickparts.Text = 'Quickparts'
	$checkboxQuickparts.UseCompatibleTextRendering = $True
	$checkboxQuickparts.UseVisualStyleBackColor = $True
	#
	# checkboxBrowsers
	#
	$checkboxBrowsers.Location = '134, 57'
	$checkboxBrowsers.Name = 'checkboxBrowsers'
	$checkboxBrowsers.Size = '104, 24'
	$checkboxBrowsers.TabIndex = 33
	$checkboxBrowsers.Text = 'Browsers'
	$checkboxBrowsers.UseCompatibleTextRendering = $True
	$checkboxBrowsers.UseVisualStyleBackColor = $True
	#
	# checkboxVideos
	#
	$checkboxVideos.Location = '6, 57'
	$checkboxVideos.Name = 'checkboxVideos'
	$checkboxVideos.Size = '104, 24'
	$checkboxVideos.TabIndex = 32
	$checkboxVideos.Text = 'Videos'
	$checkboxVideos.UseCompatibleTextRendering = $True
	$checkboxVideos.UseVisualStyleBackColor = $True
	#
	# checkboxPictures
	#
	$checkboxPictures.Location = '134, 38'
	$checkboxPictures.Name = 'checkboxPictures'
	$checkboxPictures.Size = '104, 24'
	$checkboxPictures.TabIndex = 31
	$checkboxPictures.Text = 'Pictures'
	$checkboxPictures.UseCompatibleTextRendering = $True
	$checkboxPictures.UseVisualStyleBackColor = $True
	#
	# checkboxDocuments
	#
	$checkboxDocuments.Location = '134, 20'
	$checkboxDocuments.Name = 'checkboxDocuments'
	$checkboxDocuments.Size = '104, 24'
	$checkboxDocuments.TabIndex = 30
	$checkboxDocuments.Text = 'Documents'
	$checkboxDocuments.UseCompatibleTextRendering = $True
	$checkboxDocuments.UseVisualStyleBackColor = $True
	#
	# checkboxDownloads
	#
	$checkboxDownloads.Location = '6, 38'
	$checkboxDownloads.Name = 'checkboxDownloads'
	$checkboxDownloads.Size = '104, 24'
	$checkboxDownloads.TabIndex = 29
	$checkboxDownloads.Text = 'Downloads'
	$checkboxDownloads.UseCompatibleTextRendering = $True
	$checkboxDownloads.UseVisualStyleBackColor = $True
	#
	# checkboxDesktop
	#
	$checkboxDesktop.Location = '6, 19'
	$checkboxDesktop.Name = 'checkboxDesktop'
	$checkboxDesktop.Size = '104, 27'
	$checkboxDesktop.TabIndex = 28
	$checkboxDesktop.Text = 'Desktop'
	$checkboxDesktop.UseCompatibleTextRendering = $True
	$checkboxDesktop.UseVisualStyleBackColor = $True
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($textbox8)
	$groupbox5.Controls.Add($textbox9)
	$groupbox5.Controls.Add($labelFromLocation)
	$groupbox5.Controls.Add($labelToLocation)
	$groupbox5.Location = '3, 3'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '245, 76'
	$groupbox5.TabIndex = 48
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Locations'
	$groupbox5.UseCompatibleTextRendering = $True
	#
	# textbox8
	#
	$textbox8.Location = '102, 19'
	$textbox8.Name = 'textbox8'
	$textbox8.Size = '128, 20'
	$textbox8.TabIndex = 1
	#
	# textbox9
	#
	$textbox9.Location = '102, 45'
	$textbox9.Name = 'textbox9'
	$textbox9.Size = '128, 20'
	$textbox9.TabIndex = 2
	#
	# labelFromLocation
	#
	$labelFromLocation.AutoSize = $True
	$labelFromLocation.Location = '7, 22'
	$labelFromLocation.Name = 'labelFromLocation'
	$labelFromLocation.Size = '77, 17'
	$labelFromLocation.TabIndex = 11
	$labelFromLocation.Text = 'From Location'
	$labelFromLocation.UseCompatibleTextRendering = $True
	#
	# labelToLocation
	#
	$labelToLocation.AutoSize = $True
	$labelToLocation.Location = '7, 48'
	$labelToLocation.Name = 'labelToLocation'
	$labelToLocation.Size = '63, 17'
	$labelToLocation.TabIndex = 12
	$labelToLocation.Text = 'To Location'
	$labelToLocation.UseCompatibleTextRendering = $True
	#
	# richtextbox4
	#
	$richtextbox4.Location = '-4, 326'
	$richtextbox4.Name = 'richtextbox4'
	$richtextbox4.Size = '404, 86'
	$richtextbox4.TabIndex = 47
	$richtextbox4.Text = ''
	#
	# tabpage7
	#
	$tabpage7.Controls.Add($buttonRunInventory)
	$tabpage7.Controls.Add($buttonDevMode)
	$tabpage7.Controls.Add($buttonScrapeAD)
	$tabpage7.Controls.Add($buttonADUC)
	$tabpage7.Controls.Add($buttonComputerManagement)
	$tabpage7.Controls.Add($buttonDeviceManager)
	$tabpage7.Controls.Add($buttonSCCM)
	$tabpage7.Controls.Add($buttonRegedit)
	$tabpage7.Controls.Add($buttonControlPanel)
	$tabpage7.Controls.Add($buttonPrintManagement)
	$tabpage7.Controls.Add($buttonDeleteSCCMCache)
	$tabpage7.Controls.Add($buttonWinSysInfo)
	$tabpage7.Controls.Add($buttonProgramList)
	$tabpage7.Location = '4, 22'
	$tabpage7.Name = 'tabpage7'
	$tabpage7.Padding = '3, 3, 3, 3'
	$tabpage7.Size = '396, 432'
	$tabpage7.TabIndex = 6
	$tabpage7.Text = 'Tools'
	$tabpage7.UseVisualStyleBackColor = $True
	#
	# buttonRunInventory
	#
	$buttonRunInventory.Location = '250, 380'
	$buttonRunInventory.Name = 'buttonRunInventory'
	$buttonRunInventory.Size = '139, 23'
	$buttonRunInventory.TabIndex = 51
	$buttonRunInventory.Text = 'Run Inventory'
	$buttonRunInventory.UseCompatibleTextRendering = $True
	$buttonRunInventory.UseVisualStyleBackColor = $True
	$buttonRunInventory.add_Click($buttonRunInventory_Click)
	#
	# buttonDevMode
	#
	$buttonDevMode.Location = '251, 320'
	$buttonDevMode.Name = 'buttonDevMode'
	$buttonDevMode.Size = '138, 23'
	$buttonDevMode.TabIndex = 49
	$buttonDevMode.Text = 'Dev. Mode'
	$buttonDevMode.UseCompatibleTextRendering = $True
	$buttonDevMode.UseVisualStyleBackColor = $True
	$buttonDevMode.add_Click($buttonDevMode_Click)
	#
	# buttonScrapeAD
	#
	$buttonScrapeAD.Location = '251, 290'
	$buttonScrapeAD.Name = 'buttonScrapeAD'
	$buttonScrapeAD.Size = '138, 23'
	$buttonScrapeAD.TabIndex = 48
	$buttonScrapeAD.Text = 'Scrape AD'
	$buttonScrapeAD.UseCompatibleTextRendering = $True
	$buttonScrapeAD.UseVisualStyleBackColor = $True
	$buttonScrapeAD.add_Click($buttonScrapeAD_Click)
	#
	# buttonADUC
	#
	$buttonADUC.Location = '251, 261'
	$buttonADUC.Name = 'buttonADUC'
	$buttonADUC.Size = '138, 23'
	$buttonADUC.TabIndex = 47
	$buttonADUC.Text = 'ADUC'
	$buttonADUC.UseCompatibleTextRendering = $True
	$buttonADUC.UseVisualStyleBackColor = $True
	$buttonADUC.add_Click($buttonADUC_Click)
	#
	# buttonComputerManagement
	#
	$buttonComputerManagement.Location = '251, 232'
	$buttonComputerManagement.Name = 'buttonComputerManagement'
	$buttonComputerManagement.Size = '138, 23'
	$buttonComputerManagement.TabIndex = 46
	$buttonComputerManagement.Text = 'Computer Management'
	$buttonComputerManagement.UseCompatibleTextRendering = $True
	$buttonComputerManagement.UseVisualStyleBackColor = $True
	$buttonComputerManagement.add_Click($buttonComputerManagement_Click)
	#
	# buttonDeviceManager
	#
	$buttonDeviceManager.Location = '251, 203'
	$buttonDeviceManager.Name = 'buttonDeviceManager'
	$buttonDeviceManager.Size = '138, 23'
	$buttonDeviceManager.TabIndex = 45
	$buttonDeviceManager.Text = 'Device Manager'
	$buttonDeviceManager.UseCompatibleTextRendering = $True
	$buttonDeviceManager.UseVisualStyleBackColor = $True
	$buttonDeviceManager.add_Click($buttonDeviceManager_Click)
	#
	# buttonSCCM
	#
	$buttonSCCM.Location = '251, 174'
	$buttonSCCM.Name = 'buttonSCCM'
	$buttonSCCM.Size = '138, 23'
	$buttonSCCM.TabIndex = 44
	$buttonSCCM.Text = 'SCCM'
	$buttonSCCM.UseCompatibleTextRendering = $True
	$buttonSCCM.UseVisualStyleBackColor = $True
	$buttonSCCM.add_Click($buttonSCCM_Click)
	#
	# buttonRegedit
	#
	$buttonRegedit.Location = '251, 145'
	$buttonRegedit.Name = 'buttonRegedit'
	$buttonRegedit.Size = '138, 23'
	$buttonRegedit.TabIndex = 43
	$buttonRegedit.Text = 'Regedit'
	$buttonRegedit.UseCompatibleTextRendering = $True
	$buttonRegedit.UseVisualStyleBackColor = $True
	$buttonRegedit.add_Click($buttonRegedit_Click)
	#
	# buttonControlPanel
	#
	$buttonControlPanel.Location = '251, 116'
	$buttonControlPanel.Name = 'buttonControlPanel'
	$buttonControlPanel.Size = '138, 23'
	$buttonControlPanel.TabIndex = 42
	$buttonControlPanel.Text = 'Control Panel'
	$buttonControlPanel.UseCompatibleTextRendering = $True
	$buttonControlPanel.UseVisualStyleBackColor = $True
	$buttonControlPanel.add_Click($buttonControlPanel_Click)
	#
	# buttonPrintManagement
	#
	$buttonPrintManagement.Location = '251, 58'
	$buttonPrintManagement.Name = 'buttonPrintManagement'
	$buttonPrintManagement.Size = '138, 23'
	$buttonPrintManagement.TabIndex = 40
	$buttonPrintManagement.Text = 'Print Management'
	$buttonPrintManagement.UseCompatibleTextRendering = $True
	$buttonPrintManagement.UseVisualStyleBackColor = $True
	$buttonPrintManagement.add_Click($buttonPrintManagement_Click)
	#
	# buttonDeleteSCCMCache
	#
	$buttonDeleteSCCMCache.Location = '126, 203'
	$buttonDeleteSCCMCache.Name = 'buttonDeleteSCCMCache'
	$buttonDeleteSCCMCache.Size = '120, 23'
	$buttonDeleteSCCMCache.TabIndex = 21
	$buttonDeleteSCCMCache.Text = 'Delete SCCM Cache'
	$buttonDeleteSCCMCache.UseCompatibleTextRendering = $True
	$buttonDeleteSCCMCache.UseVisualStyleBackColor = $True
	$buttonDeleteSCCMCache.add_Click($buttonDeleteSCCMCache_Click)
	#
	# buttonWinSysInfo
	#
	$buttonWinSysInfo.Location = '126, 145'
	$buttonWinSysInfo.Name = 'buttonWinSysInfo'
	$buttonWinSysInfo.Size = '120, 23'
	$buttonWinSysInfo.TabIndex = 17
	$buttonWinSysInfo.Text = 'Win Sys Info'
	$buttonWinSysInfo.UseCompatibleTextRendering = $True
	$buttonWinSysInfo.UseVisualStyleBackColor = $True
	$buttonWinSysInfo.add_Click($buttonWinSysInfo_Click)
	#
	# buttonProgramList
	#
	$buttonProgramList.Location = '126, 116'
	$buttonProgramList.Name = 'buttonProgramList'
	$buttonProgramList.Size = '120, 23'
	$buttonProgramList.TabIndex = 16
	$buttonProgramList.Text = 'Program List'
	$buttonProgramList.UseCompatibleTextRendering = $True
	$buttonProgramList.UseVisualStyleBackColor = $True
	$buttonProgramList.add_Click($buttonProgramList_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($groupbox14)
	$tabpage8.Controls.Add($groupbox13)
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '396, 432'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'TDX'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# groupbox14
	#
	$groupbox14.Controls.Add($buttonNewIncident)
	$groupbox14.Controls.Add($buttonNewRequest)
	$groupbox14.Controls.Add($buttonPasswordResetForm)
	$groupbox14.Location = '242, 24'
	$groupbox14.Name = 'groupbox14'
	$groupbox14.Size = '146, 167'
	$groupbox14.TabIndex = 6
	$groupbox14.TabStop = $False
	$groupbox14.Text = 'Create New Ticket'
	$groupbox14.UseCompatibleTextRendering = $True
	#
	# buttonNewIncident
	#
	$buttonNewIncident.Location = '6, 19'
	$buttonNewIncident.Name = 'buttonNewIncident'
	$buttonNewIncident.Size = '133, 23'
	$buttonNewIncident.TabIndex = 1
	$buttonNewIncident.Text = 'New Incident'
	$buttonNewIncident.UseCompatibleTextRendering = $True
	$buttonNewIncident.UseVisualStyleBackColor = $True
	#
	# buttonNewRequest
	#
	$buttonNewRequest.Location = '6, 48'
	$buttonNewRequest.Name = 'buttonNewRequest'
	$buttonNewRequest.Size = '133, 23'
	$buttonNewRequest.TabIndex = 2
	$buttonNewRequest.Text = 'New Request'
	$buttonNewRequest.UseCompatibleTextRendering = $True
	$buttonNewRequest.UseVisualStyleBackColor = $True
	$buttonNewRequest.add_Click($buttonNewRequest_Click)
	#
	# buttonPasswordResetForm
	#
	$buttonPasswordResetForm.Location = '6, 77'
	$buttonPasswordResetForm.Name = 'buttonPasswordResetForm'
	$buttonPasswordResetForm.Size = '133, 23'
	$buttonPasswordResetForm.TabIndex = 3
	$buttonPasswordResetForm.Text = 'Password Reset Form'
	$buttonPasswordResetForm.UseCompatibleTextRendering = $True
	$buttonPasswordResetForm.UseVisualStyleBackColor = $True
	$buttonPasswordResetForm.add_Click($buttonPasswordResetForm_Click)
	#
	# groupbox13
	#
	$groupbox13.Controls.Add($textbox12)
	$groupbox13.Controls.Add($buttonSearch)
	$groupbox13.Location = '8, 24'
	$groupbox13.Name = 'groupbox13'
	$groupbox13.Size = '220, 66'
	$groupbox13.TabIndex = 0
	$groupbox13.TabStop = $False
	$groupbox13.Text = 'Ticket Number Search'
	$groupbox13.UseCompatibleTextRendering = $True
	#
	# textbox12
	#
	$textbox12.Location = '7, 20'
	$textbox12.Name = 'textbox12'
	$textbox12.Size = '100, 20'
	$textbox12.TabIndex = 1
	#
	# buttonSearch
	#
	$buttonSearch.Location = '123, 18'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 0
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# tabpage9
	#
	$tabpage9.Controls.Add($groupbox15)
	$tabpage9.Controls.Add($groupbox16)
	$tabpage9.Controls.Add($richtextbox5)
	$tabpage9.Controls.Add($label988)
	$tabpage9.Controls.Add($labelComputerName)
	$tabpage9.Controls.Add($labelTrustRelationshipRes)
	$tabpage9.Location = '4, 22'
	$tabpage9.Name = 'tabpage9'
	$tabpage9.Padding = '3, 3, 3, 3'
	$tabpage9.Size = '396, 432'
	$tabpage9.TabIndex = 8
	$tabpage9.Text = 'Domain Trust'
	$tabpage9.UseVisualStyleBackColor = $True
	#
	# groupbox15
	#
	$groupbox15.Controls.Add($labelRemoteComputerName)
	$groupbox15.Controls.Add($textbox3)
	$groupbox15.Controls.Add($labelPassword)
	$groupbox15.Controls.Add($labelUsername)
	$groupbox15.Controls.Add($textbox13)
	$groupbox15.Controls.Add($textbox14)
	$groupbox15.Controls.Add($buttonAssociateWithDomain)
	$groupbox15.Controls.Add($buttonDissociateFromDomain)
	$groupbox15.Location = '-9, 249'
	$groupbox15.Name = 'groupbox15'
	$groupbox15.Size = '406, 113'
	$groupbox15.TabIndex = 21
	$groupbox15.TabStop = $False
	$groupbox15.Text = 'Remote Computer'
	$groupbox15.UseCompatibleTextRendering = $True
	#
	# labelRemoteComputerName
	#
	$labelRemoteComputerName.AutoSize = $True
	$labelRemoteComputerName.Location = '25, 22'
	$labelRemoteComputerName.Name = 'labelRemoteComputerName'
	$labelRemoteComputerName.Size = '136, 17'
	$labelRemoteComputerName.TabIndex = 17
	$labelRemoteComputerName.Text = 'Remote Computer Name: '
	$labelRemoteComputerName.UseCompatibleTextRendering = $True
	#
	# textbox3
	#
	$textbox3.Location = '167, 19'
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '214, 20'
	$textbox3.TabIndex = 16
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '211, 79'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '57, 17'
	$labelPassword.TabIndex = 15
	$labelPassword.Text = 'Password:'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '211, 58'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '63, 17'
	$labelUsername.TabIndex = 14
	$labelUsername.Text = 'Username: '
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# textbox13
	#
	$textbox13.Location = '281, 78'
	$textbox13.Name = 'textbox13'
	$textbox13.Size = '100, 20'
	$textbox13.TabIndex = 13
	#
	# textbox14
	#
	$textbox14.Location = '281, 52'
	$textbox14.Name = 'textbox14'
	$textbox14.Size = '100, 20'
	$textbox14.TabIndex = 12
	#
	# buttonAssociateWithDomain
	#
	$buttonAssociateWithDomain.Location = '25, 81'
	$buttonAssociateWithDomain.Name = 'buttonAssociateWithDomain'
	$buttonAssociateWithDomain.Size = '145, 23'
	$buttonAssociateWithDomain.TabIndex = 11
	$buttonAssociateWithDomain.Text = 'Associate With Domain'
	$buttonAssociateWithDomain.UseCompatibleTextRendering = $True
	$buttonAssociateWithDomain.UseVisualStyleBackColor = $True
	$buttonAssociateWithDomain.add_Click($buttonAssociateWithDomain_Click)
	#
	# buttonDissociateFromDomain
	#
	$buttonDissociateFromDomain.Location = '25, 52'
	$buttonDissociateFromDomain.Name = 'buttonDissociateFromDomain'
	$buttonDissociateFromDomain.Size = '145, 23'
	$buttonDissociateFromDomain.TabIndex = 10
	$buttonDissociateFromDomain.Text = 'Dissociate From Domain'
	$buttonDissociateFromDomain.UseCompatibleTextRendering = $True
	$buttonDissociateFromDomain.UseVisualStyleBackColor = $True
	$buttonDissociateFromDomain.add_Click($buttonDissociateFromDomain_Click)
	#
	# groupbox16
	#
	$groupbox16.Controls.Add($buttonCheckPassword)
	$groupbox16.Controls.Add($buttonResetPassword)
	$groupbox16.Controls.Add($buttonTestTrustRelationshi)
	$groupbox16.Controls.Add($button39)
	$groupbox16.Controls.Add($button38)
	$groupbox16.Location = '94, 55'
	$groupbox16.Name = 'groupbox16'
	$groupbox16.Size = '201, 143'
	$groupbox16.TabIndex = 20
	$groupbox16.TabStop = $False
	$groupbox16.Text = 'Local Computer'
	$groupbox16.UseCompatibleTextRendering = $True
	#
	# buttonCheckPassword
	#
	$buttonCheckPassword.Location = '31, 88'
	$buttonCheckPassword.Name = 'buttonCheckPassword'
	$buttonCheckPassword.Size = '138, 23'
	$buttonCheckPassword.TabIndex = 12
	$buttonCheckPassword.Text = 'Check Password'
	$buttonCheckPassword.UseCompatibleTextRendering = $True
	$buttonCheckPassword.UseVisualStyleBackColor = $True
	$buttonCheckPassword.add_Click($buttonCheckPassword_Click)
	#
	# buttonResetPassword
	#
	$buttonResetPassword.Location = '31, 111'
	$buttonResetPassword.Name = 'buttonResetPassword'
	$buttonResetPassword.Size = '138, 23'
	$buttonResetPassword.TabIndex = 13
	$buttonResetPassword.Text = 'Reset Password'
	$buttonResetPassword.UseCompatibleTextRendering = $True
	$buttonResetPassword.UseVisualStyleBackColor = $True
	$buttonResetPassword.add_Click($buttonResetPassword_Click)
	#
	# buttonTestTrustRelationshi
	#
	$buttonTestTrustRelationshi.Location = '30, 19'
	$buttonTestTrustRelationshi.Name = 'buttonTestTrustRelationshi'
	$buttonTestTrustRelationshi.Size = '140, 23'
	$buttonTestTrustRelationshi.TabIndex = 5
	$buttonTestTrustRelationshi.Text = 'Test Trust Relationship'
	$buttonTestTrustRelationshi.UseCompatibleTextRendering = $True
	$buttonTestTrustRelationshi.UseVisualStyleBackColor = $True
	$buttonTestTrustRelationshi.add_Click($buttonTestTrustRelationshi_Click)
	#
	# button39
	#
	$button39.Location = '31, 65'
	$button39.Name = 'button39'
	$button39.Size = '139, 23'
	$button39.TabIndex = 8
	$button39.Text = 'Associate With Domain'
	$button39.UseCompatibleTextRendering = $True
	$button39.UseVisualStyleBackColor = $True
	$button39.add_Click($button39_Click)
	#
	# button38
	#
	$button38.Location = '31, 42'
	$button38.Name = 'button38'
	$button38.Size = '139, 23'
	$button38.TabIndex = 7
	$button38.Text = 'Dissociate From Domain'
	$button38.UseCompatibleTextRendering = $True
	$button38.UseVisualStyleBackColor = $True
	$button38.add_Click($button38_Click)
	#
	# richtextbox5
	#
	$richtextbox5.Location = '-4, 368'
	$richtextbox5.Name = 'richtextbox5'
	$richtextbox5.Size = '401, 63'
	$richtextbox5.TabIndex = 19
	$richtextbox5.Text = ''
	#
	# label988
	#
	$label988.AutoSize = $True
	$label988.Location = '276, 35'
	$label988.Name = 'label988'
	$label988.Size = '129, 17'
	$label988.TabIndex = 18
	$label988.Text = "$env:COMPUTERNAME"
	$label988.UseCompatibleTextRendering = $True
	#
	# labelComputerName
	#
	$labelComputerName.AutoSize = $True
	$labelComputerName.Location = '179, 35'
	$labelComputerName.Name = 'labelComputerName'
	$labelComputerName.Size = '90, 17'
	$labelComputerName.TabIndex = 17
	$labelComputerName.Text = 'Computer Name:'
	$labelComputerName.UseCompatibleTextRendering = $True
	#
	# labelTrustRelationshipRes
	#
	$labelTrustRelationshipRes.AutoSize = $True
	$labelTrustRelationshipRes.Location = '123, 2'
	$labelTrustRelationshipRes.Name = 'labelTrustRelationshipRes'
	$labelTrustRelationshipRes.Size = '143, 17'
	$labelTrustRelationshipRes.TabIndex = 16
	$labelTrustRelationshipRes.Text = 'Trust Relationship Resolver'
	$labelTrustRelationshipRes.UseCompatibleTextRendering = $True
	#
	# utilityBeltToolStripMenuItem
	#
	[void]$utilityBeltToolStripMenuItem.DropDownItems.Add($cMDToolStripMenuItem)
	[void]$utilityBeltToolStripMenuItem.DropDownItems.Add($powershellToolStripMenuItem)
	[void]$utilityBeltToolStripMenuItem.DropDownItems.Add($controlPanelToolStripMenuItem)
	[void]$utilityBeltToolStripMenuItem.DropDownItems.Add($aDUCToolStripMenuItem)
	[void]$utilityBeltToolStripMenuItem.DropDownItems.Add($eventViewerToolStripMenuItem)
	$utilityBeltToolStripMenuItem.Name = 'utilityBeltToolStripMenuItem'
	$utilityBeltToolStripMenuItem.Size = '73, 20'
	$utilityBeltToolStripMenuItem.Text = 'Utility Belt'
	#
	# computerInfoToolStripMenuItem
	#
	[void]$computerInfoToolStripMenuItem.DropDownItems.Add($systemInformationToolStripMenuItem)
	[void]$computerInfoToolStripMenuItem.DropDownItems.Add($sCCMToolStripMenuItem)
	$computerInfoToolStripMenuItem.Name = 'computerInfoToolStripMenuItem'
	$computerInfoToolStripMenuItem.Size = '97, 20'
	$computerInfoToolStripMenuItem.Text = 'Computer Info'
	#
	# systemInformationToolStripMenuItem
	#
	$systemInformationToolStripMenuItem.Name = 'systemInformationToolStripMenuItem'
	$systemInformationToolStripMenuItem.Size = '178, 22'
	$systemInformationToolStripMenuItem.Text = 'System Information'
	$systemInformationToolStripMenuItem.add_Click($systemInformationToolStripMenuItem_Click)
	#
	# helpToolStripMenuItem
	#
	[void]$helpToolStripMenuItem.DropDownItems.Add($helpPageToolStripMenuItem)
	[void]$helpToolStripMenuItem.DropDownItems.Add($moreHelpToolStripMenuItem)
	[void]$helpToolStripMenuItem.DropDownItems.Add($evenMoreHelpToolStripMenuItem)
	[void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
	$helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
	$helpToolStripMenuItem.Size = '44, 20'
	$helpToolStripMenuItem.Text = 'Help'
	#
	# helpPageToolStripMenuItem
	#
	$helpPageToolStripMenuItem.Name = 'helpPageToolStripMenuItem'
	$helpPageToolStripMenuItem.Size = '158, 22'
	$helpPageToolStripMenuItem.Text = 'Help Page'
	#
	# moreHelpToolStripMenuItem
	#
	$moreHelpToolStripMenuItem.Name = 'moreHelpToolStripMenuItem'
	$moreHelpToolStripMenuItem.Size = '158, 22'
	$moreHelpToolStripMenuItem.Text = 'More Help'
	#
	# evenMoreHelpToolStripMenuItem
	#
	$evenMoreHelpToolStripMenuItem.Name = 'evenMoreHelpToolStripMenuItem'
	$evenMoreHelpToolStripMenuItem.Size = '158, 22'
	$evenMoreHelpToolStripMenuItem.Text = 'Even More Help'
	#
	# aboutToolStripMenuItem
	#
	[void]$aboutToolStripMenuItem.DropDownItems.Add($aboutTheToolToolStripMenuItem)
	[void]$aboutToolStripMenuItem.DropDownItems.Add($aboutTheAuthorToolStripMenuItem)
	[void]$aboutToolStripMenuItem.DropDownItems.Add($aboutLifeToolStripMenuItem)
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '158, 22'
	$aboutToolStripMenuItem.Text = 'About'
	#
	# aboutTheToolToolStripMenuItem
	#
	$aboutTheToolToolStripMenuItem.Name = 'aboutTheToolToolStripMenuItem'
	$aboutTheToolToolStripMenuItem.Size = '165, 22'
	$aboutTheToolToolStripMenuItem.Text = 'About the tool'
	$aboutTheToolToolStripMenuItem.add_Click($aboutTheToolToolStripMenuItem_Click)
	#
	# aboutTheAuthorToolStripMenuItem
	#
	$aboutTheAuthorToolStripMenuItem.Name = 'aboutTheAuthorToolStripMenuItem'
	$aboutTheAuthorToolStripMenuItem.Size = '165, 22'
	$aboutTheAuthorToolStripMenuItem.Text = 'About the author'
	$aboutTheAuthorToolStripMenuItem.add_Click($aboutTheAuthorToolStripMenuItem_Click)
	#
	# aboutLifeToolStripMenuItem
	#
	$aboutLifeToolStripMenuItem.Name = 'aboutLifeToolStripMenuItem'
	$aboutLifeToolStripMenuItem.Size = '165, 22'
	$aboutLifeToolStripMenuItem.Text = 'About life'
	$aboutLifeToolStripMenuItem.add_Click($aboutLifeToolStripMenuItem_Click)
	#
	# sCCMToolStripMenuItem
	#
	[void]$sCCMToolStripMenuItem.DropDownItems.Add($cMActionsToolStripMenuItem)
	$sCCMToolStripMenuItem.Name = 'sCCMToolStripMenuItem'
	$sCCMToolStripMenuItem.Size = '178, 22'
	$sCCMToolStripMenuItem.Text = 'SCCM'
	#
	# cMActionsToolStripMenuItem
	#
	$cMActionsToolStripMenuItem.Name = 'cMActionsToolStripMenuItem'
	$cMActionsToolStripMenuItem.Size = '152, 22'
	$cMActionsToolStripMenuItem.Text = 'CM Actions'
	$cMActionsToolStripMenuItem.add_Click($cMActionsToolStripMenuItem_Click)
	#
	# cMDToolStripMenuItem
	#
	$cMDToolStripMenuItem.Name = 'cMDToolStripMenuItem'
	$cMDToolStripMenuItem.Size = '152, 22'
	$cMDToolStripMenuItem.Text = 'CMD'
	#
	# powershellToolStripMenuItem
	#
	$powershellToolStripMenuItem.Name = 'powershellToolStripMenuItem'
	$powershellToolStripMenuItem.Size = '152, 22'
	$powershellToolStripMenuItem.Text = 'Powershell'
	#
	# controlPanelToolStripMenuItem
	#
	$controlPanelToolStripMenuItem.Name = 'controlPanelToolStripMenuItem'
	$controlPanelToolStripMenuItem.Size = '152, 22'
	$controlPanelToolStripMenuItem.Text = 'Control Panel'
	#
	# aDUCToolStripMenuItem
	#
	$aDUCToolStripMenuItem.Name = 'aDUCToolStripMenuItem'
	$aDUCToolStripMenuItem.Size = '152, 22'
	$aDUCToolStripMenuItem.Text = 'ADUC'
	#
	# eventViewerToolStripMenuItem
	#
	$eventViewerToolStripMenuItem.Name = 'eventViewerToolStripMenuItem'
	$eventViewerToolStripMenuItem.Size = '152, 22'
	$eventViewerToolStripMenuItem.Text = 'Event Viewer'
	$groupbox16.ResumeLayout()
	$groupbox15.ResumeLayout()
	$tabpage9.ResumeLayout()
	$groupbox14.ResumeLayout()
	$groupbox13.ResumeLayout()
	$tabpage8.ResumeLayout()
	$tabpage7.ResumeLayout()
	$groupbox5.ResumeLayout()
	$groupbox4.ResumeLayout()
	$Info.ResumeLayout()
	$groupbox12.ResumeLayout()
	$tabpage6.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$tabpage4.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox9.ResumeLayout()
	$tabpage3.ResumeLayout()
	$groupbox8.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox6.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$menustrip1.ResumeLayout()
	$formTechTool.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formTechTool.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formTechTool.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formTechTool.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formTechTool.ShowDialog()

} #End Function

#Call the form
Show-Inventory-Share_psf | Out-Null
