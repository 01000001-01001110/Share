#requires -Version 3
#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: bf90a41d-22bb-4fce-9b3c-8f5e4d793ae6
# Source File: xzcz.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
qQgAAB+LCAAAAAAABABlVseq6wgS3Rv8D4/eClrJCobbD5RztuJOkpWsnMPXt+fNZmBqVXWKoqjA
4fzYWdpv2XSy8RL/+jpz1Xf//IX+Df/1+3779evHmKqi6uKGr5pMj9vs93Gl19/DnP+A/5f6U8D3
U/u76nEX9sHww7kUxRgsQ/3XaIptOgE2H3XvHk8wx0RcZN5tQDOtK+Nmrazj6gec/jAI9fJogUg8
yGGXBgsI/H4znpqvKD5vpIHvtXJli/MDxAgszRKtjZvOJBOQ69EITUDQWj9a9hDDsE4MhzT4K60g
sp5RGXTMIGnL+w1eXkRQR3Z+jp+OdM63P2Yj5o8A841bbT9OtZM7ISxD6Mw6VihH7Ck/Zjt3ghZI
Pt5eIAvkWfg78tz7DcEgR9sEN0OJirjy+Zn3H6dHN6OaS8J1UbmMUcX0+9M5RoTxAk3OyVDnovn9
YXQC3gUa/uJ0AAxOeL9ZBQ4ufCM4GzpHYjeYiwZ0Ee08HxGBtNtLQ+1qHkVAvLJ+ebqnO2xKMOoE
OKEu+0brYJztzDeaaaKp+212kiDFCWEDceMxt37zBKsFSTui89QeRFhw8atrPZ1tdAFSAxkoqgA4
SHUgiHpirATBflt4Nep0CU7327tzJ10UPrMp9WHG6SkED40nfHclPhnpuV1Wgz0IuaZNUS0fl2GI
XThLrVa4GWecrx7uzmo4ZOFzJcP9BmWtdiDLzJmcQZES7E8TFhijoTK5Q6AYQ2xMKCjdJ7SKTTTC
DG5wyTh6Qgs7rFLXjyAak/FsR3J+ovfbePINlgrw4OUKXJohITKWD0sClWKuYWlBxzzVyJMQJykw
MmVlw60ia7FIWhFd8t1mK6AenG3Y49mP9xt+7Kx5pb6UahE8f4ITuC6X1Ud7qWXXpdZC0RFpb0Q3
0YeEHmLGNZzz88idJsNBZ6pAm6tHF+odf4XvN0qm47hUrH4eZ19m/LXHAwlbp4OMn9oBvRR0dfBO
fdkPpu75h+QACCQT6RYKrhxS/YKYZex2q85ox3a/PXcgqYgkraHvn2dPEQT4480ijw0o82gHPlSN
TVJaU+LgxX07qEkxoUX2Gl+zeJoNIOCYNix2FDXAtd9vl5EMJW3HsGVJjkdsT6tLG0khO1GZ9WRJ
IpjQ5hTLhajdQIPmATzKGA6TtUYSi0FP5hioRWexHl2Y3m92daAXqwrMi+Dpt8uExuRyJFXLJLHJ
eYXXNI38hyGGL0O01RVofHvRPMnTi8dwjbZQ7rJQ3MLwh8rcb7XIhJ73UDbyKoe6X/A4Ul4+vFuK
rPQ6TCgfmZC1mVkrH8EVRTBsXBnZZDQAZPhyVJ4vpX+OASuw3ut+GxB1Xrsaer/1FmEp4TBJuu2K
dc6TuN9jGGDRl+KHbitu3M7nDVMA5vT5lLXpx/ugW69EltdM0qHF/k56vlYadzfffpdAjQE44dOf
kw4FxjosVEqLteRsHvigOPSuq22kEMkRUyguSwHYkUFJ1l7pp/LsXlVV328+MI7WopxQ4b5ghlLt
xC8MCj+0NDcxgSq8pIsVqqx3MRgdTsYDFV+pWosq4aDnzN6Gi1zYMXKKFOzvt5gEBmvvIianaz76
yG/vbGrmoqw6knN2nLu2eEuIZvta7uKD0m3BHvckMW96Hs08vuXHrrbOUnFcwt1vYEBw1Biy3eMV
FI1uvjH6TdWkXy+xt+2BakwU34Uqxlrnq6thgsWqhFRrQmEbuDN848Lh/d00wmhj0P32ksHeCyz1
3JwFvgapHkj04Vmlj5TJ1ugdh6oAvGReA59Jr1qarcZFQE3DG3xFZnEoZ6SlArLsKCqs99s6ROsw
2H7zmtPm4hZF2rIZeuUMm4Qn6KbFtR0CdAhmoVwC2e4gfMLKBR8nb4iDETSfhd9ralPwmTruN4DY
U8hFT0utPYBjfXqcdUNZSpBoRiHgv1WZSJnyeSD94+S8psmp8fhyxHnmzzUE9QKuFtmnYIx9Bveb
Gbxz0VRdyWswwNdg3nDcbIAjsfFSk/ASL6SWi0C6IkggR/dGTDedNDzEWPa2Bk4+YjHScKIR47fP
/cbHg99Io6axbLj6Sd9tV3k25D4nNCvXGMKpAVe/ZG+YtHfPVDXf0zYq8IFvQNEnEocRHMRTmSQ8
H77fy1ONO6vJhV4MqV4wrFvcc6uHIV6sVqDHiFYlEjJGxcl8OmeLiYJhgsuA9HDi9xFAB7FuVp4M
sQOE35v2bA5YEeg84OdWKZddCQOyQ+MUUzLCwltx5LK4gjPYBStu9Af/lQP//IB/5MIf4UDNc9Ym
TZXNv8Av8gP+rzT5/S9ANkMJqQgAAA==#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.165
     Generated on:       7/30/2019 10:28 AM
     Generated by:       Support.newingha
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-xzcz_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSCCMToolKit = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$labelCCMCacheSize = New-Object 'System.Windows.Forms.Label'
	$labelCCMCache = New-Object 'System.Windows.Forms.Label'
	$labelFreeSpaceGB = New-Object 'System.Windows.Forms.Label'
	$labelDiskSizeGB = New-Object 'System.Windows.Forms.Label'
	$labelserialNumber = New-Object 'System.Windows.Forms.Label'
	$labelenvCOMPUTERNAME = New-Object 'System.Windows.Forms.Label'
	$labelMemory = New-Object 'System.Windows.Forms.Label'
	$labelSpaceAvailable = New-Object 'System.Windows.Forms.Label'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$labelHardDiskSize = New-Object 'System.Windows.Forms.Label'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonUninstallReinstall = New-Object 'System.Windows.Forms.Button'
	$buttonResetRepo = New-Object 'System.Windows.Forms.Button'
	$buttonSalvageRepo = New-Object 'System.Windows.Forms.Button'
	$buttonVerifyRepo = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonDeleteSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonDelSCCMCache = New-Object 'System.Windows.Forms.Button'
	$buttonInstallSCCM = New-Object 'System.Windows.Forms.Button'
	$buttonSCCMLogs = New-Object 'System.Windows.Forms.Button'
	$buttonClientHealthEval = New-Object 'System.Windows.Forms.Button'
	$buttonRunMachinePolicy = New-Object 'System.Windows.Forms.Button'
	$buttonRestartConfigMan = New-Object 'System.Windows.Forms.Button'
	$labelSCCMToolKit011 = New-Object 'System.Windows.Forms.Label'
	$labelNewinghaerauedu = New-Object 'System.Windows.Forms.Label'
	$labelContact = New-Object 'System.Windows.Forms.Label'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$Computer = $env:COMPUTERNAME
	$GetDiskInfo = Get-WmiObject Win32_logicaldisk -ComputerName $computer -Filter "DeviceID='C:'"
	$DiskSize = $([math]::Round($GetDiskInfo.Size/1GB))
	$FreeSpace = $([math]::Round($GetDiskInfo.FreeSpace/1GB))
	$SerialNumber = (Get-WmiObject win32_bios -ComputerName $Computer).SerialNumber
	$CCMCacheSize = Get-WmiObject -namespace root\ccm\SoftMgmtAgent -class CacheConfig
	$CCMCache = $CCMCacheSize.Size
	$formSCCMToolKit_Load={
		
	}
	
	function rebuildWMI
	{
		function DisableService([System.ServiceProcess.ServiceController]$svc)
		{
			Set-Service -Name $svc.Name -StartupType Disabled
		}
		
		function EnableServiceAuto([System.ServiceProcess.ServiceController]$svc)
		{
			Set-Service -Name $svc.Name -StartupType Automatic
		}
		
		function StopService([System.ServiceProcess.ServiceController]$svc)
		{
			[string]$dep = ([string]::Empty)
			
			foreach ($depsvc in $svc.DependentServices)
			{ $dep += $depsvc.DisplayName + ", " }
			
			$richtextbox1.Text += "`nStopping $($svc.DisplayName) and its dependent services ($dep)"
			
			$svc.Stop()
			
			$svc.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Stopped)
			
			$richtextbox1.Text += "`nStopped $($svc.DisplayName)"
		}
		
		function StartService([System.ServiceProcess.ServiceController]$svc, [bool]$handleDependentServices)
		{
			if ($handleDependentServices)
			{
				$richtextbox1.Text += "`nStarting $($svc.DisplayName) and its dependent services"
			}
			
			else
			{
				$richtextbox1.Text += "`nStarting $($svc.DisplayName)"
			}
			
			if (!$svc.Status -ne [System.ServiceProcess.ServiceControllerStatus]::Running)
			{
				try
				{
					$svc.Start()
					
					$svc.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Running)
				}
				
				catch { }
			}
			
			$richtextbox1.Text += "`nStarted $($svc.DisplayName)"
			
			if ($handleDependentServices)
			{
				[System.ServiceProcess.ServiceController]$depsvc = $null;
				
				foreach ($depsvc in $svc.DependentServices)
				{
					if ($depsvc.StartType -eq [System.ServiceProcess.ServiceStartMode]::Automatic)
					{ StartService $depsvc $handleDependentServices }
				}
			}
		}
		
		function RegSvr32([string]$path)
		{
			$richtextbox1.Text += "`nRegistering $path"
			
			regsvr32.exe $path /s
		}
		
		function RegisterMof([System.IO.FileSystemInfo]$item)
		{
			[bool]$register = $true
			
			$richtextbox1.Text += "`nInspecting: $($item.FullName)"
			
			if ($item.Name.ToLowerInvariant().Contains('uninstall'))
			{
				$register = $false
				$richtextbox1.Text += "`nSkipping - uninstall file: $($item.FullName)"
			}
			
			elseif ($item.Name.ToLowerInvariant().Contains('remove'))
			{
				$register = $false
				$richtextbox1.Text += "`nSkipping - remove file: $($item.FullName)"
			}
			
			else
			{
				$txt = Get-Content $item.FullName
				
				if ($txt.Contains('#pragma autorecover'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - autorecover: $($item.FullName)"
				}
				
				elseif ($txt.Contains('#pragma deleteinstance'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - deleteinstance: $($item.FullName)"
				}
				
				elseif ($txt.Contains('#pragma deleteclass'))
				{
					$register = $false
					$richtextbox1.Text += "`nSkipping - deleteclass: $($item.FullName)"
				}
			}
			
			if ($register)
			{
				$richtextbox1.Text += "`nRegistering $($item.FullName)"
				mofcomp $item.FullName
			}
		}
		
		function HandleFSO([System.IO.FileSystemInfo]$item, [string]$targetExt)
		{
			if ($item.Extension -ne [string]::Empty)
			{
				if ($targetExt -eq 'dll')
				{
					if ($item.Extension.ToLowerInvariant() -eq '.dll')
					{ RegSvr32 $item.FullName }
				}
				
				elseif ($targetExt -eq 'mof')
				{
					if (($item.Extension.ToLowerInvariant() -eq '.mof') -or ($item.Extension.ToLowerInvariant() -eq '.mfl'))
					{ RegisterMof $item }
				}
			}
		}
		
		# get Winmgmt service
		[System.ServiceProcess.ServiceController]$wmisvc = Get-Service 'winmgmt'
		
		# disable winmgmt service
		DisableService $wmisvc
		
		# stop winmgmt service
		StopService $wmisvc
		
		# get wbem folder
		[string]$wbempath = [Environment]::ExpandEnvironmentVariables("%windir%\system32\wbem")
		
		[System.IO.FileSystemInfo[]]$itemlist = Get-ChildItem $wbempath -Recurse | Where-Object { $_.FullName.Contains('AutoRecover') -ne $true }
		
		[System.IO.FileSystemInfo]$item = $null
		
		# walk dlls
		foreach ($item in $itemlist)
		{ HandleFSO $item 'dll' }
		
		# call /regserver method on WMI private server executable
		wmiprvse /regserver
		
		# call /resetrepository method on WinMgmt service executable
		winmgmt /resetrepository
		
		# enable winmgmt service
		EnableServiceAuto $wmisvc
		
		# start winmgmt service
		StartService $wmisvc $true
		
		# walk MOF / MFLs
		foreach ($item in $itemlist)
		{ HandleFSO $item 'mof' }
	}
	function ReloadSccmClient
	{
		Invoke-WMIMethod -ComputerName $env:COMPUTERNAME -Namespace root\ccm -Class SMS_CLIENT -Name TriggerSchedule "{00000000-0000-0000-0000-000000000021}"
		Invoke-WMIMethod -ComputerName $env:COMPUTERNAME -Namespace root\ccm -Class SMS_CLIENT -Name TriggerSchedule "{00000000-0000-0000-0000-000000000022}"
		$richtextbox1.Text += "`nRan Machine Policy Updates"
	}
	function RestartConfigMan
	{
		cmd /c "%SystemRoot%\ccm\ccmrestart.exe"
		$richtextbox1.Text += "`nConfiguration Manager Is Reloading."
	}
	function ClientHealthEval
	{
		$richtextbox1.Text += "`nRan Client Health Evaluation."
		cmd /c "%SystemRoot%\ccm\ccmeval.exe"
	}
	function BackupSccmLogs
	{
		Robocopy "C:\Windows\CCM\Logs" C:\users\$env:UserName\Desktop\SccmLogs *.* /e
		$richtextbox1.Text += $("`nSCCM Logs backed up." | Out-String)
	}
	function DeleteCache
	{
		Remove-Item -path C:\Windows\ccmcache\* -Force -Recurse
		$richtextbox1.Text += "`nDeleted SCCM Cache."
	}
	function DeleteSCCM
	{
		$richtextbox1.Text += "`nUninstalling SCCM"
		cmd /c "%windir%\ccmsetup\ccmsetup.exe /uninstall"
		
		# Stop Services
		Stop-Service -Name ccmsetup -Force -ErrorAction SilentlyContinue
		Stop-Service -Name CcmExec -Force
		Stop-Service -Name smstsmgr -Force
		Stop-Service -Name CmRcService -Force
		
		# Remove WMI Namespaces
		Get-WmiObject -Query "SELECT * FROM __Namespace WHERE Name='ccm'" -Namespace root | Remove-WmiObject
		Get-WmiObject -Query "SELECT * FROM __Namespace WHERE Name='ms'" -Namespace root\cimv2 | Remove-WmiObject
		
		# Remove Services from Registry
		$MyReg = "HKLM:\SYSTEM\CurrentControlSet\Services"
		Remove-Item -Path $MyReg\CCMSetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\CcmExec -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\smstsmgr -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyReg\CmRcService -Force -Recurse -ErrorAction SilentlyContinue
		
		# Remove SCCM Client from Registry
		$MyPath = "HKLM:\SOFTWARE\Microsoft"
		Remove-Item -Path $MyPath\CCM -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyPath\CCMSetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyPath\SMS -Force -Recurse -ErrorAction SilentlyContinue
		
		# Remove Folders and Files
		$MyDir = $env:WinDir
		Remove-Item -Path $MyDir\CCM -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\ccmsetup -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\ccmcache -Force -Recurse -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\SMSCFG.ini -Force -ErrorAction SilentlyContinue
		Remove-Item -Path $MyDir\SMS*.mif -Force -ErrorAction SilentlyContinue
		$richtextbox1.Text += "`nCompleted Uninstalling SCCM."
	}
	function cmTrace
	{
		cmd /c "C:\WINDOWS\CCM\CMTrace.exe"
		$richtextbox1.Text += "`nStarted CMTrace."
	}
	function CcmRestart
	{
		$salvageRepo = (winmgmt /salvagerepository) | Out-String
		$richtextbox1.Text += $salvageRepo
	}
	function CcmRepair
	{
		$verifyRepo = (winmgmt /verifyrepository) | Out-String
		$richtextbox1.Text += $verifyRepo
	}
	
	function ResetRepo
	{
		net stop winmgmt
		$ResetRepo1 = (winmgmt /resetRepository) | Out-String
		$richtextbox1.Text += $ResetRepo1
	}
	function InstallSCCM
	{
		New-Item -Path "%windir%\" -Name "CCM" -ItemType "directory"
		cmd /c 'copy "\\fileserver\SCCM\Client\ccmsetup\ccmsetup.exe" "%windir%\CCM\ccmsetup.exe" /Z /Y'
		cmd /c "%windir%\CCM\ccmsetup.exe /forceinstall"
		taskmgr
		Invoke-Item c:\windows\ccmsetup\
		$richtextbox1.Text += "`nStarted CCM Setup."
	}
	
	$buttonRestartConfigMan_Click={
		RestartConfigMan
	}
	
	$buttonRunMachinePolicy_Click={
		ReloadSccmClient
	}
	
	$buttonClientHealthEval_Click={
		ClientHealthEval
	}
	
	$buttonSCCMLogs_Click={
		BackupSccmLogs
	}
	
	$buttonInstallSCCM_Click={
		InstallSCCM
	}
	
	$buttonDelSCCMCache_Click={
		DeleteCache
	}
	
	$buttonDeleteSCCM_Click={
		DeleteSCCM
	}
	
	$buttonSalvageRepo_Click={
		CcmRestart
	}
	
	$buttonVerifyRepo_Click={
		CcmRepair
	}
	
	$buttonResetRepo_Click={
		ResetRepo
	}
	
	$buttonUninstallReinstall_Click={
		rebuildWMI
	}
	
	$labelserialNumber_Click={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSCCMToolKit.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$labelserialNumber.remove_Click($labelserialNumber_Click)
			$buttonUninstallReinstall.remove_Click($buttonUninstallReinstall_Click)
			$buttonResetRepo.remove_Click($buttonResetRepo_Click)
			$buttonSalvageRepo.remove_Click($buttonSalvageRepo_Click)
			$buttonVerifyRepo.remove_Click($buttonVerifyRepo_Click)
			$buttonDeleteSCCM.remove_Click($buttonDeleteSCCM_Click)
			$buttonDelSCCMCache.remove_Click($buttonDelSCCMCache_Click)
			$buttonInstallSCCM.remove_Click($buttonInstallSCCM_Click)
			$buttonSCCMLogs.remove_Click($buttonSCCMLogs_Click)
			$buttonClientHealthEval.remove_Click($buttonClientHealthEval_Click)
			$buttonRunMachinePolicy.remove_Click($buttonRunMachinePolicy_Click)
			$buttonRestartConfigMan.remove_Click($buttonRestartConfigMan_Click)
			$formSCCMToolKit.remove_Load($formSCCMToolKit_Load)
			$formSCCMToolKit.remove_Load($Form_StateCorrection_Load)
			$formSCCMToolKit.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSCCMToolKit.SuspendLayout()
	$groupbox1.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox3.SuspendLayout()
	#
	# formSCCMToolKit
	#
	$formSCCMToolKit.Controls.Add($groupbox3)
	$formSCCMToolKit.Controls.Add($groupbox2)
	$formSCCMToolKit.Controls.Add($groupbox1)
	$formSCCMToolKit.Controls.Add($labelSCCMToolKit011)
	$formSCCMToolKit.Controls.Add($labelNewinghaerauedu)
	$formSCCMToolKit.Controls.Add($labelContact)
	$formSCCMToolKit.Controls.Add($richtextbox1)
	$formSCCMToolKit.AutoScaleDimensions = '6, 13'
	$formSCCMToolKit.AutoScaleMode = 'Font'
	$formSCCMToolKit.ClientSize = '384, 461'
	$formSCCMToolKit.Name = 'formSCCMToolKit'
	$formSCCMToolKit.Text = 'SCCM ToolKit'
	$formSCCMToolKit.add_Load($formSCCMToolKit_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($labelCCMCacheSize)
	$groupbox3.Controls.Add($labelCCMCache)
	$groupbox3.Controls.Add($labelFreeSpaceGB)
	$groupbox3.Controls.Add($labelDiskSizeGB)
	$groupbox3.Controls.Add($labelserialNumber)
	$groupbox3.Controls.Add($labelenvCOMPUTERNAME)
	$groupbox3.Controls.Add($labelMemory)
	$groupbox3.Controls.Add($labelSpaceAvailable)
	$groupbox3.Controls.Add($labelComputerName)
	$groupbox3.Controls.Add($labelHardDiskSize)
	$groupbox3.Location = '155, 180'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '217, 92'
	$groupbox3.TabIndex = 10
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'System Info:'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# labelCCMCacheSize
	#
	$labelCCMCacheSize.AutoSize = $True
	$labelCCMCacheSize.Location = '104, 75'
	$labelCCMCacheSize.Name = 'labelCCMCacheSize'
	$labelCCMCacheSize.Size = '69, 17'
	$labelCCMCacheSize.TabIndex = 14
	$labelCCMCacheSize.Text = "$CCMCache"
	$labelCCMCacheSize.UseCompatibleTextRendering = $True
	#
	# labelCCMCache
	#
	$labelCCMCache.AutoSize = $True
	$labelCCMCache.Location = '6, 75'
	$labelCCMCache.Name = 'labelCCMCache'
	$labelCCMCache.Size = '69, 17'
	$labelCCMCache.TabIndex = 11
	$labelCCMCache.Text = 'CCM Cache:'
	$labelCCMCache.UseCompatibleTextRendering = $True
	#
	# labelFreeSpaceGB
	#
	$labelFreeSpaceGB.AutoSize = $True
	$labelFreeSpaceGB.Location = '104, 60'
	$labelFreeSpaceGB.Name = 'labelFreeSpaceGB'
	$labelFreeSpaceGB.Size = '85, 17'
	$labelFreeSpaceGB.TabIndex = 13
	$labelFreeSpaceGB.Text = "$FreeSpace GB"
	$labelFreeSpaceGB.UseCompatibleTextRendering = $True
	#
	# labelDiskSizeGB
	#
	$labelDiskSizeGB.AutoSize = $True
	$labelDiskSizeGB.Location = '104, 46'
	$labelDiskSizeGB.Name = 'labelDiskSizeGB'
	$labelDiskSizeGB.Size = '74, 17'
	$labelDiskSizeGB.TabIndex = 12
	$labelDiskSizeGB.Text = "$DiskSize GB"
	$labelDiskSizeGB.UseCompatibleTextRendering = $True
	#
	# labelserialNumber
	#
	$labelserialNumber.AutoSize = $True
	$labelserialNumber.Location = '104, 31'
	$labelserialNumber.Name = 'labelserialNumber'
	$labelserialNumber.Size = '78, 17'
	$labelserialNumber.TabIndex = 11
	$labelserialNumber.Text = "$serialNumber"
	$labelserialNumber.UseCompatibleTextRendering = $True
	$labelserialNumber.add_Click($labelserialNumber_Click)
	#
	# labelenvCOMPUTERNAME
	#
	$labelenvCOMPUTERNAME.AutoSize = $True
	$labelenvCOMPUTERNAME.Location = '104, 16'
	$labelenvCOMPUTERNAME.Name = 'labelenvCOMPUTERNAME'
	$labelenvCOMPUTERNAME.Size = '129, 17'
	$labelenvCOMPUTERNAME.TabIndex = 10
	$labelenvCOMPUTERNAME.Text = "$env:COMPUTERNAME"
	$labelenvCOMPUTERNAME.UseCompatibleTextRendering = $True
	#
	# labelMemory
	#
	$labelMemory.AutoSize = $True
	$labelMemory.Location = '6, 31'
	$labelMemory.Name = 'labelMemory'
	$labelMemory.Size = '80, 17'
	$labelMemory.TabIndex = 7
	$labelMemory.Text = 'Serial Number:'
	$labelMemory.UseCompatibleTextRendering = $True
	#
	# labelSpaceAvailable
	#
	$labelSpaceAvailable.AutoSize = $True
	$labelSpaceAvailable.Location = '6, 60'
	$labelSpaceAvailable.Name = 'labelSpaceAvailable'
	$labelSpaceAvailable.Size = '89, 17'
	$labelSpaceAvailable.TabIndex = 9
	$labelSpaceAvailable.Text = 'Space Available:'
	$labelSpaceAvailable.UseCompatibleTextRendering = $True
	#
	# labelComputerName
	#
	$labelComputerName.AutoSize = $True
	$labelComputerName.Location = '6, 16'
	$labelComputerName.Name = 'labelComputerName'
	$labelComputerName.Size = '93, 17'
	$labelComputerName.TabIndex = 6
	$labelComputerName.Text = 'Computer Name: '
	$labelComputerName.UseCompatibleTextRendering = $True
	#
	# labelHardDiskSize
	#
	$labelHardDiskSize.AutoSize = $True
	$labelHardDiskSize.Location = '6, 46'
	$labelHardDiskSize.Name = 'labelHardDiskSize'
	$labelHardDiskSize.Size = '82, 17'
	$labelHardDiskSize.TabIndex = 8
	$labelHardDiskSize.Text = 'Hard Disk Size:'
	$labelHardDiskSize.UseCompatibleTextRendering = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonUninstallReinstall)
	$groupbox2.Controls.Add($buttonResetRepo)
	$groupbox2.Controls.Add($buttonSalvageRepo)
	$groupbox2.Controls.Add($buttonVerifyRepo)
	$groupbox2.Location = '245, 41'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '127, 138'
	$groupbox2.TabIndex = 5
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'WMI'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonUninstallReinstall
	#
	$buttonUninstallReinstall.BackColor = 'Tomato'
	$buttonUninstallReinstall.Location = '7, 109'
	$buttonUninstallReinstall.Name = 'buttonUninstallReinstall'
	$buttonUninstallReinstall.Size = '112, 23'
	$buttonUninstallReinstall.TabIndex = 3
	$buttonUninstallReinstall.Text = 'Uninstall/Reinstall'
	$buttonUninstallReinstall.UseCompatibleTextRendering = $True
	$buttonUninstallReinstall.UseVisualStyleBackColor = $False
	$buttonUninstallReinstall.add_Click($buttonUninstallReinstall_Click)
	#
	# buttonResetRepo
	#
	$buttonResetRepo.Location = '7, 77'
	$buttonResetRepo.Name = 'buttonResetRepo'
	$buttonResetRepo.Size = '112, 23'
	$buttonResetRepo.TabIndex = 2
	$buttonResetRepo.Text = 'Reset Repo'
	$buttonResetRepo.UseCompatibleTextRendering = $True
	$buttonResetRepo.UseVisualStyleBackColor = $True
	$buttonResetRepo.add_Click($buttonResetRepo_Click)
	#
	# buttonSalvageRepo
	#
	$buttonSalvageRepo.Location = '7, 48'
	$buttonSalvageRepo.Name = 'buttonSalvageRepo'
	$buttonSalvageRepo.Size = '112, 23'
	$buttonSalvageRepo.TabIndex = 0
	$buttonSalvageRepo.Text = 'Salvage Repo'
	$buttonSalvageRepo.UseCompatibleTextRendering = $True
	$buttonSalvageRepo.UseVisualStyleBackColor = $True
	$buttonSalvageRepo.add_Click($buttonSalvageRepo_Click)
	#
	# buttonVerifyRepo
	#
	$buttonVerifyRepo.Location = '7, 19'
	$buttonVerifyRepo.Name = 'buttonVerifyRepo'
	$buttonVerifyRepo.Size = '112, 23'
	$buttonVerifyRepo.TabIndex = 1
	$buttonVerifyRepo.Text = 'Verify Repo'
	$buttonVerifyRepo.UseCompatibleTextRendering = $True
	$buttonVerifyRepo.UseVisualStyleBackColor = $True
	$buttonVerifyRepo.add_Click($buttonVerifyRepo_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonDeleteSCCM)
	$groupbox1.Controls.Add($buttonDelSCCMCache)
	$groupbox1.Controls.Add($buttonInstallSCCM)
	$groupbox1.Controls.Add($buttonSCCMLogs)
	$groupbox1.Controls.Add($buttonClientHealthEval)
	$groupbox1.Controls.Add($buttonRunMachinePolicy)
	$groupbox1.Controls.Add($buttonRestartConfigMan)
	$groupbox1.Location = '13, 41'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '127, 230'
	$groupbox1.TabIndex = 4
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'SCCM'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# buttonDeleteSCCM
	#
	$buttonDeleteSCCM.BackColor = 'Tomato'
	$buttonDeleteSCCM.Location = '7, 198'
	$buttonDeleteSCCM.Name = 'buttonDeleteSCCM'
	$buttonDeleteSCCM.Size = '112, 23'
	$buttonDeleteSCCM.TabIndex = 7
	$buttonDeleteSCCM.Text = 'Delete SCCM'
	$buttonDeleteSCCM.UseCompatibleTextRendering = $True
	$buttonDeleteSCCM.UseVisualStyleBackColor = $False
	$buttonDeleteSCCM.add_Click($buttonDeleteSCCM_Click)
	#
	# buttonDelSCCMCache
	#
	$buttonDelSCCMCache.BackColor = 'Tomato'
	$buttonDelSCCMCache.Location = '7, 169'
	$buttonDelSCCMCache.Name = 'buttonDelSCCMCache'
	$buttonDelSCCMCache.Size = '112, 23'
	$buttonDelSCCMCache.TabIndex = 5
	$buttonDelSCCMCache.Text = 'Del SCCM Cache'
	$buttonDelSCCMCache.UseCompatibleTextRendering = $True
	$buttonDelSCCMCache.UseVisualStyleBackColor = $False
	$buttonDelSCCMCache.add_Click($buttonDelSCCMCache_Click)
	#
	# buttonInstallSCCM
	#
	$buttonInstallSCCM.Location = '7, 140'
	$buttonInstallSCCM.Name = 'buttonInstallSCCM'
	$buttonInstallSCCM.Size = '112, 23'
	$buttonInstallSCCM.TabIndex = 4
	$buttonInstallSCCM.Text = 'Install SCCM'
	$buttonInstallSCCM.UseCompatibleTextRendering = $True
	$buttonInstallSCCM.UseVisualStyleBackColor = $True
	$buttonInstallSCCM.add_Click($buttonInstallSCCM_Click)
	#
	# buttonSCCMLogs
	#
	$buttonSCCMLogs.Location = '7, 110'
	$buttonSCCMLogs.Name = 'buttonSCCMLogs'
	$buttonSCCMLogs.Size = '112, 23'
	$buttonSCCMLogs.TabIndex = 3
	$buttonSCCMLogs.Text = 'SCCM Logs'
	$buttonSCCMLogs.UseCompatibleTextRendering = $True
	$buttonSCCMLogs.UseVisualStyleBackColor = $True
	$buttonSCCMLogs.add_Click($buttonSCCMLogs_Click)
	#
	# buttonClientHealthEval
	#
	$buttonClientHealthEval.Location = '7, 80'
	$buttonClientHealthEval.Name = 'buttonClientHealthEval'
	$buttonClientHealthEval.Size = '112, 23'
	$buttonClientHealthEval.TabIndex = 2
	$buttonClientHealthEval.Text = 'Client Health Eval'
	$buttonClientHealthEval.UseCompatibleTextRendering = $True
	$buttonClientHealthEval.UseVisualStyleBackColor = $True
	$buttonClientHealthEval.add_Click($buttonClientHealthEval_Click)
	#
	# buttonRunMachinePolicy
	#
	$buttonRunMachinePolicy.Location = '7, 50'
	$buttonRunMachinePolicy.Name = 'buttonRunMachinePolicy'
	$buttonRunMachinePolicy.Size = '112, 23'
	$buttonRunMachinePolicy.TabIndex = 1
	$buttonRunMachinePolicy.Text = 'Run Machine Policy'
	$buttonRunMachinePolicy.UseCompatibleTextRendering = $True
	$buttonRunMachinePolicy.UseVisualStyleBackColor = $True
	$buttonRunMachinePolicy.add_Click($buttonRunMachinePolicy_Click)
	#
	# buttonRestartConfigMan
	#
	$buttonRestartConfigMan.Location = '7, 20'
	$buttonRestartConfigMan.Name = 'buttonRestartConfigMan'
	$buttonRestartConfigMan.Size = '112, 23'
	$buttonRestartConfigMan.TabIndex = 0
	$buttonRestartConfigMan.Text = 'Restart Config Man'
	$buttonRestartConfigMan.UseCompatibleTextRendering = $True
	$buttonRestartConfigMan.UseVisualStyleBackColor = $True
	$buttonRestartConfigMan.add_Click($buttonRestartConfigMan_Click)
	#
	# labelSCCMToolKit011
	#
	$labelSCCMToolKit011.AutoSize = $True
	$labelSCCMToolKit011.Location = '140, 13'
	$labelSCCMToolKit011.Name = 'labelSCCMToolKit011'
	$labelSCCMToolKit011.Size = '104, 17'
	$labelSCCMToolKit011.TabIndex = 3
	$labelSCCMToolKit011.Text = 'SCCM ToolKit 0.1.1'
	$labelSCCMToolKit011.UseCompatibleTextRendering = $True
	#
	# labelNewinghaerauedu
	#
	$labelNewinghaerauedu.AutoSize = $True
	$labelNewinghaerauedu.Location = '176, 444'
	$labelNewinghaerauedu.Name = 'labelNewinghaerauedu'
	$labelNewinghaerauedu.Size = '109, 17'
	$labelNewinghaerauedu.TabIndex = 2
	$labelNewinghaerauedu.Text = 'newingha@erau.edu'
	$labelNewinghaerauedu.UseCompatibleTextRendering = $True
	#
	# labelContact
	#
	$labelContact.AutoSize = $True
	$labelContact.Location = '134, 444'
	$labelContact.Name = 'labelContact'
	$labelContact.Size = '46, 17'
	$labelContact.TabIndex = 1
	$labelContact.Text = 'Contact:'
	$labelContact.UseCompatibleTextRendering = $True
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 278'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.Size = '359, 159'
	$richtextbox1.TabIndex = 0
	$richtextbox1.Text = ''
	$groupbox3.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox1.ResumeLayout()
	$formSCCMToolKit.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSCCMToolKit.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSCCMToolKit.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSCCMToolKit.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formSCCMToolKit.ShowDialog()

} #End Function

#Call the form
Show-xzcz_psf | Out-Null
