#requires -Version 3
#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 85d00cdb-7072-4d50-8eee-0efbbd738375
# Source File: gddgfhdfghgfdh.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Form code generated by:  PowerShell Studio 2019
     Generated on:       	  8/2/2019 9:07 AM
	 Powershell Logic by:     Alan Newingham
	 Contact: 		   	      alan.newingham@gmail.com
	 Git:					  https://github.com/01000001-01001110/Share
	--------------------------------------------------------------------------------
#>
#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-profileBackup {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formProfileBackup = New-Object 'System.Windows.Forms.Form'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$labelProfileBackup002 = New-Object 'System.Windows.Forms.Label'
	$labelInstDate = New-Object 'System.Windows.Forms.Label'
	$labelenvUserName = New-Object 'System.Windows.Forms.Label'
	$labelenvCOMPUTERNAME = New-Object 'System.Windows.Forms.Label'
	$buttonPrograms = New-Object 'System.Windows.Forms.Button'
	$buttonInventory = New-Object 'System.Windows.Forms.Button'
	$buttonPrinters = New-Object 'System.Windows.Forms.Button'
	$buttonBackup = New-Object 'System.Windows.Forms.Button'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxCustomDirectory = New-Object 'System.Windows.Forms.CheckBox'
	$textbox7 = New-Object 'System.Windows.Forms.TextBox'
	$checkboxQuickparts = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxBrowsers = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxVideos = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxPictures = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDocuments = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDownloads = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxDesktop = New-Object 'System.Windows.Forms.CheckBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$labelFromLocation = New-Object 'System.Windows.Forms.Label'
	$labelToLocation = New-Object 'System.Windows.Forms.Label'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	#$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formProfileBackup_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#Begin Region - Automatic System Information Gathering
	$CurrentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	[string]$ComputerName = $env:computername
	$Computer = $ComputerName
	#Manufacturer information
	$Manufacturer = Get-WmiObject win32_computersystem | Select Manufacturer
	$Model = Get-WmiObject win32_computersystem | Select Model
	#Gets the OS info
	$GetOS = Get-WmiObject -class Win32_OperatingSystem -computername $Computer
	$OS = $GetOS.Caption
	$OSArchitecture = $GetOS.OSArchitecture
	$OSBuildNumber = $GetOS.BuildNumber
	#Monitor information
	$MonitorCount = Get-ciminstance -namespace root/wmi -classname WmiMonitorConnectionParams | Select VideoOutputTechnology
	#Gets memory information
	$Getmemoryslot = Get-WmiObject Win32_PhysicalMemoryArray -ComputerName $computer
	$Getmemory = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer
	$Getmemorymeasure = Get-WMIObject Win32_PhysicalMemory -ComputerName $computer | Measure-Object -Property Capacity -Sum
	$MemorySlot = $Getmemoryslot.MemoryDevices
	$MaxMemory = $($Getmemoryslot.MaxCapacity/1024/1024)
	$TotalMemSticks = $Getmemorymeasure.count
	$TotalMemSize = $($Getmemorymeasure.sum/1024/1024/1024)
	#Get the disk info
	$GetDiskInfo = Get-WmiObject Win32_logicaldisk -ComputerName $computer -Filter "DeviceID='C:'"
	$DiskSize = $([math]::Round($GetDiskInfo.Size/1GB))
	$FreeSpace = $([math]::Round($GetDiskInfo.FreeSpace/1GB))
	$UsedSapce = $([math]::Round($DiskSize - $FreeSpace))
	#Gets CPU info
	$GetCPU = Get-wmiobject win32_processor -ComputerName $Computer
	$CPUName = $GetCPU.Name
	$CPUManufacturer = $GetCPU.Manufacturer
	$CPUMaxClockSpeed = $GetCPU.MaxClockSpeed
	#account status
	$LoggedOnUser = (Get-WmiObject win32_computersystem -ComputerName $Computer).Username
	$getLockedStart = If (Get-Process logonui -ComputerName $Computer -ErrorAction SilentlyContinue) { $Locked = "Yes" }
	Else { $Locked = "No" }
	#Serial Number
	$SerialNumber = (Get-WmiObject win32_bios -ComputerName $Computer).SerialNumber
	#get IP address
	$IPAddress = (Get-WmiObject win32_NetworkadapterConfiguration -ComputerName $Computer | Where-Object IPAddress -ne $null).IPAddress
	#Gets BIOS info
	$BIOSName = (Get-WmiObject win32_bios -ComputerName $Computer).Name
	$BIOSManufacturer = (Get-WmiObject win32_bios -ComputerName $Computer).Manufacturer
	$BIOSVersionN = (Get-WmiObject win32_bios -ComputerName $Computer).Version
	#Gets Motherboard info
	$MotherBoardName = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Name
	$MotherBoardManufacturet = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Manufacturer
	$MotherBoardProduct = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).Product
	$MotherBoardSerial = (Get-WmiObject Win32_BaseBoard -ComputerName $Computer).SerialNumber
	$InstDate = (Get-CimInstance Win32_OperatingSystem).InstallDate
	$DesktopPath = [Environment]::GetFolderPath("Desktop")
	$MonitorC0unt = $MonitorCount -replace '@{VideoOutputTechnology=', ''
	$MonitorCount = $MonitorC0unt -replace '}', ''
	$M4nufacturer = $Manufacturer -replace '@{Manufacturer=', ''
	$Manufacturer = $M4nufacturer -replace '}', ''
	$M0del = $Model -replace '@{Model='
	$Model = $M0del -replace '}'
	$directories = Get-ChildItem -Path "C:\Users\" | Select -Property Name
	$D1rectories = $directories -replace '{@{Name=', ''
	$directories = $D1rectories -replace '}', ''
	$M0therBoardSerial = $MotherBoardSerial -replace '/$SerialNumber/', ''
	$MotherBoardSerial = $M0therBoardSerial -replace '/'
	$TmpFile = [System.IO.Path]::GetTempFileName
	$nl = [Environment]::NewLine
	#End Region - Automatic System Information Gathering


	# Setting up Speech
	# Need to load the System.Speech assembly
	Add-Type -AssemblyName System.speech
	
	# Now we create the SpeechSynthesizer object.
	$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
	
	# Setting voice
	$speak.SelectVoice('Microsoft Zira Desktop')




	function Get-Inventory
	{
		$InventoryScript = cmd /c "net use"
		$InventoryScript += cmd /c "WMIC OS LIST BRIEF"
		$InventoryScript += cmd /c "WMIC BIOS get serialnumber"
		$InventoryScript += cmd /c "ipconfig /all"
		$InventoryScript += cmd /c 'net localgroup "Administrators"'
		$InventoryScript += cmd /c "WMIC OS GET csname"
		$InventoryScript += cmd /c 'netsh advfirewall export "$textbox2.Text\firwallpolicy.wfw"'
		$InventoryScript += cmd /c "WEVTUtil query-events System /count:500 /rd:true /format:text"
		$InventoryScript | Out-GridView
	}
	function listUsers
	{
		$userFolders = Get-ChildItem -path c:\users | Select-Object Name
		[array]$userFolders = Get-ChildItem -path C:\Users | Select-Object Name
		ForEach ($Item in $userFolders) { $richtextbox1.Items.Add($Item.Name) }
	}
	
	function backupDirectory
	{
		$source = $TextBox1.Text
		$dest = $TextBox2.Text
		If (Test-Path $source)
		{
			
			If ($checkboxDesktop.Checked)
			{
				$ProgressBar1.Value = "15"
				#Copy-Item "$source\Desktop" -Destination "$dest\Desktop" -Recurse -Force
				#robocopy c:\users\newingha\Desktop e:\backup\why *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				Robocopy $source\Desktop $dest\Desktop *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				#$richtextbox1.Text = Robocopy $source\Desktop $dest\Desktop *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt | Out-String
				$richtextbox1.Text += "`nDesktop directory backed up successfully."
				$speak.Speak("The Desktop directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "30"
			}
			If ($checkboxDocuments.Checked)
			{
				Robocopy $source\Documents $dest\Documents *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nDocuments directory backed up successfully."
				$speak.Speak("The Documents directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "45"
			}
			If ($checkboxDownloads.Checked)
			{
				Robocopy $source\Downloads $dest\Downloads *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nDownloads directory backed up successfully."
				$speak.Speak("The Downloads directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "57"
			}
			If ($checkboxBrowsers.Checked)
			{
				Robocopy $source\Favorites $dest\Favorites *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				Robocopy $source\AppData\Local\Google $dest\AppData\Local\Google *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				Robocopy $source\AppData\Roaming\Mozilla\Firefox\Profiles $dest\AppData\Roaming\Mozilla\Firefox\Profiles *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nIE, FireFox, and Chrome Bookmark directories backed up successfully."
				$speak.Speak("The Eye E, Fire Fox and Chrome Bookmarks directories completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "65"
			}
			If ($checkboxPictures.Checked)
			{
				Robocopy $source\Pictures $dest\Pictures *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nPictures directory backed up successfully."
				$speak.Speak("The Pictures directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "75"
			}
			If ($checkboxVideos.Checked)
			{
				Robocopy $source\Videos $dest\Videos *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nVideos directory backed up successfully."
				$speak.Speak("The Videos directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "80"
			}
			If ($checkboxQuickparts.Checked)
			{
				Robocopy "$source\application data\microsoft\templates" "$dest\application data\microsoft\templates" *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nQuickParts directory backed up successfully."
				$speak.Speak("The Microsoft QuickParts completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "90"
			}
			If ($checkboxCustomDirectory.Checked)
			{
				$source = $textbox7.Text
				Robocopy $source $dest\Custom_Directory_Backup *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
				$richtextbox1.Text += "`nCustom directory backed up successfully."
				$speak.Speak("The custom backup directory completed backing up. Continuing backup.")
				$richtextbox1.Text += "`n# # # # # # # # # #`n"
				$ProgressBar1.Value = "93"
			}
			Robocopy $source\AppData\Roaming\Adobe\Acrobat\DC\Security $dest\AppData\Roaming\Adobe\Acrobat\DC\Security *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
			$ProgressBar1.Value = "95"
			Robocopy $source\application data\microsoft\signatures $dest\application data\microsoft\signatures *.* /E /ZB /J /LOG+:$source\desktop\backuplog.txt
			$ProgressBar1.Value = "98"
			$richtextbox1.Text += "`nBackup completed."
			$ProgressBar1.Value = "100"			
			$speak.Speak("All data that you selected to backup has successfully backed up. Please continue with your day in whatever manner that might mean.")
			$result = [System.Windows.Forms.MessageBox]::Show('This Operation Completed Successfully!', 'Warning', 'OK', 'Warning')
			$result
			
			
		}
		Else
		{
			$speak.Speak("No joy. The directory you selected is not at that specific location. Please check and attempt again.")
			$result = [System.Windows.Forms.MessageBox]::Show('Unable to reach souce location!', 'Warning', 'YesNo', 'Warning')
			$result
		}
	}
	$checkboxDocuments_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	$checkboxDownloads_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	$checkboxDesktop_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	$buttonBackup_Click={
		$speak.Speak("Initiating the backup. Please be patient this takes a while, maybe ask the customer about the weather?")
		backupDirectory
	}
	
	$buttonPrograms_Click={
		$speak.Speak("Just a moment. I am collecting a list of all installed programs and will output for your immediate review.")
		Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Out-GridView
	}
	
	$buttonPrinters_Click={
		$speak.Speak("Here is the printers that are installed on this computer.")
		control printers
	}
	
	$buttonInventory_Click={
		$speak.Speak("Just a moment. I am creating and collecting logs for your immediate review.")
		Get-Inventory
	}
	
	$labelInstDate_Click={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formProfileBackup.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$labelInstDate.remove_Click($labelInstDate_Click)
			$buttonPrograms.remove_Click($buttonPrograms_Click)
			$buttonInventory.remove_Click($buttonInventory_Click)
			$buttonPrinters.remove_Click($buttonPrinters_Click)
			$buttonBackup.remove_Click($buttonBackup_Click)
			$checkboxDesktop.remove_CheckedChanged($checkboxDesktop_CheckedChanged)
			$formProfileBackup.remove_Load($formProfileBackup_Load)
			$formProfileBackup.remove_Load($Form_StateCorrection_Load)
			$formProfileBackup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formProfileBackup.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox3.SuspendLayout()
	#
	# formProfileBackup
	#
	$formProfileBackup.Controls.Add($label1)
	$formProfileBackup.Controls.Add($labelProfileBackup002)
	$formProfileBackup.Controls.Add($labelInstDate)
	$formProfileBackup.Controls.Add($labelenvUserName)
	$formProfileBackup.Controls.Add($labelenvCOMPUTERNAME)
	$formProfileBackup.Controls.Add($buttonPrograms)
	$formProfileBackup.Controls.Add($buttonInventory)
	$formProfileBackup.Controls.Add($buttonPrinters)
	$formProfileBackup.Controls.Add($buttonBackup)
	$formProfileBackup.Controls.Add($progressbar1)
	$formProfileBackup.Controls.Add($groupbox3)
	$formProfileBackup.Controls.Add($groupbox2)
	$formProfileBackup.Controls.Add($richtextbox1)
	$formProfileBackup.AutoScaleDimensions = '6, 13'
	$formProfileBackup.AutoScaleMode = 'Font'
	$formProfileBackup.ClientSize = '408, 461'
	$System_Windows_Forms_MenuStrip_1 = New-Object 'System.Windows.Forms.MenuStrip'
	$System_Windows_Forms_MenuStrip_1.Location = '0, 0'
	$System_Windows_Forms_MenuStrip_1.Name = ''
	$System_Windows_Forms_MenuStrip_1.Size = '632, 24'
	$System_Windows_Forms_MenuStrip_1.TabIndex = 10
	$System_Windows_Forms_MenuStrip_1.Visible = $False
	$formProfileBackup.MainMenuStrip = $System_Windows_Forms_MenuStrip_1
	$formProfileBackup.Name = 'formProfileBackup'
	$formProfileBackup.Text = 'Profile Backup '
	$formProfileBackup.add_Load($formProfileBackup_Load)
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '260, 43'
	$label1.Name = 'label1'
	$label1.Size = '112, 17'
	$label1.TabIndex = 39
	$label1.Text = "$env:ComputerName"
	$label1.UseCompatibleTextRendering = $True
	#
	# labelProfileBackup002
	#
	$labelProfileBackup002.AutoSize = $True
	$labelProfileBackup002.Location = '150, 9'
	$labelProfileBackup002.Name = 'labelProfileBackup002'
	$labelProfileBackup002.Size = '105, 17'
	$labelProfileBackup002.TabIndex = 38
	$labelProfileBackup002.Text = 'Profile Backup Voice'
	$labelProfileBackup002.UseCompatibleTextRendering = $True
	#
	# labelInstDate
	#
	$labelInstDate.AutoSize = $True
	$labelInstDate.Location = '260, 94'
	$labelInstDate.Name = 'labelInstDate'
	$labelInstDate.Size = '53, 17'
	$labelInstDate.TabIndex = 37
	$labelInstDate.Text = "$InstDate"
	$labelInstDate.UseCompatibleTextRendering = $True
	$labelInstDate.add_Click($labelInstDate_Click)
	#
	# labelenvUserName
	#
	$labelenvUserName.AutoSize = $True
	$labelenvUserName.Location = '260, 77'
	$labelenvUserName.Name = 'labelenvUserName'
	$labelenvUserName.Size = '86, 17'
	$labelenvUserName.TabIndex = 36
	$labelenvUserName.Text = "$env:UserName"
	$labelenvUserName.UseCompatibleTextRendering = $True
	#
	# labelenvCOMPUTERNAME
	#
	$labelenvCOMPUTERNAME.AutoSize = $True
	$labelenvCOMPUTERNAME.Location = '260, 60'
	$labelenvCOMPUTERNAME.Name = 'labelenvCOMPUTERNAME'
	$labelenvCOMPUTERNAME.Size = '87, 17'
	$labelenvCOMPUTERNAME.TabIndex = 35
	$labelenvCOMPUTERNAME.Text = "$LoggedOnUser"
	$labelenvCOMPUTERNAME.UseCompatibleTextRendering = $True
	#
	# buttonPrograms
	#
	$buttonPrograms.Location = '317, 211'
	$buttonPrograms.Name = 'buttonPrograms'
	$buttonPrograms.Size = '75, 23'
	$buttonPrograms.TabIndex = 34
	$buttonPrograms.Text = 'Programs'
	$buttonPrograms.UseCompatibleTextRendering = $True
	$buttonPrograms.UseVisualStyleBackColor = $True
	$buttonPrograms.add_Click($buttonPrograms_Click)
	#
	# buttonInventory
	#
	$buttonInventory.Location = '317, 269'
	$buttonInventory.Name = 'buttonInventory'
	$buttonInventory.Size = '75, 23'
	$buttonInventory.TabIndex = 33
	$buttonInventory.Text = 'Inventory'
	$buttonInventory.UseCompatibleTextRendering = $True
	$buttonInventory.UseVisualStyleBackColor = $True
	$buttonInventory.add_Click($buttonInventory_Click)
	#
	# buttonPrinters
	#
	$buttonPrinters.Location = '317, 240'
	$buttonPrinters.Name = 'buttonPrinters'
	$buttonPrinters.Size = '75, 23'
	$buttonPrinters.TabIndex = 32
	$buttonPrinters.Text = 'Printers'
	$buttonPrinters.UseCompatibleTextRendering = $True
	$buttonPrinters.UseVisualStyleBackColor = $True
	$buttonPrinters.add_Click($buttonPrinters_Click)
	#
	# buttonBackup
	#
	$buttonBackup.Location = '317, 297'
	$buttonBackup.Name = 'buttonBackup'
	$buttonBackup.Size = '75, 52'
	$buttonBackup.TabIndex = 31
	$buttonBackup.Text = 'Backup'
	$buttonBackup.UseCompatibleTextRendering = $True
	$buttonBackup.UseVisualStyleBackColor = $True
	$buttonBackup.add_Click($buttonBackup_Click)
	#
	# progressbar1
	#
	$progressbar1.Location = '0, 446'
	$progressbar1.Name = 'progressbar1'
	$progressbar1.Size = '409, 17'
	$progressbar1.TabIndex = 30
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($checkboxCustomDirectory)
	$groupbox3.Controls.Add($textbox7)
	$groupbox3.Controls.Add($checkboxQuickparts)
	$groupbox3.Controls.Add($checkboxBrowsers)
	$groupbox3.Controls.Add($checkboxVideos)
	$groupbox3.Controls.Add($checkboxPictures)
	$groupbox3.Controls.Add($checkboxDocuments)
	$groupbox3.Controls.Add($checkboxDownloads)
	$groupbox3.Controls.Add($checkboxDesktop)
	$groupbox3.Location = '9, 129'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '245, 221'
	$groupbox3.TabIndex = 29
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Directories'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# checkboxCustomDirectory
	#
	$checkboxCustomDirectory.Location = '6, 187'
	$checkboxCustomDirectory.Name = 'checkboxCustomDirectory'
	$checkboxCustomDirectory.Size = '122, 24'
	$checkboxCustomDirectory.TabIndex = 36
	$checkboxCustomDirectory.Text = 'Custom Directory'
	$checkboxCustomDirectory.UseCompatibleTextRendering = $True
	$checkboxCustomDirectory.UseVisualStyleBackColor = $True
	#
	# textbox7
	#
	$textbox7.Location = '129, 189'
	$textbox7.Name = 'textbox7'
	$textbox7.Size = '100, 20'
	$textbox7.TabIndex = 35
	#
	# checkboxQuickparts
	#
	$checkboxQuickparts.Location = '6, 163'
	$checkboxQuickparts.Name = 'checkboxQuickparts'
	$checkboxQuickparts.Size = '109, 24'
	$checkboxQuickparts.TabIndex = 34
	$checkboxQuickparts.Text = 'Quickparts'
	$checkboxQuickparts.UseCompatibleTextRendering = $True
	$checkboxQuickparts.UseVisualStyleBackColor = $True
	#
	# checkboxBrowsers
	#
	$checkboxBrowsers.Location = '6, 139'
	$checkboxBrowsers.Name = 'checkboxBrowsers'
	$checkboxBrowsers.Size = '104, 24'
	$checkboxBrowsers.TabIndex = 33
	$checkboxBrowsers.Text = 'Browsers'
	$checkboxBrowsers.UseCompatibleTextRendering = $True
	$checkboxBrowsers.UseVisualStyleBackColor = $True
	#
	# checkboxVideos
	#
	$checkboxVideos.Location = '6, 115'
	$checkboxVideos.Name = 'checkboxVideos'
	$checkboxVideos.Size = '104, 24'
	$checkboxVideos.TabIndex = 32
	$checkboxVideos.Text = 'Videos'
	$checkboxVideos.UseCompatibleTextRendering = $True
	$checkboxVideos.UseVisualStyleBackColor = $True
	#
	# checkboxPictures
	#
	$checkboxPictures.Location = '6, 91'
	$checkboxPictures.Name = 'checkboxPictures'
	$checkboxPictures.Size = '104, 24'
	$checkboxPictures.TabIndex = 31
	$checkboxPictures.Text = 'Pictures'
	$checkboxPictures.UseCompatibleTextRendering = $True
	$checkboxPictures.UseVisualStyleBackColor = $True
	#
	# checkboxDocuments
	#
	$checkboxDocuments.Location = '6, 43'
	$checkboxDocuments.Name = 'checkboxDocuments'
	$checkboxDocuments.Size = '104, 24'
	$checkboxDocuments.TabIndex = 30
	$checkboxDocuments.Text = 'Documents'
	$checkboxDocuments.UseCompatibleTextRendering = $True
	$checkboxDocuments.UseVisualStyleBackColor = $True
	#
	# checkboxDownloads
	#
	$checkboxDownloads.Location = '6, 67'
	$checkboxDownloads.Name = 'checkboxDownloads'
	$checkboxDownloads.Size = '104, 24'
	$checkboxDownloads.TabIndex = 29
	$checkboxDownloads.Text = 'Downloads'
	$checkboxDownloads.UseCompatibleTextRendering = $True
	$checkboxDownloads.UseVisualStyleBackColor = $True
	#
	# checkboxDesktop
	#
	$checkboxDesktop.Location = '6, 19'
	$checkboxDesktop.Name = 'checkboxDesktop'
	$checkboxDesktop.Size = '104, 27'
	$checkboxDesktop.TabIndex = 28
	$checkboxDesktop.Text = 'Desktop'
	$checkboxDesktop.UseCompatibleTextRendering = $True
	$checkboxDesktop.UseVisualStyleBackColor = $True
	$checkboxDesktop.add_CheckedChanged($checkboxDesktop_CheckedChanged)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($textbox1)
	$groupbox2.Controls.Add($textbox2)
	$groupbox2.Controls.Add($labelFromLocation)
	$groupbox2.Controls.Add($labelToLocation)
	$groupbox2.Location = '9, 27'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '245, 100'
	$groupbox2.TabIndex = 28
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Locations'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# textbox1
	#
	$textbox1.Location = '101, 32'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '128, 20'
	$textbox1.TabIndex = 1
	#
	# textbox2
	#
	$textbox2.Location = '101, 58'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '128, 20'
	$textbox2.TabIndex = 2
	#
	# labelFromLocation
	#
	$labelFromLocation.AutoSize = $True
	$labelFromLocation.Location = '6, 35'
	$labelFromLocation.Name = 'labelFromLocation'
	$labelFromLocation.Size = '77, 17'
	$labelFromLocation.TabIndex = 11
	$labelFromLocation.Text = 'From Location'
	$labelFromLocation.UseCompatibleTextRendering = $True
	#
	# labelToLocation
	#
	$labelToLocation.AutoSize = $True
	$labelToLocation.Location = '6, 61'
	$labelToLocation.Name = 'labelToLocation'
	$labelToLocation.Size = '63, 17'
	$labelToLocation.TabIndex = 12
	$labelToLocation.Text = 'To Location'
	$labelToLocation.UseCompatibleTextRendering = $True
	#
	# richtextbox1
	#
	$richtextbox1.Location = '0, 356'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.Size = '409, 93'
	$richtextbox1.TabIndex = 7
	$richtextbox1.Text = 'Welcome to the Profile Backup Tool!'
	$richtextbox1.Text += "`n`n"
	$richtextbox1.Text += "`n# # # # # # # # # #`n"
	# tooltip1
	#
	$groupbox3.ResumeLayout()
	$groupbox2.ResumeLayout()
	$formProfileBackup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formProfileBackup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formProfileBackup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formProfileBackup.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formProfileBackup.ShowDialog()

} #End Function

#Call the form
Show-profileBackup | Out-Null
